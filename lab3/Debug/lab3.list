
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003034  08003034  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003034  08003034  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003034  08003034  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800303c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000024  08003060  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003060  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a41a  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddc  00000000  00000000  0002a467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000202c  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0ee  00000000  00000000  0002f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082709  00000000  00000000  0003c94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  000bf0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ffc 	.word	0x08002ffc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002ffc 	.word	0x08002ffc

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f001 f838 	bl	8001210 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fb86 	bl	80008c4 <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fa34 	bl	8001628 <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f001 f83b 	bl	800123c <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fb6f 	bl	80008c4 <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa1d 	bl	8001628 <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f001 f83a 	bl	8001268 <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fb58 	bl	80008c4 <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fa06 	bl	8001628 <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f001 f839 	bl	8001294 <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb41 	bl	80008c4 <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 f9ef 	bl	8001628 <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 fedc 	bl	8001010 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 f9e4 	bl	8001628 <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 fee5 	bl	8001038 <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 f9d9 	bl	8001628 <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 feee 	bl	8001060 <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 f9ce 	bl	8001628 <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000044 	.word	0x20000044
 80002b0:	20000000 	.word	0x20000000
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	20000098 	.word	0x20000098
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000008 	.word	0x20000008

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f000 ffd4 	bl	80012c0 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 faca 	bl	80008c4 <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f992 	bl	800165c <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f000 ffd7 	bl	80012ec <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fab3 	bl	80008c4 <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 f97b 	bl	800165c <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f000 ffd6 	bl	8001318 <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fa9c 	bl	80008c4 <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f964 	bl	800165c <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f000 ffd5 	bl	8001344 <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa85 	bl	80008c4 <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f94d 	bl	800165c <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fe5c 	bl	8001088 <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f001 f942 	bl	800165c <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 fe65 	bl	80010b0 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f001 f937 	bl	800165c <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 fe6e 	bl	80010d8 <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 f92c 	bl	800165c <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000048 	.word	0x20000048
 8000428:	20000004 	.word	0x20000004
 800042c:	20000010 	.word	0x20000010
 8000430:	2000009c 	.word	0x2000009c
 8000434:	20000008 	.word	0x20000008
 8000438:	20000000 	.word	0x20000000

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b51      	ldr	r3, [pc, #324]	; (8000588 <fsm_mode_run+0x14c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 8094 	bhi.w	8000572 <fsm_mode_run+0x136>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	0800047f 	.word	0x0800047f
 8000458:	080004c7 	.word	0x080004c7
 800045c:	0800050b 	.word	0x0800050b
 8000460:	0800054f 	.word	0x0800054f
	case INIT:
		status_mode = MODE1;
 8000464:	4b48      	ldr	r3, [pc, #288]	; (8000588 <fsm_mode_run+0x14c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b48      	ldr	r3, [pc, #288]	; (800058c <fsm_mode_run+0x150>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b47      	ldr	r3, [pc, #284]	; (8000590 <fsm_mode_run+0x154>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 8000476:	4b47      	ldr	r3, [pc, #284]	; (8000594 <fsm_mode_run+0x158>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 800047c:	e082      	b.n	8000584 <fsm_mode_run+0x148>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 800047e:	4b46      	ldr	r3, [pc, #280]	; (8000598 <fsm_mode_run+0x15c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fa2c 	bl	80008e0 <isButtonflag>
 8000488:	4603      	mov	r3, r0
 800048a:	2b01      	cmp	r3, #1
 800048c:	d173      	bne.n	8000576 <fsm_mode_run+0x13a>
			clearTimer1();
 800048e:	f001 f89b 	bl	80015c8 <clearTimer1>
			clearTimer2();
 8000492:	f001 f8a9 	bl	80015e8 <clearTimer2>
			clearTimer3();
 8000496:	f001 f8b7 	bl	8001608 <clearTimer3>
			status_mode = MODE2;
 800049a:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <fsm_mode_run+0x14c>)
 800049c:	2202      	movs	r2, #2
 800049e:	601a      	str	r2, [r3, #0]
			SetRedVerHor(); // to when blinky, led red ver and hor are the same
 80004a0:	f000 fea6 	bl	80011f0 <SetRedVerHor>
			status_ver = MODIFY_RED;
 80004a4:	4b39      	ldr	r3, [pc, #228]	; (800058c <fsm_mode_run+0x150>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004aa:	4b39      	ldr	r3, [pc, #228]	; (8000590 <fsm_mode_run+0x154>)
 80004ac:	220c      	movs	r2, #12
 80004ae:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004b0:	4b3a      	ldr	r3, [pc, #232]	; (800059c <fsm_mode_run+0x160>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004b6:	4b3a      	ldr	r3, [pc, #232]	; (80005a0 <fsm_mode_run+0x164>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a3a      	ldr	r2, [pc, #232]	; (80005a4 <fsm_mode_run+0x168>)
 80004bc:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <fsm_mode_run+0x158>)
 80004c0:	221e      	movs	r2, #30
 80004c2:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 80004c4:	e057      	b.n	8000576 <fsm_mode_run+0x13a>
	case MODE2:

		if (isButtonflag(but1) == 1){
 80004c6:	4b34      	ldr	r3, [pc, #208]	; (8000598 <fsm_mode_run+0x15c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fa08 	bl	80008e0 <isButtonflag>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d151      	bne.n	800057a <fsm_mode_run+0x13e>
			clearTimer1();
 80004d6:	f001 f877 	bl	80015c8 <clearTimer1>
			clearTimer2();
 80004da:	f001 f885 	bl	80015e8 <clearTimer2>
			clearTimer3();
 80004de:	f001 f893 	bl	8001608 <clearTimer3>
			status_mode = MODE3;
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <fsm_mode_run+0x14c>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <fsm_mode_run+0x150>)
 80004ea:	220d      	movs	r2, #13
 80004ec:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <fsm_mode_run+0x154>)
 80004f0:	220d      	movs	r2, #13
 80004f2:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <fsm_mode_run+0x160>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <fsm_mode_run+0x16c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a29      	ldr	r2, [pc, #164]	; (80005a4 <fsm_mode_run+0x168>)
 8000500:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <fsm_mode_run+0x158>)
 8000504:	221e      	movs	r2, #30
 8000506:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 8000508:	e037      	b.n	800057a <fsm_mode_run+0x13e>
	case MODE3:

		if (isButtonflag(but1) == 1){
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <fsm_mode_run+0x15c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f9e6 	bl	80008e0 <isButtonflag>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	d131      	bne.n	800057e <fsm_mode_run+0x142>
			clearTimer1();
 800051a:	f001 f855 	bl	80015c8 <clearTimer1>
			clearTimer2();
 800051e:	f001 f863 	bl	80015e8 <clearTimer2>
			clearTimer3();
 8000522:	f001 f871 	bl	8001608 <clearTimer3>
			status_mode = MODE4;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <fsm_mode_run+0x14c>)
 8000528:	2204      	movs	r2, #4
 800052a:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_YELLOW;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <fsm_mode_run+0x150>)
 800052e:	220e      	movs	r2, #14
 8000530:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <fsm_mode_run+0x154>)
 8000534:	220e      	movs	r2, #14
 8000536:	601a      	str	r2, [r3, #0]
			led12 = MODE4;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <fsm_mode_run+0x160>)
 800053a:	2204      	movs	r2, #4
 800053c:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <fsm_mode_run+0x170>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <fsm_mode_run+0x168>)
 8000544:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <fsm_mode_run+0x158>)
 8000548:	221e      	movs	r2, #30
 800054a:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 800054c:	e017      	b.n	800057e <fsm_mode_run+0x142>
	case MODE4:
		if (isButtonflag(but1) == 1){
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <fsm_mode_run+0x15c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f9c4 	bl	80008e0 <isButtonflag>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d111      	bne.n	8000582 <fsm_mode_run+0x146>
			clearTimer1();
 800055e:	f001 f833 	bl	80015c8 <clearTimer1>
			clearTimer2();
 8000562:	f001 f841 	bl	80015e8 <clearTimer2>
			clearTimer3();
 8000566:	f001 f84f 	bl	8001608 <clearTimer3>
			status_mode = INIT;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <fsm_mode_run+0x14c>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		break;
 8000570:	e007      	b.n	8000582 <fsm_mode_run+0x146>
	default:
		break;
 8000572:	bf00      	nop
 8000574:	e006      	b.n	8000584 <fsm_mode_run+0x148>
		break;
 8000576:	bf00      	nop
 8000578:	e004      	b.n	8000584 <fsm_mode_run+0x148>
		break;
 800057a:	bf00      	nop
 800057c:	e002      	b.n	8000584 <fsm_mode_run+0x148>
		break;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <fsm_mode_run+0x148>
		break;
 8000582:	bf00      	nop
	}


}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000040 	.word	0x20000040
 800058c:	20000044 	.word	0x20000044
 8000590:	20000048 	.word	0x20000048
 8000594:	2000004c 	.word	0x2000004c
 8000598:	20000054 	.word	0x20000054
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000010 	.word	0x20000010
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000008 	.word	0x20000008

080005b0 <fsm_mode_led7seg>:
 *      Author: pc
 */

#include <fsm_mode_Led7Seg.h>

void fsm_mode_led7seg(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 80005b4:	4bb4      	ldr	r3, [pc, #720]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b21      	cmp	r3, #33	; 0x21
 80005ba:	f200 816f 	bhi.w	800089c <fsm_mode_led7seg+0x2ec>
 80005be:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <fsm_mode_led7seg+0x14>)
 80005c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c4:	0800064d 	.word	0x0800064d
 80005c8:	0800089d 	.word	0x0800089d
 80005cc:	0800089d 	.word	0x0800089d
 80005d0:	0800089d 	.word	0x0800089d
 80005d4:	0800089d 	.word	0x0800089d
 80005d8:	0800089d 	.word	0x0800089d
 80005dc:	0800089d 	.word	0x0800089d
 80005e0:	0800089d 	.word	0x0800089d
 80005e4:	0800089d 	.word	0x0800089d
 80005e8:	0800089d 	.word	0x0800089d
 80005ec:	0800089d 	.word	0x0800089d
 80005f0:	0800089d 	.word	0x0800089d
 80005f4:	0800089d 	.word	0x0800089d
 80005f8:	0800089d 	.word	0x0800089d
 80005fc:	0800089d 	.word	0x0800089d
 8000600:	0800089d 	.word	0x0800089d
 8000604:	0800089d 	.word	0x0800089d
 8000608:	0800089d 	.word	0x0800089d
 800060c:	0800089d 	.word	0x0800089d
 8000610:	0800089d 	.word	0x0800089d
 8000614:	08000683 	.word	0x08000683
 8000618:	080006c3 	.word	0x080006c3
 800061c:	08000703 	.word	0x08000703
 8000620:	08000753 	.word	0x08000753
 8000624:	0800089d 	.word	0x0800089d
 8000628:	0800089d 	.word	0x0800089d
 800062c:	0800089d 	.word	0x0800089d
 8000630:	0800089d 	.word	0x0800089d
 8000634:	0800089d 	.word	0x0800089d
 8000638:	0800089d 	.word	0x0800089d
 800063c:	08000793 	.word	0x08000793
 8000640:	080007d3 	.word	0x080007d3
 8000644:	08000811 	.word	0x08000811
 8000648:	0800084b 	.word	0x0800084b
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 800064c:	4b8e      	ldr	r3, [pc, #568]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 800064e:	2214      	movs	r2, #20
 8000650:	601a      	str	r2, [r3, #0]
				updateLedBuffer(led12,led34);
 8000652:	4b8e      	ldr	r3, [pc, #568]	; (800088c <fsm_mode_led7seg+0x2dc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a8e      	ldr	r2, [pc, #568]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc9b 	bl	8000f98 <updateLedBuffer>
				SetLed7Seg1On();
 8000662:	f000 fd4d 	bl	8001100 <SetLed7Seg1On>
				update7SEG(index_led);
 8000666:	4b8b      	ldr	r3, [pc, #556]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fc5a 	bl	8000f24 <update7SEG>
				index_led++;
 8000670:	4b88      	ldr	r3, [pc, #544]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a87      	ldr	r2, [pc, #540]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000678:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800067a:	20fa      	movs	r0, #250	; 0xfa
 800067c:	f001 f808 	bl	8001690 <setTimer3>
			break;
 8000680:	e11d      	b.n	80008be <fsm_mode_led7seg+0x30e>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000682:	4b85      	ldr	r3, [pc, #532]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	f040 810a 	bne.w	80008a0 <fsm_mode_led7seg+0x2f0>
				updateLedBuffer(led12,led34);
 800068c:	4b7f      	ldr	r3, [pc, #508]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a7f      	ldr	r2, [pc, #508]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fc7e 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE1_led7seg_2;
 800069c:	4b7a      	ldr	r3, [pc, #488]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 800069e:	2215      	movs	r2, #21
 80006a0:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 80006a2:	f000 fd4b 	bl	800113c <SetLed7Seg2On>
				update7SEG(index_led);
 80006a6:	4b7b      	ldr	r3, [pc, #492]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc3a 	bl	8000f24 <update7SEG>
				index_led++;
 80006b0:	4b78      	ldr	r3, [pc, #480]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a77      	ldr	r2, [pc, #476]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006b8:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80006ba:	20fa      	movs	r0, #250	; 0xfa
 80006bc:	f000 ffe8 	bl	8001690 <setTimer3>
			}
			break;
 80006c0:	e0ee      	b.n	80008a0 <fsm_mode_led7seg+0x2f0>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 80006c2:	4b75      	ldr	r3, [pc, #468]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	f040 80ec 	bne.w	80008a4 <fsm_mode_led7seg+0x2f4>
				updateLedBuffer(led12,led34);
 80006cc:	4b6f      	ldr	r3, [pc, #444]	; (800088c <fsm_mode_led7seg+0x2dc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a6f      	ldr	r2, [pc, #444]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fc5e 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE1_led7seg_3;
 80006dc:	4b6a      	ldr	r3, [pc, #424]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 80006de:	2216      	movs	r2, #22
 80006e0:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 80006e2:	f000 fd49 	bl	8001178 <SetLed7Seg3On>
				update7SEG(index_led);
 80006e6:	4b6b      	ldr	r3, [pc, #428]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fc1a 	bl	8000f24 <update7SEG>
				index_led++;
 80006f0:	4b68      	ldr	r3, [pc, #416]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a67      	ldr	r2, [pc, #412]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80006f8:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80006fa:	20fa      	movs	r0, #250	; 0xfa
 80006fc:	f000 ffc8 	bl	8001690 <setTimer3>
			}
			break;
 8000700:	e0d0      	b.n	80008a4 <fsm_mode_led7seg+0x2f4>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 8000702:	4b65      	ldr	r3, [pc, #404]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	f040 80ce 	bne.w	80008a8 <fsm_mode_led7seg+0x2f8>
				updateLedBuffer(led12,led34);
 800070c:	4b5f      	ldr	r3, [pc, #380]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a5f      	ldr	r2, [pc, #380]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fc3e 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE1_led7seg_4;
 800071c:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 800071e:	2217      	movs	r2, #23
 8000720:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 8000722:	f000 fd47 	bl	80011b4 <SetLed7Seg4On>
				update7SEG(index_led);
 8000726:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fbfa 	bl	8000f24 <update7SEG>
				index_led = 0;
 8000730:	4b58      	ldr	r3, [pc, #352]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
			    led12--;
 8000736:	4b55      	ldr	r3, [pc, #340]	; (800088c <fsm_mode_led7seg+0x2dc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	4a53      	ldr	r2, [pc, #332]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800073e:	6013      	str	r3, [r2, #0]
			    led34--;
 8000740:	4b53      	ldr	r3, [pc, #332]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a52      	ldr	r2, [pc, #328]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000748:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800074a:	20fa      	movs	r0, #250	; 0xfa
 800074c:	f000 ffa0 	bl	8001690 <setTimer3>
			}
			break;
 8000750:	e0aa      	b.n	80008a8 <fsm_mode_led7seg+0x2f8>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 8000752:	4b51      	ldr	r3, [pc, #324]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	f040 80a8 	bne.w	80008ac <fsm_mode_led7seg+0x2fc>
				updateLedBuffer(led12,led34);
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a4b      	ldr	r2, [pc, #300]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fc16 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE1_led7seg_1;
 800076c:	4b46      	ldr	r3, [pc, #280]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 800076e:	2214      	movs	r2, #20
 8000770:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 8000772:	f000 fcc5 	bl	8001100 <SetLed7Seg1On>
				update7SEG(index_led);
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fbd2 	bl	8000f24 <update7SEG>
				index_led++;
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a43      	ldr	r2, [pc, #268]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000788:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f000 ff80 	bl	8001690 <setTimer3>
			}
			break;
 8000790:	e08c      	b.n	80008ac <fsm_mode_led7seg+0x2fc>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000792:	4b41      	ldr	r3, [pc, #260]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 808a 	bne.w	80008b0 <fsm_mode_led7seg+0x300>
				updateLedBuffer(led12,led34);
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a3b      	ldr	r2, [pc, #236]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fbf6 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_2;
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 80007ae:	221f      	movs	r2, #31
 80007b0:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 80007b2:	f000 fcc3 	bl	800113c <SetLed7Seg2On>
				update7SEG(index_led);
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fbb2 	bl	8000f24 <update7SEG>
				index_led++;
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80007c8:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007ca:	20fa      	movs	r0, #250	; 0xfa
 80007cc:	f000 ff60 	bl	8001690 <setTimer3>
			}
			break;
 80007d0:	e06e      	b.n	80008b0 <fsm_mode_led7seg+0x300>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d16c      	bne.n	80008b4 <fsm_mode_led7seg+0x304>
				updateLedBuffer(led12,led34);
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <fsm_mode_led7seg+0x2dc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fbd7 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_3;
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 80007f0:	f000 fcc2 	bl	8001178 <SetLed7Seg3On>
				update7SEG(index_led);
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fb93 	bl	8000f24 <update7SEG>
				index_led++;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000806:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000808:	20fa      	movs	r0, #250	; 0xfa
 800080a:	f000 ff41 	bl	8001690 <setTimer3>
			}
			break;
 800080e:	e051      	b.n	80008b4 <fsm_mode_led7seg+0x304>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d14f      	bne.n	80008b8 <fsm_mode_led7seg+0x308>
				updateLedBuffer(led12,led34);
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <fsm_mode_led7seg+0x2dc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fbb8 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_4;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 800082a:	2221      	movs	r2, #33	; 0x21
 800082c:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 800082e:	f000 fcc1 	bl	80011b4 <SetLed7Seg4On>
				update7SEG(index_led);
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fb74 	bl	8000f24 <update7SEG>
				index_led = 0;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000842:	20fa      	movs	r0, #250	; 0xfa
 8000844:	f000 ff24 	bl	8001690 <setTimer3>
			}
			break;
 8000848:	e036      	b.n	80008b8 <fsm_mode_led7seg+0x308>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <fsm_mode_led7seg+0x2e8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d134      	bne.n	80008bc <fsm_mode_led7seg+0x30c>
				updateLedBuffer(led12,led34);
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <fsm_mode_led7seg+0x2dc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <fsm_mode_led7seg+0x2e0>)
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fb9b 	bl	8000f98 <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_1;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <fsm_mode_led7seg+0x2d8>)
 8000864:	221e      	movs	r2, #30
 8000866:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 8000868:	f000 fc4a 	bl	8001100 <SetLed7Seg1On>
				update7SEG(index_led);
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fb57 	bl	8000f24 <update7SEG>
				index_led++;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <fsm_mode_led7seg+0x2e4>)
 800087e:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000880:	20fa      	movs	r0, #250	; 0xfa
 8000882:	f000 ff05 	bl	8001690 <setTimer3>
			}
			break;
 8000886:	e019      	b.n	80008bc <fsm_mode_led7seg+0x30c>
 8000888:	2000004c 	.word	0x2000004c
 800088c:	2000000c 	.word	0x2000000c
 8000890:	20000010 	.word	0x20000010
 8000894:	20000050 	.word	0x20000050
 8000898:	200000a0 	.word	0x200000a0
		default:
			break;
 800089c:	bf00      	nop
 800089e:	e00e      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008a0:	bf00      	nop
 80008a2:	e00c      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008a4:	bf00      	nop
 80008a6:	e00a      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008a8:	bf00      	nop
 80008aa:	e008      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008ac:	bf00      	nop
 80008ae:	e006      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008b0:	bf00      	nop
 80008b2:	e004      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008b4:	bf00      	nop
 80008b6:	e002      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008b8:	bf00      	nop
 80008ba:	e000      	b.n	80008be <fsm_mode_led7seg+0x30e>
			break;
 80008bc:	bf00      	nop
	}
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop

080008c4 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	return time * 1000;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <isButtonflag+0x30>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <isButtonflag+0x22>
		flagForButton[index] = 0;
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <isButtonflag+0x30>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		return 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	e000      	b.n	8000904 <isButtonflag+0x24>
	}
	return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2000006c 	.word	0x2000006c

08000914 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d901      	bls.n	8000928 <is_button_pressed+0x14>
 8000924:	2300      	movs	r3, #0
 8000926:	e007      	b.n	8000938 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <is_button_pressed+0x30>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000058 	.word	0x20000058

08000948 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d901      	bls.n	800095c <is_button_pressed_3s+0x14>
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	e007      	b.n	800096c <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <is_button_pressed_3s+0x30>)
 8000960:	5cd3      	ldrb	r3, [r2, r3]
 8000962:	2b01      	cmp	r3, #1
 8000964:	bf0c      	ite	eq
 8000966:	2301      	moveq	r3, #1
 8000968:	2300      	movne	r3, #0
 800096a:	b2db      	uxtb	r3, r3
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000068 	.word	0x20000068

0800097c <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_3_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
void fsm_for_input_processing(uint8_t index ){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a51      	ldr	r2, [pc, #324]	; (8000ad0 <fsm_for_input_processing+0x154>)
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d069      	beq.n	8000a64 <fsm_for_input_processing+0xe8>
 8000990:	2b02      	cmp	r3, #2
 8000992:	f300 8099 	bgt.w	8000ac8 <fsm_for_input_processing+0x14c>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <fsm_for_input_processing+0x24>
 800099a:	2b01      	cmp	r3, #1
 800099c:	d01a      	beq.n	80009d4 <fsm_for_input_processing+0x58>
					}
				}

			break ;
	}
}
 800099e:	e093      	b.n	8000ac8 <fsm_for_input_processing+0x14c>
			if( is_button_pressed(index)){
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffb6 	bl	8000914 <is_button_pressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 8089 	beq.w	8000ac2 <fsm_for_input_processing+0x146>
				buttonState[index] = BUTTON_PRESSED ;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <fsm_for_input_processing+0x154>)
 80009b4:	2101      	movs	r1, #1
 80009b6:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <fsm_for_input_processing+0x158>)
 80009bc:	2100      	movs	r1, #0
 80009be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <fsm_for_input_processing+0x15c>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a43      	ldr	r2, [pc, #268]	; (8000adc <fsm_for_input_processing+0x160>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	54d1      	strb	r1, [r2, r3]
			break ;
 80009d2:	e076      	b.n	8000ac2 <fsm_for_input_processing+0x146>
			if (!is_button_pressed(index)){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff9c 	bl	8000914 <is_button_pressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10d      	bne.n	80009fe <fsm_for_input_processing+0x82>
				buttonState[index] =	 BUTTON_RELEASED ;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <fsm_for_input_processing+0x154>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a3b      	ldr	r2, [pc, #236]	; (8000adc <fsm_for_input_processing+0x160>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a37      	ldr	r2, [pc, #220]	; (8000ad4 <fsm_for_input_processing+0x158>)
 80009f6:	2100      	movs	r1, #0
 80009f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80009fc:	e063      	b.n	8000ac6 <fsm_for_input_processing+0x14a>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <fsm_for_input_processing+0x158>)
 8000a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a0a:	d209      	bcs.n	8000a20 <fsm_for_input_processing+0xa4>
						counterForButtonPress1s[index]++;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <fsm_for_input_processing+0x158>)
 8000a10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a14:	3201      	adds	r2, #1
 8000a16:	b291      	uxth	r1, r2
 8000a18:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <fsm_for_input_processing+0x158>)
 8000a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a1e:	e011      	b.n	8000a44 <fsm_for_input_processing+0xc8>
					flagForButtonPress1s[index] = 1;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <fsm_for_input_processing+0x15c>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <fsm_for_input_processing+0x160>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <fsm_for_input_processing+0x158>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff7e 	bl	8000948 <is_button_pressed_3s>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d039      	beq.n	8000ac6 <fsm_for_input_processing+0x14a>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_3_SECOND ;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <fsm_for_input_processing+0x154>)
 8000a56:	2102      	movs	r1, #2
 8000a58:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <fsm_for_input_processing+0x15c>)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	54d1      	strb	r1, [r2, r3]
			break ;
 8000a62:	e030      	b.n	8000ac6 <fsm_for_input_processing+0x14a>
			if (! is_button_pressed(index)){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff54 	bl	8000914 <is_button_pressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10d      	bne.n	8000a8e <fsm_for_input_processing+0x112>
				buttonState[index] = BUTTON_RELEASED;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <fsm_for_input_processing+0x154>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <fsm_for_input_processing+0x160>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000a8c:	e01c      	b.n	8000ac8 <fsm_for_input_processing+0x14c>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a96:	2b63      	cmp	r3, #99	; 0x63
 8000a98:	d809      	bhi.n	8000aae <fsm_for_input_processing+0x132>
							counterForButtonAfterPress1s[index]++;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000a9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aa2:	3201      	adds	r2, #1
 8000aa4:	b291      	uxth	r1, r2
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000aa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000aac:	e00c      	b.n	8000ac8 <fsm_for_input_processing+0x14c>
						flagForButton[index] = 1;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <fsm_for_input_processing+0x160>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <fsm_for_input_processing+0x164>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000ac0:	e002      	b.n	8000ac8 <fsm_for_input_processing+0x14c>
			break ;
 8000ac2:	bf00      	nop
 8000ac4:	e000      	b.n	8000ac8 <fsm_for_input_processing+0x14c>
			break ;
 8000ac6:	bf00      	nop
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	20000070 	.word	0x20000070
 8000ad8:	20000068 	.word	0x20000068
 8000adc:	2000006c 	.word	0x2000006c
 8000ae0:	20000078 	.word	0x20000078

08000ae4 <button_reading>:




void button_reading(void){
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e054      	b.n	8000b9a <button_reading+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	492d      	ldr	r1, [pc, #180]	; (8000bac <button_reading+0xc8>)
 8000af6:	5c89      	ldrb	r1, [r1, r2]
 8000af8:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <button_reading+0xcc>)
 8000afa:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	492c      	ldr	r1, [pc, #176]	; (8000bb4 <button_reading+0xd0>)
 8000b02:	5c89      	ldrb	r1, [r1, r2]
 8000b04:	4a29      	ldr	r2, [pc, #164]	; (8000bac <button_reading+0xc8>)
 8000b06:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d01c      	beq.n	8000b48 <button_reading+0x64>
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	dc25      	bgt.n	8000b5e <button_reading+0x7a>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <button_reading+0x38>
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d00b      	beq.n	8000b32 <button_reading+0x4e>
			  break;
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			  break;
		  default:
			  break;
 8000b1a:	e020      	b.n	8000b5e <button_reading+0x7a>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000b1c:	79fc      	ldrb	r4, [r7, #7]
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <button_reading+0xd4>)
 8000b24:	f001 fa2a 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <button_reading+0xd0>)
 8000b2e:	551a      	strb	r2, [r3, r4]
			  break;
 8000b30:	e016      	b.n	8000b60 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b32:	79fc      	ldrb	r4, [r7, #7]
 8000b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <button_reading+0xd4>)
 8000b3a:	f001 fa1f 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <button_reading+0xd0>)
 8000b44:	551a      	strb	r2, [r3, r4]
			  break;
 8000b46:	e00b      	b.n	8000b60 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000b48:	79fc      	ldrb	r4, [r7, #7]
 8000b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4e:	481a      	ldr	r0, [pc, #104]	; (8000bb8 <button_reading+0xd4>)
 8000b50:	f001 fa14 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <button_reading+0xd0>)
 8000b5a:	551a      	strb	r2, [r3, r4]
			  break;
 8000b5c:	e000      	b.n	8000b60 <button_reading+0x7c>
			  break;
 8000b5e:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <button_reading+0xd0>)
 8000b64:	5cd2      	ldrb	r2, [r2, r3]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4910      	ldr	r1, [pc, #64]	; (8000bac <button_reading+0xc8>)
 8000b6a:	5ccb      	ldrb	r3, [r1, r3]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d111      	bne.n	8000b94 <button_reading+0xb0>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <button_reading+0xc8>)
 8000b74:	5cd2      	ldrb	r2, [r2, r3]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <button_reading+0xcc>)
 8000b7a:	5ccb      	ldrb	r3, [r1, r3]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d109      	bne.n	8000b94 <button_reading+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <button_reading+0xcc>)
 8000b86:	5c89      	ldrb	r1, [r1, r2]
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <button_reading+0xd8>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fef4 	bl	800097c <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3301      	adds	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d9a7      	bls.n	8000af0 <button_reading+0xc>
		  }

	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000060 	.word	0x20000060
 8000bb0:	20000064 	.word	0x20000064
 8000bb4:	2000005c 	.word	0x2000005c
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	20000058 	.word	0x20000058

08000bc0 <display7SEG>:
#include "led_display.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7SEG(int num){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	f200 8180 	bhi.w	8000ed0 <display7SEG+0x310>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <display7SEG+0x18>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000c01 	.word	0x08000c01
 8000bdc:	08000c49 	.word	0x08000c49
 8000be0:	08000c91 	.word	0x08000c91
 8000be4:	08000cd9 	.word	0x08000cd9
 8000be8:	08000d21 	.word	0x08000d21
 8000bec:	08000d69 	.word	0x08000d69
 8000bf0:	08000db1 	.word	0x08000db1
 8000bf4:	08000df9 	.word	0x08000df9
 8000bf8:	08000e41 	.word	0x08000e41
 8000bfc:	08000e89 	.word	0x08000e89
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2101      	movs	r1, #1
 8000c04:	48c6      	ldr	r0, [pc, #792]	; (8000f20 <display7SEG+0x360>)
 8000c06:	f001 f9d0 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	48c4      	ldr	r0, [pc, #784]	; (8000f20 <display7SEG+0x360>)
 8000c10:	f001 f9cb 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2104      	movs	r1, #4
 8000c18:	48c1      	ldr	r0, [pc, #772]	; (8000f20 <display7SEG+0x360>)
 8000c1a:	f001 f9c6 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	48bf      	ldr	r0, [pc, #764]	; (8000f20 <display7SEG+0x360>)
 8000c24:	f001 f9c1 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	48bc      	ldr	r0, [pc, #752]	; (8000f20 <display7SEG+0x360>)
 8000c2e:	f001 f9bc 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	48ba      	ldr	r0, [pc, #744]	; (8000f20 <display7SEG+0x360>)
 8000c38:	f001 f9b7 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	48b7      	ldr	r0, [pc, #732]	; (8000f20 <display7SEG+0x360>)
 8000c42:	f001 f9b2 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000c46:	e167      	b.n	8000f18 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	48b4      	ldr	r0, [pc, #720]	; (8000f20 <display7SEG+0x360>)
 8000c4e:	f001 f9ac 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	48b2      	ldr	r0, [pc, #712]	; (8000f20 <display7SEG+0x360>)
 8000c58:	f001 f9a7 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	48af      	ldr	r0, [pc, #700]	; (8000f20 <display7SEG+0x360>)
 8000c62:	f001 f9a2 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	48ad      	ldr	r0, [pc, #692]	; (8000f20 <display7SEG+0x360>)
 8000c6c:	f001 f99d 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	48aa      	ldr	r0, [pc, #680]	; (8000f20 <display7SEG+0x360>)
 8000c76:	f001 f998 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	48a8      	ldr	r0, [pc, #672]	; (8000f20 <display7SEG+0x360>)
 8000c80:	f001 f993 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	48a5      	ldr	r0, [pc, #660]	; (8000f20 <display7SEG+0x360>)
 8000c8a:	f001 f98e 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000c8e:	e143      	b.n	8000f18 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2101      	movs	r1, #1
 8000c94:	48a2      	ldr	r0, [pc, #648]	; (8000f20 <display7SEG+0x360>)
 8000c96:	f001 f988 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	48a0      	ldr	r0, [pc, #640]	; (8000f20 <display7SEG+0x360>)
 8000ca0:	f001 f983 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	489d      	ldr	r0, [pc, #628]	; (8000f20 <display7SEG+0x360>)
 8000caa:	f001 f97e 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	489b      	ldr	r0, [pc, #620]	; (8000f20 <display7SEG+0x360>)
 8000cb4:	f001 f979 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4898      	ldr	r0, [pc, #608]	; (8000f20 <display7SEG+0x360>)
 8000cbe:	f001 f974 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4896      	ldr	r0, [pc, #600]	; (8000f20 <display7SEG+0x360>)
 8000cc8:	f001 f96f 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	4893      	ldr	r0, [pc, #588]	; (8000f20 <display7SEG+0x360>)
 8000cd2:	f001 f96a 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000cd6:	e11f      	b.n	8000f18 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4890      	ldr	r0, [pc, #576]	; (8000f20 <display7SEG+0x360>)
 8000cde:	f001 f964 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	488e      	ldr	r0, [pc, #568]	; (8000f20 <display7SEG+0x360>)
 8000ce8:	f001 f95f 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	488b      	ldr	r0, [pc, #556]	; (8000f20 <display7SEG+0x360>)
 8000cf2:	f001 f95a 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4889      	ldr	r0, [pc, #548]	; (8000f20 <display7SEG+0x360>)
 8000cfc:	f001 f955 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2110      	movs	r1, #16
 8000d04:	4886      	ldr	r0, [pc, #536]	; (8000f20 <display7SEG+0x360>)
 8000d06:	f001 f950 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4884      	ldr	r0, [pc, #528]	; (8000f20 <display7SEG+0x360>)
 8000d10:	f001 f94b 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	4881      	ldr	r0, [pc, #516]	; (8000f20 <display7SEG+0x360>)
 8000d1a:	f001 f946 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000d1e:	e0fb      	b.n	8000f18 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2101      	movs	r1, #1
 8000d24:	487e      	ldr	r0, [pc, #504]	; (8000f20 <display7SEG+0x360>)
 8000d26:	f001 f940 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	487c      	ldr	r0, [pc, #496]	; (8000f20 <display7SEG+0x360>)
 8000d30:	f001 f93b 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2104      	movs	r1, #4
 8000d38:	4879      	ldr	r0, [pc, #484]	; (8000f20 <display7SEG+0x360>)
 8000d3a:	f001 f936 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2108      	movs	r1, #8
 8000d42:	4877      	ldr	r0, [pc, #476]	; (8000f20 <display7SEG+0x360>)
 8000d44:	f001 f931 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4874      	ldr	r0, [pc, #464]	; (8000f20 <display7SEG+0x360>)
 8000d4e:	f001 f92c 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	4872      	ldr	r0, [pc, #456]	; (8000f20 <display7SEG+0x360>)
 8000d58:	f001 f927 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	486f      	ldr	r0, [pc, #444]	; (8000f20 <display7SEG+0x360>)
 8000d62:	f001 f922 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000d66:	e0d7      	b.n	8000f18 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	486c      	ldr	r0, [pc, #432]	; (8000f20 <display7SEG+0x360>)
 8000d6e:	f001 f91c 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2102      	movs	r1, #2
 8000d76:	486a      	ldr	r0, [pc, #424]	; (8000f20 <display7SEG+0x360>)
 8000d78:	f001 f917 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4867      	ldr	r0, [pc, #412]	; (8000f20 <display7SEG+0x360>)
 8000d82:	f001 f912 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4865      	ldr	r0, [pc, #404]	; (8000f20 <display7SEG+0x360>)
 8000d8c:	f001 f90d 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2110      	movs	r1, #16
 8000d94:	4862      	ldr	r0, [pc, #392]	; (8000f20 <display7SEG+0x360>)
 8000d96:	f001 f908 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4860      	ldr	r0, [pc, #384]	; (8000f20 <display7SEG+0x360>)
 8000da0:	f001 f903 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	485d      	ldr	r0, [pc, #372]	; (8000f20 <display7SEG+0x360>)
 8000daa:	f001 f8fe 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000dae:	e0b3      	b.n	8000f18 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	485a      	ldr	r0, [pc, #360]	; (8000f20 <display7SEG+0x360>)
 8000db6:	f001 f8f8 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4858      	ldr	r0, [pc, #352]	; (8000f20 <display7SEG+0x360>)
 8000dc0:	f001 f8f3 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4855      	ldr	r0, [pc, #340]	; (8000f20 <display7SEG+0x360>)
 8000dca:	f001 f8ee 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	4853      	ldr	r0, [pc, #332]	; (8000f20 <display7SEG+0x360>)
 8000dd4:	f001 f8e9 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4850      	ldr	r0, [pc, #320]	; (8000f20 <display7SEG+0x360>)
 8000dde:	f001 f8e4 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	484e      	ldr	r0, [pc, #312]	; (8000f20 <display7SEG+0x360>)
 8000de8:	f001 f8df 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	484b      	ldr	r0, [pc, #300]	; (8000f20 <display7SEG+0x360>)
 8000df2:	f001 f8da 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000df6:	e08f      	b.n	8000f18 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4848      	ldr	r0, [pc, #288]	; (8000f20 <display7SEG+0x360>)
 8000dfe:	f001 f8d4 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	4846      	ldr	r0, [pc, #280]	; (8000f20 <display7SEG+0x360>)
 8000e08:	f001 f8cf 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4843      	ldr	r0, [pc, #268]	; (8000f20 <display7SEG+0x360>)
 8000e12:	f001 f8ca 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4841      	ldr	r0, [pc, #260]	; (8000f20 <display7SEG+0x360>)
 8000e1c:	f001 f8c5 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	483e      	ldr	r0, [pc, #248]	; (8000f20 <display7SEG+0x360>)
 8000e26:	f001 f8c0 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	483c      	ldr	r0, [pc, #240]	; (8000f20 <display7SEG+0x360>)
 8000e30:	f001 f8bb 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	4839      	ldr	r0, [pc, #228]	; (8000f20 <display7SEG+0x360>)
 8000e3a:	f001 f8b6 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000e3e:	e06b      	b.n	8000f18 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2101      	movs	r1, #1
 8000e44:	4836      	ldr	r0, [pc, #216]	; (8000f20 <display7SEG+0x360>)
 8000e46:	f001 f8b0 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4834      	ldr	r0, [pc, #208]	; (8000f20 <display7SEG+0x360>)
 8000e50:	f001 f8ab 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2104      	movs	r1, #4
 8000e58:	4831      	ldr	r0, [pc, #196]	; (8000f20 <display7SEG+0x360>)
 8000e5a:	f001 f8a6 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2108      	movs	r1, #8
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <display7SEG+0x360>)
 8000e64:	f001 f8a1 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	482c      	ldr	r0, [pc, #176]	; (8000f20 <display7SEG+0x360>)
 8000e6e:	f001 f89c 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	482a      	ldr	r0, [pc, #168]	; (8000f20 <display7SEG+0x360>)
 8000e78:	f001 f897 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <display7SEG+0x360>)
 8000e82:	f001 f892 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000e86:	e047      	b.n	8000f18 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4824      	ldr	r0, [pc, #144]	; (8000f20 <display7SEG+0x360>)
 8000e8e:	f001 f88c 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	4822      	ldr	r0, [pc, #136]	; (8000f20 <display7SEG+0x360>)
 8000e98:	f001 f887 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <display7SEG+0x360>)
 8000ea2:	f001 f882 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <display7SEG+0x360>)
 8000eac:	f001 f87d 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <display7SEG+0x360>)
 8000eb6:	f001 f878 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <display7SEG+0x360>)
 8000ec0:	f001 f873 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4815      	ldr	r0, [pc, #84]	; (8000f20 <display7SEG+0x360>)
 8000eca:	f001 f86e 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000ece:	e023      	b.n	8000f18 <display7SEG+0x358>
	default :
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <display7SEG+0x360>)
 8000ed6:	f001 f868 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2102      	movs	r1, #2
 8000ede:	4810      	ldr	r0, [pc, #64]	; (8000f20 <display7SEG+0x360>)
 8000ee0:	f001 f863 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <display7SEG+0x360>)
 8000eea:	f001 f85e 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <display7SEG+0x360>)
 8000ef4:	f001 f859 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2110      	movs	r1, #16
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <display7SEG+0x360>)
 8000efe:	f001 f854 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2120      	movs	r1, #32
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <display7SEG+0x360>)
 8000f08:	f001 f84f 	bl	8001faa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <display7SEG+0x360>)
 8000f12:	f001 f84a 	bl	8001faa <HAL_GPIO_WritePin>
		break;
 8000f16:	bf00      	nop
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <update7SEG>:

const int MAX_LED = 4;
int led_buffer[4] = {0, 0, 0, 0};

void update7SEG(int index){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d82a      	bhi.n	8000f88 <update7SEG+0x64>
 8000f32:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <update7SEG+0x14>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08000f59 	.word	0x08000f59
 8000f40:	08000f69 	.word	0x08000f69
 8000f44:	08000f79 	.word	0x08000f79
    switch (index){
		case 0: {
			display7SEG(led_buffer[index]);
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <update7SEG+0x70>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe35 	bl	8000bc0 <display7SEG>
			break ;
 8000f56:	e018      	b.n	8000f8a <update7SEG+0x66>
		}
		case 1:{
			display7SEG(led_buffer[index]);
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <update7SEG+0x70>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe2d 	bl	8000bc0 <display7SEG>
			break ;
 8000f66:	e010      	b.n	8000f8a <update7SEG+0x66>
		}
		case 2:{
			display7SEG(led_buffer[index]);
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <update7SEG+0x70>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe25 	bl	8000bc0 <display7SEG>
			break ;
 8000f76:	e008      	b.n	8000f8a <update7SEG+0x66>
		}
		case 3:{
			display7SEG(led_buffer[index]);
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <update7SEG+0x70>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe1d 	bl	8000bc0 <display7SEG>
			break ;
 8000f86:	e000      	b.n	8000f8a <update7SEG+0x66>
		}
		default :
			break;
 8000f88:	bf00      	nop
    }
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000084 	.word	0x20000084

08000f98 <updateLedBuffer>:

void updateLedBuffer(int led1_2,int led3_4){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led1_2 / 10;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <updateLedBuffer+0x70>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	1092      	asrs	r2, r2, #2
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <updateLedBuffer+0x74>)
 8000fb2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led1_2 % 10;
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <updateLedBuffer+0x70>)
 8000fb8:	fb83 2301 	smull	r2, r3, r3, r1
 8000fbc:	109a      	asrs	r2, r3, #2
 8000fbe:	17cb      	asrs	r3, r1, #31
 8000fc0:	1ad2      	subs	r2, r2, r3
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	1aca      	subs	r2, r1, r3
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <updateLedBuffer+0x74>)
 8000fce:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led3_4 / 10;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <updateLedBuffer+0x70>)
 8000fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd8:	1092      	asrs	r2, r2, #2
 8000fda:	17db      	asrs	r3, r3, #31
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <updateLedBuffer+0x74>)
 8000fe0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led3_4 % 10;
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <updateLedBuffer+0x70>)
 8000fe6:	fb83 2301 	smull	r2, r3, r3, r1
 8000fea:	109a      	asrs	r2, r3, #2
 8000fec:	17cb      	asrs	r3, r1, #31
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	1aca      	subs	r2, r1, r3
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <updateLedBuffer+0x74>)
 8000ffc:	60da      	str	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	66666667 	.word	0x66666667
 800100c:	20000084 	.word	0x20000084

08001010 <BlinkyRedVer>:

void BlinkyRedVer(){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
 8001014:	2104      	movs	r1, #4
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <BlinkyRedVer+0x24>)
 8001018:	f000 ffdf 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <BlinkyRedVer+0x24>)
 8001022:	f000 ffc2 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <BlinkyRedVer+0x24>)
 800102c:	f000 ffbd 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010800 	.word	0x40010800

08001038 <BlinkyGreenVer>:
void BlinkyGreenVer(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
 800103c:	2110      	movs	r1, #16
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <BlinkyGreenVer+0x24>)
 8001040:	f000 ffcb 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2104      	movs	r1, #4
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <BlinkyGreenVer+0x24>)
 800104a:	f000 ffae 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2108      	movs	r1, #8
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <BlinkyGreenVer+0x24>)
 8001054:	f000 ffa9 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40010800 	.word	0x40010800

08001060 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
 8001064:	2108      	movs	r1, #8
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <BlinkyYellowVer+0x24>)
 8001068:	f000 ffb7 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2104      	movs	r1, #4
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <BlinkyYellowVer+0x24>)
 8001072:	f000 ff9a 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	4802      	ldr	r0, [pc, #8]	; (8001084 <BlinkyYellowVer+0x24>)
 800107c:	f000 ff95 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800

08001088 <BlinkyRedHor>:

void BlinkyRedHor(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
 800108c:	2120      	movs	r1, #32
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <BlinkyRedHor+0x24>)
 8001090:	f000 ffa3 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <BlinkyRedHor+0x24>)
 800109a:	f000 ff86 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <BlinkyRedHor+0x24>)
 80010a4:	f000 ff81 	bl	8001faa <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40010800 	.word	0x40010800

080010b0 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <BlinkyGreenHor+0x24>)
 80010b8:	f000 ff8f 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2120      	movs	r1, #32
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <BlinkyGreenHor+0x24>)
 80010c2:	f000 ff72 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <BlinkyGreenHor+0x24>)
 80010cc:	f000 ff6d 	bl	8001faa <HAL_GPIO_WritePin>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010800 	.word	0x40010800

080010d8 <BlinkyYellowHor>:
void BlinkyYellowHor(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <BlinkyYellowHor+0x24>)
 80010e0:	f000 ff7b 	bl	8001fda <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <BlinkyYellowHor+0x24>)
 80010ea:	f000 ff5e 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2180      	movs	r1, #128	; 0x80
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <BlinkyYellowHor+0x24>)
 80010f4:	f000 ff59 	bl	8001faa <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010800 	.word	0x40010800

08001100 <SetLed7Seg1On>:

void SetLed7Seg1On(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <SetLed7Seg1On+0x38>)
 800110c:	f000 ff4d 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <SetLed7Seg1On+0x38>)
 8001118:	f000 ff47 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <SetLed7Seg1On+0x38>)
 8001124:	f000 ff41 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <SetLed7Seg1On+0x38>)
 8001130:	f000 ff3b 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40010800 	.word	0x40010800

0800113c <SetLed7Seg2On>:
void SetLed7Seg2On(){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <SetLed7Seg2On+0x38>)
 8001148:	f000 ff2f 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <SetLed7Seg2On+0x38>)
 8001154:	f000 ff29 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <SetLed7Seg2On+0x38>)
 8001160:	f000 ff23 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116a:	4802      	ldr	r0, [pc, #8]	; (8001174 <SetLed7Seg2On+0x38>)
 800116c:	f000 ff1d 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010800 	.word	0x40010800

08001178 <SetLed7Seg3On>:
void SetLed7Seg3On(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <SetLed7Seg3On+0x38>)
 8001184:	f000 ff11 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <SetLed7Seg3On+0x38>)
 8001190:	f000 ff0b 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <SetLed7Seg3On+0x38>)
 800119c:	f000 ff05 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <SetLed7Seg3On+0x38>)
 80011a8:	f000 feff 	bl	8001faa <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010800 	.word	0x40010800

080011b4 <SetLed7Seg4On>:
void SetLed7Seg4On(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <SetLed7Seg4On+0x38>)
 80011c0:	f000 fef3 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <SetLed7Seg4On+0x38>)
 80011cc:	f000 feed 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <SetLed7Seg4On+0x38>)
 80011d8:	f000 fee7 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <SetLed7Seg4On+0x38>)
 80011e4:	f000 fee1 	bl	8001faa <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <SetRedVerHor>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
}

void SetRedVerHor(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2104      	movs	r1, #4
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <SetRedVerHor+0x1c>)
 80011fa:	f000 fed6 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <SetRedVerHor+0x1c>)
 8001204:	f000 fed1 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010800 	.word	0x40010800

08001210 <SetOffVer>:


void SetOffVer(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2104      	movs	r1, #4
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <SetOffVer+0x28>)
 800121a:	f000 fec6 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2110      	movs	r1, #16
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <SetOffVer+0x28>)
 8001224:	f000 fec1 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2108      	movs	r1, #8
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <SetOffVer+0x28>)
 800122e:	f000 febc 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40010800 	.word	0x40010800

0800123c <SetRedVer>:

void SetRedVer(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2104      	movs	r1, #4
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <SetRedVer+0x28>)
 8001246:	f000 feb0 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2110      	movs	r1, #16
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <SetRedVer+0x28>)
 8001250:	f000 feab 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <SetRedVer+0x28>)
 800125a:	f000 fea6 	bl	8001faa <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40010800 	.word	0x40010800

08001268 <SetGreenVer>:

void SetGreenVer(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2104      	movs	r1, #4
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <SetGreenVer+0x28>)
 8001272:	f000 fe9a 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <SetGreenVer+0x28>)
 800127c:	f000 fe95 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2108      	movs	r1, #8
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <SetGreenVer+0x28>)
 8001286:	f000 fe90 	bl	8001faa <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010800 	.word	0x40010800

08001294 <SetYellowVer>:

void SetYellowVer(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2104      	movs	r1, #4
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <SetYellowVer+0x28>)
 800129e:	f000 fe84 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2110      	movs	r1, #16
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <SetYellowVer+0x28>)
 80012a8:	f000 fe7f 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2108      	movs	r1, #8
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <SetYellowVer+0x28>)
 80012b2:	f000 fe7a 	bl	8001faa <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40010800 	.word	0x40010800

080012c0 <SetOffHor>:


void SetOffHor(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <SetOffHor+0x28>)
 80012ca:	f000 fe6e 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <SetOffHor+0x28>)
 80012d4:	f000 fe69 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <SetOffHor+0x28>)
 80012de:	f000 fe64 	bl	8001faa <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40010800 	.word	0x40010800

080012ec <SetRedHor>:

void SetRedHor(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2120      	movs	r1, #32
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <SetRedHor+0x28>)
 80012f6:	f000 fe58 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <SetRedHor+0x28>)
 8001300:	f000 fe53 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <SetRedHor+0x28>)
 800130a:	f000 fe4e 	bl	8001faa <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800

08001318 <SetGreenHor>:

void SetGreenHor(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2120      	movs	r1, #32
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <SetGreenHor+0x28>)
 8001322:	f000 fe42 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <SetGreenHor+0x28>)
 800132c:	f000 fe3d 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2140      	movs	r1, #64	; 0x40
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <SetGreenHor+0x28>)
 8001336:	f000 fe38 	bl	8001faa <HAL_GPIO_WritePin>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010800 	.word	0x40010800

08001344 <SetYellowHor>:

void SetYellowHor(){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2120      	movs	r1, #32
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <SetYellowHor+0x28>)
 800134e:	f000 fe2c 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <SetYellowHor+0x28>)
 8001358:	f000 fe27 	bl	8001faa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <SetYellowHor+0x28>)
 8001362:	f000 fe22 	bl	8001faa <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40010800 	.word	0x40010800

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fb18 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f828 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f000 f8ae 	bl	80014dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001380:	f000 f860 	bl	8001444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <main+0x54>)
 8001386:	f001 fa79 	bl	800287c <HAL_TIM_Base_Start_IT>
  status_mode = INIT;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <main+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
//  status_ver = INIT;
//  status_hor = INIT;
  //int status_led7seg = 0;
  //int index_led = 0;
  setTimer1(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f000 f948 	bl	8001628 <setTimer1>
  setTimer2(1000);
 8001398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139c:	f000 f95e 	bl	800165c <setTimer2>
  setTimer3(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f000 f974 	bl	8001690 <setTimer3>
  setTimer4(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f000 f98a 	bl	80016c4 <setTimer4>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //fsm_for_input_processing();
	  fsm_mode_run();
 80013b0:	f7ff f844 	bl	800043c <fsm_mode_run>
	  fsm_automatic_1_run();
 80013b4:	f7fe feca 	bl	800014c <fsm_automatic_1_run>
	  fsm_automatic_2_run();
 80013b8:	f7fe ff84 	bl	80002c4 <fsm_automatic_2_run>
	  fsm_mode_led7seg();
 80013bc:	f7ff f8f8 	bl	80005b0 <fsm_mode_led7seg>
	  fsm_mode_run();
 80013c0:	e7f6      	b.n	80013b0 <main+0x40>
 80013c2:	bf00      	nop
 80013c4:	200000cc 	.word	0x200000cc
 80013c8:	20000040 	.word	0x20000040

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fe06 	bl	8002fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f6:	2310      	movs	r3, #16
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fe02 	bl	800200c <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800140e:	f000 f8d5 	bl	80015bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f001 f86e 	bl	800250c <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001436:	f000 f8c1 	bl	80015bc <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3740      	adds	r7, #64	; 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM2_Init+0x94>)
 800146a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800146e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001478:	2209      	movs	r2, #9
 800147a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM2_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_TIM2_Init+0x94>)
 800148a:	f001 f9a7 	bl	80027dc <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001494:	f000 f892 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM2_Init+0x94>)
 80014a6:	f001 fb3d 	bl	8002b24 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 f884 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM2_Init+0x94>)
 80014c2:	f001 fd05 	bl	8002ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f876 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200000cc 	.word	0x200000cc

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <MX_GPIO_Init+0xd0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <MX_GPIO_Init+0xd0>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <MX_GPIO_Init+0xd0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_GPIO_Init+0xd0>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_GPIO_Init+0xd0>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_GPIO_Init+0xd0>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 8001538:	2200      	movs	r2, #0
 800153a:	f640 71fe 	movw	r1, #4094	; 0xffe
 800153e:	481c      	ldr	r0, [pc, #112]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001540:	f000 fd33 	bl	8001faa <HAL_GPIO_WritePin>
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001544:	2200      	movs	r2, #0
 8001546:	217f      	movs	r1, #127	; 0x7f
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <MX_GPIO_Init+0xd8>)
 800154a:	f000 fd2e 	bl	8001faa <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800154e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	4815      	ldr	r0, [pc, #84]	; (80015b8 <MX_GPIO_Init+0xdc>)
 8001564:	f000 fb90 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_RED_VER_Pin LED_YELLOW_VER_Pin LED_GREEN_VER_Pin
                           LED_RED_HOR_Pin LED_YELLOW_HOR_Pin LED_GREEN_HOR_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 8001568:	f640 73fe 	movw	r3, #4094	; 0xffe
 800156c:	613b      	str	r3, [r7, #16]
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2302      	movs	r3, #2
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <MX_GPIO_Init+0xd4>)
 8001582:	f000 fb81 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin
                           LED_E_Pin LED_F_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001586:	237f      	movs	r3, #127	; 0x7f
 8001588:	613b      	str	r3, [r7, #16]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2302      	movs	r3, #2
 8001594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0xd8>)
 800159e:	f000 fb73 	bl	8001c88 <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <clearTimer1+0x18>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <clearTimer1+0x1c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200000b4 	.word	0x200000b4
 80015e4:	20000098 	.word	0x20000098

080015e8 <clearTimer2>:
void clearTimer2(){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <clearTimer2+0x18>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <clearTimer2+0x1c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	200000b8 	.word	0x200000b8
 8001604:	2000009c 	.word	0x2000009c

08001608 <clearTimer3>:
void clearTimer3(){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <clearTimer3+0x18>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <clearTimer3+0x1c>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200000bc 	.word	0x200000bc
 8001624:	200000a0 	.word	0x200000a0

08001628 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <setTimer1+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	fb92 f3f3 	sdiv	r3, r2, r3
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <setTimer1+0x2c>)
 800163c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <setTimer1+0x30>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000014 	.word	0x20000014
 8001654:	200000b4 	.word	0x200000b4
 8001658:	20000098 	.word	0x20000098

0800165c <setTimer2>:

void setTimer2( int duration){
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <setTimer2+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	fb92 f3f3 	sdiv	r3, r2, r3
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <setTimer2+0x2c>)
 8001670:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <setTimer2+0x30>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000014 	.word	0x20000014
 8001688:	200000b8 	.word	0x200000b8
 800168c:	2000009c 	.word	0x2000009c

08001690 <setTimer3>:

void setTimer3( int duration){
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <setTimer3+0x28>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	fb92 f3f3 	sdiv	r3, r2, r3
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <setTimer3+0x2c>)
 80016a4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <setTimer3+0x30>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000014 	.word	0x20000014
 80016bc:	200000bc 	.word	0x200000bc
 80016c0:	200000a0 	.word	0x200000a0

080016c4 <setTimer4>:

void setTimer4( int duration){
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <setTimer4+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <setTimer4+0x2c>)
 80016d8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <setTimer4+0x30>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000014 	.word	0x20000014
 80016f0:	200000c0 	.word	0x200000c0
 80016f4:	200000a4 	.word	0x200000a4

080016f8 <timerRun>:

void timerRun (){
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <timerRun+0xec>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	dd0b      	ble.n	800171c <timerRun+0x24>
		timer0_counter --;
 8001704:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <timerRun+0xec>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <timerRun+0xec>)
 800170c:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <timerRun+0xec>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	dc02      	bgt.n	800171c <timerRun+0x24>
			timer0_flag = 1;
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <timerRun+0xf0>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <timerRun+0xf4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	dd0b      	ble.n	800173c <timerRun+0x44>
		timer1_counter--;
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <timerRun+0xf4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3b01      	subs	r3, #1
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <timerRun+0xf4>)
 800172c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <timerRun+0xf4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dc02      	bgt.n	800173c <timerRun+0x44>
			timer1_flag = 1;
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <timerRun+0xf8>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <timerRun+0xfc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0b      	ble.n	800175c <timerRun+0x64>
		timer2_counter--;
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <timerRun+0xfc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <timerRun+0xfc>)
 800174c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <timerRun+0xfc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc02      	bgt.n	800175c <timerRun+0x64>
			timer2_flag = 1;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <timerRun+0x100>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <timerRun+0x104>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd0b      	ble.n	800177c <timerRun+0x84>
		timer3_counter--;
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <timerRun+0x104>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <timerRun+0x104>)
 800176c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <timerRun+0x104>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc02      	bgt.n	800177c <timerRun+0x84>
			timer3_flag = 1;
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <timerRun+0x108>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <timerRun+0x10c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	dd0b      	ble.n	800179c <timerRun+0xa4>
		timer4_counter--;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <timerRun+0x10c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <timerRun+0x10c>)
 800178c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <timerRun+0x10c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dc02      	bgt.n	800179c <timerRun+0xa4>
			timer4_flag = 1;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <timerRun+0x110>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <timerRun+0x114>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd0b      	ble.n	80017bc <timerRun+0xc4>
			timer5_counter--;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <timerRun+0x114>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <timerRun+0x114>)
 80017ac:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <timerRun+0x114>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dc02      	bgt.n	80017bc <timerRun+0xc4>
				timer5_flag = 1;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <timerRun+0x118>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <timerRun+0x11c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd0b      	ble.n	80017dc <timerRun+0xe4>
			timer6_counter--;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <timerRun+0x11c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <timerRun+0x11c>)
 80017cc:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <timerRun+0x11c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc02      	bgt.n	80017dc <timerRun+0xe4>
				timer6_flag = 1;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <timerRun+0x120>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
			}
		}
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200000b0 	.word	0x200000b0
 80017e8:	20000094 	.word	0x20000094
 80017ec:	200000b4 	.word	0x200000b4
 80017f0:	20000098 	.word	0x20000098
 80017f4:	200000b8 	.word	0x200000b8
 80017f8:	2000009c 	.word	0x2000009c
 80017fc:	200000bc 	.word	0x200000bc
 8001800:	200000a0 	.word	0x200000a0
 8001804:	200000c0 	.word	0x200000c0
 8001808:	200000a4 	.word	0x200000a4
 800180c:	200000c4 	.word	0x200000c4
 8001810:	200000a8 	.word	0x200000a8
 8001814:	200000c8 	.word	0x200000c8
 8001818:	200000ac 	.word	0x200000ac

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_MspInit+0x5c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x5c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_MspInit+0x60>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_MspInit+0x60>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000

08001880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d113      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_TIM_Base_MspInit+0x44>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_TIM_Base_MspInit+0x44>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x44>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	201c      	movs	r0, #28
 80018b0:	f000 f9b3 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b4:	201c      	movs	r0, #28
 80018b6:	f000 f9cc 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f000 f891 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM2_IRQHandler+0x10>)
 800191e:	f000 fff9 	bl	8002914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000cc 	.word	0x200000cc

0800192c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d103      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800194a:	f7ff f8cb 	bl	8000ae4 <button_reading>
		timerRun();
 800194e:	f7ff fed3 	bl	80016f8 <timerRun>
		//getKeyInput();
	}
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001982:	f7ff ffd3 	bl	800192c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f001 fb0d 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7ff fcf1 	bl	8001370 <main>
  bx lr
 800198e:	4770      	bx	lr
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001998:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 800199c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80019a0:	20000118 	.word	0x20000118

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x28>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x28>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f923 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff ff2a 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40022000 	.word	0x40022000

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f93b 	bl	8001c6e <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f903 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000018 	.word	0x20000018
 8001a2c:	20000020 	.word	0x20000020
 8001a30:	2000001c 	.word	0x2000001c

08001a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x1c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x20>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_IncTick+0x20>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000020 	.word	0x20000020
 8001a54:	20000114 	.word	0x20000114

08001a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_GetTick+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000114 	.word	0x20000114

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <__NVIC_EnableIRQ+0x34>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff90 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff2d 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff42 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff35 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e148      	b.n	8001f2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8137 	bne.w	8001f28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4aa3      	ldr	r2, [pc, #652]	; (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cc4:	4aa1      	ldr	r2, [pc, #644]	; (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d875      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cca:	4aa1      	ldr	r2, [pc, #644]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d058      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a9f      	ldr	r2, [pc, #636]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d86f      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a9f      	ldr	r2, [pc, #636]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d052      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a9d      	ldr	r2, [pc, #628]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d869      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a9d      	ldr	r2, [pc, #628]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04c      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a9b      	ldr	r2, [pc, #620]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d863      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cee:	4a9b      	ldr	r2, [pc, #620]	; (8001f5c <HAL_GPIO_Init+0x2d4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d046      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a99      	ldr	r2, [pc, #612]	; (8001f5c <HAL_GPIO_Init+0x2d4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d85d      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d82a      	bhi.n	8001d54 <HAL_GPIO_Init+0xcc>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d859      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <HAL_GPIO_Init+0x80>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d6f 	.word	0x08001d6f
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db7 	.word	0x08001db7
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
 8001d2c:	08001db7 	.word	0x08001db7
 8001d30:	08001db7 	.word	0x08001db7
 8001d34:	08001db7 	.word	0x08001db7
 8001d38:	08001db7 	.word	0x08001db7
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001db7 	.word	0x08001db7
 8001d44:	08001db7 	.word	0x08001db7
 8001d48:	08001db7 	.word	0x08001db7
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	4a82      	ldr	r2, [pc, #520]	; (8001f60 <HAL_GPIO_Init+0x2d8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5a:	e02c      	b.n	8001db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e029      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e024      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e01f      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e01a      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e013      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	611a      	str	r2, [r3, #16]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	615a      	str	r2, [r3, #20]
          break;
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          break;
 8001db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_GPIO_Init+0x13a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_Init+0x13e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	; 0xff
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_GPIO_Init+0x14c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x152>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	210f      	movs	r1, #15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8090 	beq.w	8001f28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a55      	ldr	r2, [pc, #340]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e20:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <HAL_GPIO_Init+0x2e0>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_GPIO_Init+0x2e4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_Init+0x1dc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_GPIO_Init+0x1d8>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e004      	b.n	8001e6a <HAL_GPIO_Init+0x1e2>
 8001e60:	2303      	movs	r3, #3
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x1e2>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_GPIO_Init+0x1e2>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	4093      	lsls	r3, r2
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e7a:	493b      	ldr	r1, [pc, #236]	; (8001f68 <HAL_GPIO_Init+0x2e0>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4937      	ldr	r1, [pc, #220]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4933      	ldr	r1, [pc, #204]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	492d      	ldr	r1, [pc, #180]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4929      	ldr	r1, [pc, #164]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4923      	ldr	r1, [pc, #140]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	491f      	ldr	r1, [pc, #124]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4919      	ldr	r1, [pc, #100]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4915      	ldr	r1, [pc, #84]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f aeaf 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	372c      	adds	r7, #44	; 0x2c
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fba:	787b      	ldrb	r3, [r7, #1]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc6:	e003      	b.n	8001fd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	041a      	lsls	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fec:	887a      	ldrh	r2, [r7, #2]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	041a      	lsls	r2, r3, #16
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	887b      	ldrh	r3, [r7, #2]
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e26c      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8087 	beq.w	800213a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800202c:	4b92      	ldr	r3, [pc, #584]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b04      	cmp	r3, #4
 8002036:	d00c      	beq.n	8002052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002038:	4b8f      	ldr	r3, [pc, #572]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	d112      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
 8002044:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d10b      	bne.n	800206a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d06c      	beq.n	8002138 <HAL_RCC_OscConfig+0x12c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d168      	bne.n	8002138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e246      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x76>
 8002074:	4b80      	ldr	r3, [pc, #512]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e02e      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7a      	ldr	r2, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b78      	ldr	r3, [pc, #480]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0xbc>
 80020ae:	4b72      	ldr	r3, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a71      	ldr	r2, [pc, #452]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020c8:	4b6b      	ldr	r3, [pc, #428]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a67      	ldr	r2, [pc, #412]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fcb6 	bl	8001a58 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff fcb2 	bl	8001a58 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1fa      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe4>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fca2 	bl	8001a58 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff fc9e 	bl	8001a58 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1e6      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x10c>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002146:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1ba      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4939      	ldr	r1, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff fc57 	bl	8001a58 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fc53 	bl	8001a58 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e19b      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4927      	ldr	r1, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc36 	bl	8001a58 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f0:	f7ff fc32 	bl	8001a58 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e17a      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03a      	beq.n	8002290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x274>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff fc16 	bl	8001a58 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff fc12 	bl	8001a58 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e15a      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_OscConfig+0x26c>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f000 faa6 	bl	80027a0 <RCC_Delay>
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x274>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7ff fbfc 	bl	8001a58 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e00f      	b.n	8002284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff fbf8 	bl	8001a58 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d908      	bls.n	8002284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e140      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	42420000 	.word	0x42420000
 8002280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b9e      	ldr	r3, [pc, #632]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e9      	bne.n	8002264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a6 	beq.w	80023ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b94      	ldr	r3, [pc, #592]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a93      	ldr	r2, [pc, #588]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a8a      	ldr	r2, [pc, #552]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fbb9 	bl	8001a58 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7ff fbb5 	bl	8001a58 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0fd      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x312>
 8002310:	4b7b      	ldr	r3, [pc, #492]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a7a      	ldr	r2, [pc, #488]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e02d      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x334>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	e01c      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x356>
 8002348:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e00b      	b.n	800237a <HAL_RCC_OscConfig+0x36e>
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a63      	ldr	r2, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7ff fb69 	bl	8001a58 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff fb65 	bl	8001a58 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0ab      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	4b57      	ldr	r3, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RCC_OscConfig+0x37e>
 80023ac:	e014      	b.n	80023d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff fb53 	bl	8001a58 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff fb4f 	bl	8001a58 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e095      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8081 	beq.w	80024f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d061      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d146      	bne.n	8002496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff fb23 	bl	8001a58 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7ff fb1f 	bl	8001a58 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e067      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	492d      	ldr	r1, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a19      	ldr	r1, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	430b      	orrs	r3, r1
 8002462:	4927      	ldr	r1, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff faf3 	bl	8001a58 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff faef 	bl	8001a58 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e037      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x46a>
 8002494:	e02f      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCC_OscConfig+0x4fc>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fadc 	bl	8001a58 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff fad8 	bl	8001a58 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e020      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x498>
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e013      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420060 	.word	0x42420060

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fa2c 	bl	8001a58 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff fa28 	bl	8001a58 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f98a 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08003024 	.word	0x08003024
 80026d8:	20000018 	.word	0x20000018
 80026dc:	2000001c 	.word	0x2000001c

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b490      	push	{r4, r7}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e8:	1d3c      	adds	r4, r7, #4
 80026ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f0:	f240 2301 	movw	r3, #513	; 0x201
 80026f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x46>
 800271e:	e02d      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	e02d      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002732:	4413      	add	r3, r2
 8002734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c5b      	lsrs	r3, r3, #17
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002752:	4413      	add	r3, r2
 8002754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275e:	fb02 f203 	mul.w	r2, r2, r3
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e004      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	623b      	str	r3, [r7, #32]
      break;
 800277a:	e002      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002782:	6a3b      	ldr	r3, [r7, #32]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	08003014 	.word	0x08003014
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	003d0900 	.word	0x003d0900

080027a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <RCC_Delay+0x34>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <RCC_Delay+0x38>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0a5b      	lsrs	r3, r3, #9
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027bc:	bf00      	nop
  }
  while (Delay --);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	60fa      	str	r2, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <RCC_Delay+0x1c>
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000018 	.word	0x20000018
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff f83c 	bl	8001880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fa6a 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e035      	b.n	8002900 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_TIM_Base_Start_IT+0x90>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x4e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d004      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x4e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIM_Base_Start_IT+0x94>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d111      	bne.n	80028ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d010      	beq.n	80028fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	e007      	b.n	80028fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400

08002914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0202 	mvn.w	r2, #2
 8002940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f9b1 	bl	8002cbe <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f9a4 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f9b3 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0204 	mvn.w	r2, #4
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f987 	bl	8002cbe <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f97a 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f989 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0208 	mvn.w	r2, #8
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f95d 	bl	8002cbe <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f950 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f95f 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f933 	bl	8002cbe <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f926 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f935 	bl	8002cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0201 	mvn.w	r2, #1
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe ff50 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa67 	bl	8002f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8f9 	bl	8002ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0220 	mvn.w	r2, #32
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa32 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIM_ConfigClockSource+0x18>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0b3      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x180>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b74:	d03e      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0xd0>
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	f200 8087 	bhi.w	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	f000 8085 	beq.w	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d87f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b8c:	2b70      	cmp	r3, #112	; 0x70
 8002b8e:	d01a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xa2>
 8002b90:	2b70      	cmp	r3, #112	; 0x70
 8002b92:	d87b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d050      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x116>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d877      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d03c      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xf6>
 8002ba0:	2b50      	cmp	r3, #80	; 0x50
 8002ba2:	d873      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d058      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x136>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d86f      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d064      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d86b      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d060      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d867      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05c      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d05a      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bc4:	e062      	b.n	8002c8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f000 f95c 	bl	8002e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
      break;
 8002bf2:	e04e      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f000 f945 	bl	8002e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c16:	609a      	str	r2, [r3, #8]
      break;
 8002c18:	e03b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8bc 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2150      	movs	r1, #80	; 0x50
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f913 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e02b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f8da 	bl	8002e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2160      	movs	r1, #96	; 0x60
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f903 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c58:	e01b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f89c 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f8f3 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c78:	e00b      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 f8ea 	bl	8002e5e <TIM_ITRx_SetConfig>
        break;
 8002c8a:	e002      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <TIM_Base_SetConfig+0xa8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_Base_SetConfig+0x28>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0x28>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <TIM_Base_SetConfig+0xac>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d108      	bne.n	8002d2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <TIM_Base_SetConfig+0xa8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0x52>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0x52>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <TIM_Base_SetConfig+0xac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <TIM_Base_SetConfig+0xa8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400

08002da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 030a 	bic.w	r3, r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e041      	b.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d004      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10c      	bne.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	2600      	movs	r6, #0
 8002fa8:	4d0c      	ldr	r5, [pc, #48]	; (8002fdc <__libc_init_array+0x38>)
 8002faa:	4c0d      	ldr	r4, [pc, #52]	; (8002fe0 <__libc_init_array+0x3c>)
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	42a6      	cmp	r6, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	f000 f822 	bl	8002ffc <_init>
 8002fb8:	2600      	movs	r6, #0
 8002fba:	4d0a      	ldr	r5, [pc, #40]	; (8002fe4 <__libc_init_array+0x40>)
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	; (8002fe8 <__libc_init_array+0x44>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	42a6      	cmp	r6, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fcc:	4798      	blx	r3
 8002fce:	3601      	adds	r6, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd6:	4798      	blx	r3
 8002fd8:	3601      	adds	r6, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	08003034 	.word	0x08003034
 8002fe0:	08003034 	.word	0x08003034
 8002fe4:	08003034 	.word	0x08003034
 8002fe8:	08003038 	.word	0x08003038

08002fec <memset>:
 8002fec:	4603      	mov	r3, r0
 8002fee:	4402      	add	r2, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <memset+0xa>
 8002ff4:	4770      	bx	lr
 8002ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffa:	e7f9      	b.n	8002ff0 <memset+0x4>

08002ffc <_init>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr

08003008 <_fini>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr
