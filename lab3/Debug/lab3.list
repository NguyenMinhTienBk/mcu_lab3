
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000002c  0800313c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800313c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a41a  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddc  00000000  00000000  0002a46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000202c  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d143  00000000  00000000  0002f864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082708  00000000  00000000  0003c9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  000bf104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030d0 	.word	0x080030d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080030d0 	.word	0x080030d0

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f001 f8a2 	bl	80012e4 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fbf0 	bl	8000998 <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fa9e 	bl	80016fc <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f001 f8a5 	bl	8001310 <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fbd9 	bl	8000998 <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa87 	bl	80016fc <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f001 f8a4 	bl	800133c <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fbc2 	bl	8000998 <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fa70 	bl	80016fc <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f001 f8a3 	bl	8001368 <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fbab 	bl	8000998 <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fa59 	bl	80016fc <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 ff46 	bl	80010e4 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 fa4e 	bl	80016fc <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 ff4f 	bl	800110c <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 fa43 	bl	80016fc <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 ff58 	bl	8001134 <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 fa38 	bl	80016fc <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000004c 	.word	0x2000004c
 80002b0:	20000008 	.word	0x20000008
 80002b4:	20000014 	.word	0x20000014
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	2000000c 	.word	0x2000000c
 80002c0:	20000010 	.word	0x20000010

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f001 f83e 	bl	8001394 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fb34 	bl	8000998 <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f9fc 	bl	8001730 <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f001 f841 	bl	80013c0 <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fb1d 	bl	8000998 <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 f9e5 	bl	8001730 <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f001 f840 	bl	80013ec <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fb06 	bl	8000998 <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f9ce 	bl	8001730 <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f001 f83f 	bl	8001418 <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 faef 	bl	8000998 <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f9b7 	bl	8001730 <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fec6 	bl	800115c <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f001 f9ac 	bl	8001730 <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 fecf 	bl	8001184 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f001 f9a1 	bl	8001730 <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 fed8 	bl	80011ac <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 f996 	bl	8001730 <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000050 	.word	0x20000050
 8000428:	2000000c 	.word	0x2000000c
 800042c:	20000018 	.word	0x20000018
 8000430:	200000a4 	.word	0x200000a4
 8000434:	20000010 	.word	0x20000010
 8000438:	20000008 	.word	0x20000008

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b83      	ldr	r3, [pc, #524]	; (8000650 <fsm_mode_run+0x214>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 80f8 	bhi.w	800063a <fsm_mode_run+0x1fe>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	08000485 	.word	0x08000485
 8000458:	080004cf 	.word	0x080004cf
 800045c:	08000553 	.word	0x08000553
 8000460:	080005d7 	.word	0x080005d7
	case INIT:
		status_mode = MODE1;
 8000464:	4b7a      	ldr	r3, [pc, #488]	; (8000650 <fsm_mode_run+0x214>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b7a      	ldr	r3, [pc, #488]	; (8000654 <fsm_mode_run+0x218>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b79      	ldr	r3, [pc, #484]	; (8000658 <fsm_mode_run+0x21c>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 8000476:	4b79      	ldr	r3, [pc, #484]	; (800065c <fsm_mode_run+0x220>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		index_led = 0;
 800047c:	4b78      	ldr	r3, [pc, #480]	; (8000660 <fsm_mode_run+0x224>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000482:	e0e3      	b.n	800064c <fsm_mode_run+0x210>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 8000484:	4b77      	ldr	r3, [pc, #476]	; (8000664 <fsm_mode_run+0x228>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fa93 	bl	80009b4 <isButtonflag>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	f040 80d4 	bne.w	800063e <fsm_mode_run+0x202>
			clearTimer1();
 8000496:	f001 f901 	bl	800169c <clearTimer1>
			clearTimer2();
 800049a:	f001 f90f 	bl	80016bc <clearTimer2>
			clearTimer3();
 800049e:	f001 f91d 	bl	80016dc <clearTimer3>
			status_mode = MODE2;
 80004a2:	4b6b      	ldr	r3, [pc, #428]	; (8000650 <fsm_mode_run+0x214>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
			SetRedVerHor(); // to when blinky, led red ver and hor are the same
 80004a8:	f000 ff0c 	bl	80012c4 <SetRedVerHor>
			status_ver = MODIFY_RED;
 80004ac:	4b69      	ldr	r3, [pc, #420]	; (8000654 <fsm_mode_run+0x218>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004b2:	4b69      	ldr	r3, [pc, #420]	; (8000658 <fsm_mode_run+0x21c>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004b8:	4b6b      	ldr	r3, [pc, #428]	; (8000668 <fsm_mode_run+0x22c>)
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004be:	4b6b      	ldr	r3, [pc, #428]	; (800066c <fsm_mode_run+0x230>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a6b      	ldr	r2, [pc, #428]	; (8000670 <fsm_mode_run+0x234>)
 80004c4:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004c6:	4b65      	ldr	r3, [pc, #404]	; (800065c <fsm_mode_run+0x220>)
 80004c8:	221e      	movs	r2, #30
 80004ca:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 80004cc:	e0b7      	b.n	800063e <fsm_mode_run+0x202>
	case MODE2:

		if (isButtonflag(but1) == 1){
 80004ce:	4b65      	ldr	r3, [pc, #404]	; (8000664 <fsm_mode_run+0x228>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fa6e 	bl	80009b4 <isButtonflag>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d118      	bne.n	8000510 <fsm_mode_run+0xd4>
			clearTimer1();
 80004de:	f001 f8dd 	bl	800169c <clearTimer1>
			clearTimer2();
 80004e2:	f001 f8eb 	bl	80016bc <clearTimer2>
			clearTimer3();
 80004e6:	f001 f8f9 	bl	80016dc <clearTimer3>
			status_mode = MODE3;
 80004ea:	4b59      	ldr	r3, [pc, #356]	; (8000650 <fsm_mode_run+0x214>)
 80004ec:	2203      	movs	r2, #3
 80004ee:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_YELLOW;
 80004f0:	4b58      	ldr	r3, [pc, #352]	; (8000654 <fsm_mode_run+0x218>)
 80004f2:	220e      	movs	r2, #14
 80004f4:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 80004f6:	4b58      	ldr	r3, [pc, #352]	; (8000658 <fsm_mode_run+0x21c>)
 80004f8:	220e      	movs	r2, #14
 80004fa:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 80004fc:	4b5a      	ldr	r3, [pc, #360]	; (8000668 <fsm_mode_run+0x22c>)
 80004fe:	2203      	movs	r2, #3
 8000500:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000502:	4b5c      	ldr	r3, [pc, #368]	; (8000674 <fsm_mode_run+0x238>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a5a      	ldr	r2, [pc, #360]	; (8000670 <fsm_mode_run+0x234>)
 8000508:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800050a:	4b54      	ldr	r3, [pc, #336]	; (800065c <fsm_mode_run+0x220>)
 800050c:	221e      	movs	r2, #30
 800050e:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000510:	4b59      	ldr	r3, [pc, #356]	; (8000678 <fsm_mode_run+0x23c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fa4d 	bl	80009b4 <isButtonflag>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10b      	bne.n	8000538 <fsm_mode_run+0xfc>
			led34++;
 8000520:	4b53      	ldr	r3, [pc, #332]	; (8000670 <fsm_mode_run+0x234>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a52      	ldr	r2, [pc, #328]	; (8000670 <fsm_mode_run+0x234>)
 8000528:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800052a:	4b51      	ldr	r3, [pc, #324]	; (8000670 <fsm_mode_run+0x234>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b63      	cmp	r3, #99	; 0x63
 8000530:	dd02      	ble.n	8000538 <fsm_mode_run+0xfc>
				led34 = 0;
 8000532:	4b4f      	ldr	r3, [pc, #316]	; (8000670 <fsm_mode_run+0x234>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000538:	4b50      	ldr	r3, [pc, #320]	; (800067c <fsm_mode_run+0x240>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fa39 	bl	80009b4 <isButtonflag>
 8000542:	4603      	mov	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d17c      	bne.n	8000642 <fsm_mode_run+0x206>
			timered  = led34;
 8000548:	4b49      	ldr	r3, [pc, #292]	; (8000670 <fsm_mode_run+0x234>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a47      	ldr	r2, [pc, #284]	; (800066c <fsm_mode_run+0x230>)
 800054e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000550:	e077      	b.n	8000642 <fsm_mode_run+0x206>
	case MODE3:

		if (isButtonflag(but1) == 1){
 8000552:	4b44      	ldr	r3, [pc, #272]	; (8000664 <fsm_mode_run+0x228>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa2c 	bl	80009b4 <isButtonflag>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d118      	bne.n	8000594 <fsm_mode_run+0x158>
			clearTimer1();
 8000562:	f001 f89b 	bl	800169c <clearTimer1>
			clearTimer2();
 8000566:	f001 f8a9 	bl	80016bc <clearTimer2>
			clearTimer3();
 800056a:	f001 f8b7 	bl	80016dc <clearTimer3>
			status_mode = MODE4;
 800056e:	4b38      	ldr	r3, [pc, #224]	; (8000650 <fsm_mode_run+0x214>)
 8000570:	2204      	movs	r2, #4
 8000572:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000574:	4b37      	ldr	r3, [pc, #220]	; (8000654 <fsm_mode_run+0x218>)
 8000576:	220d      	movs	r2, #13
 8000578:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 800057a:	4b37      	ldr	r3, [pc, #220]	; (8000658 <fsm_mode_run+0x21c>)
 800057c:	220d      	movs	r2, #13
 800057e:	601a      	str	r2, [r3, #0]
			led12 = MODE4;
 8000580:	4b39      	ldr	r3, [pc, #228]	; (8000668 <fsm_mode_run+0x22c>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 8000586:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <fsm_mode_run+0x244>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a39      	ldr	r2, [pc, #228]	; (8000670 <fsm_mode_run+0x234>)
 800058c:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <fsm_mode_run+0x220>)
 8000590:	221e      	movs	r2, #30
 8000592:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000594:	4b38      	ldr	r3, [pc, #224]	; (8000678 <fsm_mode_run+0x23c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fa0b 	bl	80009b4 <isButtonflag>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10b      	bne.n	80005bc <fsm_mode_run+0x180>
			led34++;
 80005a4:	4b32      	ldr	r3, [pc, #200]	; (8000670 <fsm_mode_run+0x234>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a31      	ldr	r2, [pc, #196]	; (8000670 <fsm_mode_run+0x234>)
 80005ac:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <fsm_mode_run+0x234>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b63      	cmp	r3, #99	; 0x63
 80005b4:	dd02      	ble.n	80005bc <fsm_mode_run+0x180>
				led34 = 0;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <fsm_mode_run+0x234>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <fsm_mode_run+0x240>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f9f7 	bl	80009b4 <isButtonflag>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d13c      	bne.n	8000646 <fsm_mode_run+0x20a>
			timeyellow  = led34;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <fsm_mode_run+0x234>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <fsm_mode_run+0x238>)
 80005d2:	6013      	str	r3, [r2, #0]
		}

		break;
 80005d4:	e037      	b.n	8000646 <fsm_mode_run+0x20a>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <fsm_mode_run+0x228>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f9ea 	bl	80009b4 <isButtonflag>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d108      	bne.n	80005f8 <fsm_mode_run+0x1bc>
			clearTimer1();
 80005e6:	f001 f859 	bl	800169c <clearTimer1>
			clearTimer2();
 80005ea:	f001 f867 	bl	80016bc <clearTimer2>
			clearTimer3();
 80005ee:	f001 f875 	bl	80016dc <clearTimer3>
			status_mode = INIT;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <fsm_mode_run+0x214>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <fsm_mode_run+0x23c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f9d9 	bl	80009b4 <isButtonflag>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d10b      	bne.n	8000620 <fsm_mode_run+0x1e4>
			led34++;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <fsm_mode_run+0x234>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a18      	ldr	r2, [pc, #96]	; (8000670 <fsm_mode_run+0x234>)
 8000610:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <fsm_mode_run+0x234>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b63      	cmp	r3, #99	; 0x63
 8000618:	dd02      	ble.n	8000620 <fsm_mode_run+0x1e4>
				led34 = 0;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <fsm_mode_run+0x234>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <fsm_mode_run+0x240>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f9c5 	bl	80009b4 <isButtonflag>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10c      	bne.n	800064a <fsm_mode_run+0x20e>
			timegreen = led34;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <fsm_mode_run+0x234>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <fsm_mode_run+0x244>)
 8000636:	6013      	str	r3, [r2, #0]
		}
		break;
 8000638:	e007      	b.n	800064a <fsm_mode_run+0x20e>
	default:
		break;
 800063a:	bf00      	nop
 800063c:	e006      	b.n	800064c <fsm_mode_run+0x210>
		break;
 800063e:	bf00      	nop
 8000640:	e004      	b.n	800064c <fsm_mode_run+0x210>
		break;
 8000642:	bf00      	nop
 8000644:	e002      	b.n	800064c <fsm_mode_run+0x210>
		break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <fsm_mode_run+0x210>
		break;
 800064a:	bf00      	nop
	}


}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000048 	.word	0x20000048
 8000654:	2000004c 	.word	0x2000004c
 8000658:	20000050 	.word	0x20000050
 800065c:	20000054 	.word	0x20000054
 8000660:	20000058 	.word	0x20000058
 8000664:	2000005c 	.word	0x2000005c
 8000668:	20000014 	.word	0x20000014
 800066c:	20000008 	.word	0x20000008
 8000670:	20000018 	.word	0x20000018
 8000674:	20000010 	.word	0x20000010
 8000678:	20000000 	.word	0x20000000
 800067c:	20000004 	.word	0x20000004
 8000680:	2000000c 	.word	0x2000000c

08000684 <fsm_mode_led7seg>:
 */

#include <fsm_mode_Led7Seg.h>
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 8000688:	4bb4      	ldr	r3, [pc, #720]	; (800095c <fsm_mode_led7seg+0x2d8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b21      	cmp	r3, #33	; 0x21
 800068e:	f200 816f 	bhi.w	8000970 <fsm_mode_led7seg+0x2ec>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <fsm_mode_led7seg+0x14>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	08000721 	.word	0x08000721
 800069c:	08000971 	.word	0x08000971
 80006a0:	08000971 	.word	0x08000971
 80006a4:	08000971 	.word	0x08000971
 80006a8:	08000971 	.word	0x08000971
 80006ac:	08000971 	.word	0x08000971
 80006b0:	08000971 	.word	0x08000971
 80006b4:	08000971 	.word	0x08000971
 80006b8:	08000971 	.word	0x08000971
 80006bc:	08000971 	.word	0x08000971
 80006c0:	08000971 	.word	0x08000971
 80006c4:	08000971 	.word	0x08000971
 80006c8:	08000971 	.word	0x08000971
 80006cc:	08000971 	.word	0x08000971
 80006d0:	08000971 	.word	0x08000971
 80006d4:	08000971 	.word	0x08000971
 80006d8:	08000971 	.word	0x08000971
 80006dc:	08000971 	.word	0x08000971
 80006e0:	08000971 	.word	0x08000971
 80006e4:	08000971 	.word	0x08000971
 80006e8:	08000757 	.word	0x08000757
 80006ec:	08000797 	.word	0x08000797
 80006f0:	080007d7 	.word	0x080007d7
 80006f4:	08000827 	.word	0x08000827
 80006f8:	08000971 	.word	0x08000971
 80006fc:	08000971 	.word	0x08000971
 8000700:	08000971 	.word	0x08000971
 8000704:	08000971 	.word	0x08000971
 8000708:	08000971 	.word	0x08000971
 800070c:	08000971 	.word	0x08000971
 8000710:	08000867 	.word	0x08000867
 8000714:	080008a7 	.word	0x080008a7
 8000718:	080008e5 	.word	0x080008e5
 800071c:	0800091f 	.word	0x0800091f
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 8000720:	4b8e      	ldr	r3, [pc, #568]	; (800095c <fsm_mode_led7seg+0x2d8>)
 8000722:	2214      	movs	r2, #20
 8000724:	601a      	str	r2, [r3, #0]
				updateLedBuffer(led12,led34);
 8000726:	4b8e      	ldr	r3, [pc, #568]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a8e      	ldr	r2, [pc, #568]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fc9b 	bl	800106c <updateLedBuffer>
				SetLed7Seg1On();
 8000736:	f000 fd4d 	bl	80011d4 <SetLed7Seg1On>
				update7SEG(index_led);
 800073a:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fc5a 	bl	8000ff8 <update7SEG>
				index_led++;
 8000744:	4b88      	ldr	r3, [pc, #544]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a87      	ldr	r2, [pc, #540]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800074c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800074e:	20fa      	movs	r0, #250	; 0xfa
 8000750:	f001 f808 	bl	8001764 <setTimer3>
			break;
 8000754:	e11d      	b.n	8000992 <fsm_mode_led7seg+0x30e>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000756:	4b85      	ldr	r3, [pc, #532]	; (800096c <fsm_mode_led7seg+0x2e8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	f040 810a 	bne.w	8000974 <fsm_mode_led7seg+0x2f0>
				updateLedBuffer(led12,led34);
 8000760:	4b7f      	ldr	r3, [pc, #508]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a7f      	ldr	r2, [pc, #508]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fc7e 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_2;
 8000770:	4b7a      	ldr	r3, [pc, #488]	; (800095c <fsm_mode_led7seg+0x2d8>)
 8000772:	2215      	movs	r2, #21
 8000774:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 8000776:	f000 fd4b 	bl	8001210 <SetLed7Seg2On>
				update7SEG(index_led);
 800077a:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fc3a 	bl	8000ff8 <update7SEG>
				index_led++;
 8000784:	4b78      	ldr	r3, [pc, #480]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a77      	ldr	r2, [pc, #476]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800078c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800078e:	20fa      	movs	r0, #250	; 0xfa
 8000790:	f000 ffe8 	bl	8001764 <setTimer3>
			}
			break;
 8000794:	e0ee      	b.n	8000974 <fsm_mode_led7seg+0x2f0>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 8000796:	4b75      	ldr	r3, [pc, #468]	; (800096c <fsm_mode_led7seg+0x2e8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	f040 80ec 	bne.w	8000978 <fsm_mode_led7seg+0x2f4>
				updateLedBuffer(led12,led34);
 80007a0:	4b6f      	ldr	r3, [pc, #444]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a6f      	ldr	r2, [pc, #444]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc5e 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_3;
 80007b0:	4b6a      	ldr	r3, [pc, #424]	; (800095c <fsm_mode_led7seg+0x2d8>)
 80007b2:	2216      	movs	r2, #22
 80007b4:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 80007b6:	f000 fd49 	bl	800124c <SetLed7Seg3On>
				update7SEG(index_led);
 80007ba:	4b6b      	ldr	r3, [pc, #428]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fc1a 	bl	8000ff8 <update7SEG>
				index_led++;
 80007c4:	4b68      	ldr	r3, [pc, #416]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a67      	ldr	r2, [pc, #412]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80007cc:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 80007ce:	20fa      	movs	r0, #250	; 0xfa
 80007d0:	f000 ffc8 	bl	8001764 <setTimer3>
			}
			break;
 80007d4:	e0d0      	b.n	8000978 <fsm_mode_led7seg+0x2f4>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 80007d6:	4b65      	ldr	r3, [pc, #404]	; (800096c <fsm_mode_led7seg+0x2e8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	f040 80ce 	bne.w	800097c <fsm_mode_led7seg+0x2f8>
				updateLedBuffer(led12,led34);
 80007e0:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fc3e 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_4;
 80007f0:	4b5a      	ldr	r3, [pc, #360]	; (800095c <fsm_mode_led7seg+0x2d8>)
 80007f2:	2217      	movs	r2, #23
 80007f4:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 80007f6:	f000 fd47 	bl	8001288 <SetLed7Seg4On>
				update7SEG(index_led);
 80007fa:	4b5b      	ldr	r3, [pc, #364]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fbfa 	bl	8000ff8 <update7SEG>
				index_led = 0;
 8000804:	4b58      	ldr	r3, [pc, #352]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				led12--;
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a53      	ldr	r2, [pc, #332]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000812:	6013      	str	r3, [r2, #0]
				led34--;
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a52      	ldr	r2, [pc, #328]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 800081c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f000 ffa0 	bl	8001764 <setTimer3>
			}
			break;
 8000824:	e0aa      	b.n	800097c <fsm_mode_led7seg+0x2f8>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 8000826:	4b51      	ldr	r3, [pc, #324]	; (800096c <fsm_mode_led7seg+0x2e8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 80a8 	bne.w	8000980 <fsm_mode_led7seg+0x2fc>
				updateLedBuffer(led12,led34);
 8000830:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a4b      	ldr	r2, [pc, #300]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fc16 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_1;
 8000840:	4b46      	ldr	r3, [pc, #280]	; (800095c <fsm_mode_led7seg+0x2d8>)
 8000842:	2214      	movs	r2, #20
 8000844:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 8000846:	f000 fcc5 	bl	80011d4 <SetLed7Seg1On>
				update7SEG(index_led);
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fbd2 	bl	8000ff8 <update7SEG>
				index_led++;
 8000854:	4b44      	ldr	r3, [pc, #272]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a43      	ldr	r2, [pc, #268]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800085c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800085e:	20fa      	movs	r0, #250	; 0xfa
 8000860:	f000 ff80 	bl	8001764 <setTimer3>
			}
			break;
 8000864:	e08c      	b.n	8000980 <fsm_mode_led7seg+0x2fc>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <fsm_mode_led7seg+0x2e8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	f040 808a 	bne.w	8000984 <fsm_mode_led7seg+0x300>
				updateLedBuffer(led12,led34);
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fbf6 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_2;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <fsm_mode_led7seg+0x2d8>)
 8000882:	221f      	movs	r2, #31
 8000884:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 8000886:	f000 fcc3 	bl	8001210 <SetLed7Seg2On>
				update7SEG(index_led);
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fbb2 	bl	8000ff8 <update7SEG>
				index_led++;
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a33      	ldr	r2, [pc, #204]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800089c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800089e:	20fa      	movs	r0, #250	; 0xfa
 80008a0:	f000 ff60 	bl	8001764 <setTimer3>
			}
			break;
 80008a4:	e06e      	b.n	8000984 <fsm_mode_led7seg+0x300>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <fsm_mode_led7seg+0x2e8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d16c      	bne.n	8000988 <fsm_mode_led7seg+0x304>
				updateLedBuffer(led12,led34);
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fbd7 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_3;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <fsm_mode_led7seg+0x2d8>)
 80008c0:	2220      	movs	r2, #32
 80008c2:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 80008c4:	f000 fcc2 	bl	800124c <SetLed7Seg3On>
				update7SEG(index_led);
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fb93 	bl	8000ff8 <update7SEG>
				index_led++;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a23      	ldr	r2, [pc, #140]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 80008da:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80008dc:	20fa      	movs	r0, #250	; 0xfa
 80008de:	f000 ff41 	bl	8001764 <setTimer3>
			}
			break;
 80008e2:	e051      	b.n	8000988 <fsm_mode_led7seg+0x304>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <fsm_mode_led7seg+0x2e8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d14f      	bne.n	800098c <fsm_mode_led7seg+0x308>
				updateLedBuffer(led12,led34);
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fbb8 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_4;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <fsm_mode_led7seg+0x2d8>)
 80008fe:	2221      	movs	r2, #33	; 0x21
 8000900:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 8000902:	f000 fcc1 	bl	8001288 <SetLed7Seg4On>
				update7SEG(index_led);
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fb74 	bl	8000ff8 <update7SEG>
				index_led = 0;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 8000916:	20fa      	movs	r0, #250	; 0xfa
 8000918:	f000 ff24 	bl	8001764 <setTimer3>
			}
			break;
 800091c:	e036      	b.n	800098c <fsm_mode_led7seg+0x308>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <fsm_mode_led7seg+0x2e8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d134      	bne.n	8000990 <fsm_mode_led7seg+0x30c>
				updateLedBuffer(led12,led34);
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <fsm_mode_led7seg+0x2dc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <fsm_mode_led7seg+0x2e0>)
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fb9b 	bl	800106c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_1;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <fsm_mode_led7seg+0x2d8>)
 8000938:	221e      	movs	r2, #30
 800093a:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 800093c:	f000 fc4a 	bl	80011d4 <SetLed7Seg1On>
				update7SEG(index_led);
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fb57 	bl	8000ff8 <update7SEG>
				index_led++;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <fsm_mode_led7seg+0x2e4>)
 8000952:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000954:	20fa      	movs	r0, #250	; 0xfa
 8000956:	f000 ff05 	bl	8001764 <setTimer3>
			}
			break;
 800095a:	e019      	b.n	8000990 <fsm_mode_led7seg+0x30c>
 800095c:	20000054 	.word	0x20000054
 8000960:	20000014 	.word	0x20000014
 8000964:	20000018 	.word	0x20000018
 8000968:	20000058 	.word	0x20000058
 800096c:	200000a8 	.word	0x200000a8
		default:
			break;
 8000970:	bf00      	nop
 8000972:	e00e      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000974:	bf00      	nop
 8000976:	e00c      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000978:	bf00      	nop
 800097a:	e00a      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 800097c:	bf00      	nop
 800097e:	e008      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000980:	bf00      	nop
 8000982:	e006      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000984:	bf00      	nop
 8000986:	e004      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000988:	bf00      	nop
 800098a:	e002      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <fsm_mode_led7seg+0x30e>
			break;
 8000990:	bf00      	nop
	}
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop

08000998 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	return time * 1000;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <isButtonflag+0x30>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d106      	bne.n	80009d6 <isButtonflag+0x22>
		flagForButton[index] = 0;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <isButtonflag+0x30>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		return 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <isButtonflag+0x24>
	}
	return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000074 	.word	0x20000074

080009e8 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d901      	bls.n	80009fc <is_button_pressed+0x14>
 80009f8:	2300      	movs	r3, #0
 80009fa:	e007      	b.n	8000a0c <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <is_button_pressed+0x30>)
 8000a00:	5cd3      	ldrb	r3, [r2, r3]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000060 	.word	0x20000060

08000a1c <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d901      	bls.n	8000a30 <is_button_pressed_3s+0x14>
 8000a2c:	23ff      	movs	r3, #255	; 0xff
 8000a2e:	e007      	b.n	8000a40 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <is_button_pressed_3s+0x30>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	bf0c      	ite	eq
 8000a3a:	2301      	moveq	r3, #1
 8000a3c:	2300      	movne	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000070 	.word	0x20000070

08000a50 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
void fsm_for_input_processing(uint8_t index ){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a51      	ldr	r2, [pc, #324]	; (8000ba4 <fsm_for_input_processing+0x154>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d068      	beq.n	8000b36 <fsm_for_input_processing+0xe6>
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	f300 8098 	bgt.w	8000b9a <fsm_for_input_processing+0x14a>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <fsm_for_input_processing+0x24>
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d01a      	beq.n	8000aa8 <fsm_for_input_processing+0x58>
					}
				}

			break ;
	}
}
 8000a72:	e092      	b.n	8000b9a <fsm_for_input_processing+0x14a>
			if( is_button_pressed(index)){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffb6 	bl	80009e8 <is_button_pressed>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8088 	beq.w	8000b94 <fsm_for_input_processing+0x144>
				buttonState[index] = BUTTON_PRESSED ;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <fsm_for_input_processing+0x154>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a46      	ldr	r2, [pc, #280]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4a44      	ldr	r2, [pc, #272]	; (8000bac <fsm_for_input_processing+0x15c>)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a43      	ldr	r2, [pc, #268]	; (8000bb0 <fsm_for_input_processing+0x160>)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	54d1      	strb	r1, [r2, r3]
			break ;
 8000aa6:	e075      	b.n	8000b94 <fsm_for_input_processing+0x144>
			if (!is_button_pressed(index)){
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff9c 	bl	80009e8 <is_button_pressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <fsm_for_input_processing+0x82>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <fsm_for_input_processing+0x154>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4a3b      	ldr	r2, [pc, #236]	; (8000bb0 <fsm_for_input_processing+0x160>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000ad0:	e062      	b.n	8000b98 <fsm_for_input_processing+0x148>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a34      	ldr	r2, [pc, #208]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ada:	2b63      	cmp	r3, #99	; 0x63
 8000adc:	d809      	bhi.n	8000af2 <fsm_for_input_processing+0xa2>
						counterForButtonPress1s[index]++;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000ae2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	b291      	uxth	r1, r2
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000aec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000af0:	e011      	b.n	8000b16 <fsm_for_input_processing+0xc6>
					flagForButtonPress1s[index] = 1;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <fsm_for_input_processing+0x15c>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <fsm_for_input_processing+0x160>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <fsm_for_input_processing+0x158>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff7f 	bl	8000a1c <is_button_pressed_3s>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d039      	beq.n	8000b98 <fsm_for_input_processing+0x148>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <fsm_for_input_processing+0x154>)
 8000b28:	2102      	movs	r1, #2
 8000b2a:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <fsm_for_input_processing+0x15c>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	54d1      	strb	r1, [r2, r3]
			break ;
 8000b34:	e030      	b.n	8000b98 <fsm_for_input_processing+0x148>
			if (! is_button_pressed(index)){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff55 	bl	80009e8 <is_button_pressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10d      	bne.n	8000b60 <fsm_for_input_processing+0x110>
				buttonState[index] = BUTTON_RELEASED;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <fsm_for_input_processing+0x154>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <fsm_for_input_processing+0x160>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b5e:	e01c      	b.n	8000b9a <fsm_for_input_processing+0x14a>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b68:	2b13      	cmp	r3, #19
 8000b6a:	d809      	bhi.n	8000b80 <fsm_for_input_processing+0x130>
							counterForButtonAfterPress1s[index]++;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b74:	3201      	adds	r2, #1
 8000b76:	b291      	uxth	r1, r2
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b7e:	e00c      	b.n	8000b9a <fsm_for_input_processing+0x14a>
						flagForButton[index] = 1;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <fsm_for_input_processing+0x160>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <fsm_for_input_processing+0x164>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b92:	e002      	b.n	8000b9a <fsm_for_input_processing+0x14a>
			break ;
 8000b94:	bf00      	nop
 8000b96:	e000      	b.n	8000b9a <fsm_for_input_processing+0x14a>
			break ;
 8000b98:	bf00      	nop
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000088 	.word	0x20000088
 8000ba8:	20000078 	.word	0x20000078
 8000bac:	20000070 	.word	0x20000070
 8000bb0:	20000074 	.word	0x20000074
 8000bb4:	20000080 	.word	0x20000080

08000bb8 <button_reading>:




void button_reading(void){
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e054      	b.n	8000c6e <button_reading+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	492d      	ldr	r1, [pc, #180]	; (8000c80 <button_reading+0xc8>)
 8000bca:	5c89      	ldrb	r1, [r1, r2]
 8000bcc:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <button_reading+0xcc>)
 8000bce:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	492c      	ldr	r1, [pc, #176]	; (8000c88 <button_reading+0xd0>)
 8000bd6:	5c89      	ldrb	r1, [r1, r2]
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <button_reading+0xc8>)
 8000bda:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d01c      	beq.n	8000c1c <button_reading+0x64>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc25      	bgt.n	8000c32 <button_reading+0x7a>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <button_reading+0x38>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d00b      	beq.n	8000c06 <button_reading+0x4e>
			  break;
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			  break;
		  default:
			  break;
 8000bee:	e020      	b.n	8000c32 <button_reading+0x7a>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000bf0:	79fc      	ldrb	r4, [r7, #7]
 8000bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf6:	4825      	ldr	r0, [pc, #148]	; (8000c8c <button_reading+0xd4>)
 8000bf8:	f001 fa2a 	bl	8002050 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <button_reading+0xd0>)
 8000c02:	551a      	strb	r2, [r3, r4]
			  break;
 8000c04:	e016      	b.n	8000c34 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000c06:	79fc      	ldrb	r4, [r7, #7]
 8000c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <button_reading+0xd4>)
 8000c0e:	f001 fa1f 	bl	8002050 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <button_reading+0xd0>)
 8000c18:	551a      	strb	r2, [r3, r4]
			  break;
 8000c1a:	e00b      	b.n	8000c34 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000c1c:	79fc      	ldrb	r4, [r7, #7]
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <button_reading+0xd4>)
 8000c24:	f001 fa14 	bl	8002050 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <button_reading+0xd0>)
 8000c2e:	551a      	strb	r2, [r3, r4]
			  break;
 8000c30:	e000      	b.n	8000c34 <button_reading+0x7c>
			  break;
 8000c32:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <button_reading+0xd0>)
 8000c38:	5cd2      	ldrb	r2, [r2, r3]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4910      	ldr	r1, [pc, #64]	; (8000c80 <button_reading+0xc8>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d111      	bne.n	8000c68 <button_reading+0xb0>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <button_reading+0xc8>)
 8000c48:	5cd2      	ldrb	r2, [r2, r3]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	490d      	ldr	r1, [pc, #52]	; (8000c84 <button_reading+0xcc>)
 8000c4e:	5ccb      	ldrb	r3, [r1, r3]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d109      	bne.n	8000c68 <button_reading+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	490a      	ldr	r1, [pc, #40]	; (8000c84 <button_reading+0xcc>)
 8000c5a:	5c89      	ldrb	r1, [r1, r2]
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <button_reading+0xd8>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fef4 	bl	8000a50 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d9a7      	bls.n	8000bc4 <button_reading+0xc>
		  }

	}
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000068 	.word	0x20000068
 8000c84:	2000006c 	.word	0x2000006c
 8000c88:	20000064 	.word	0x20000064
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	20000060 	.word	0x20000060

08000c94 <display7SEG>:
#include "led_display.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7SEG(int num){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	f200 8180 	bhi.w	8000fa4 <display7SEG+0x310>
 8000ca4:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <display7SEG+0x18>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000cd5 	.word	0x08000cd5
 8000cb0:	08000d1d 	.word	0x08000d1d
 8000cb4:	08000d65 	.word	0x08000d65
 8000cb8:	08000dad 	.word	0x08000dad
 8000cbc:	08000df5 	.word	0x08000df5
 8000cc0:	08000e3d 	.word	0x08000e3d
 8000cc4:	08000e85 	.word	0x08000e85
 8000cc8:	08000ecd 	.word	0x08000ecd
 8000ccc:	08000f15 	.word	0x08000f15
 8000cd0:	08000f5d 	.word	0x08000f5d
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	48c6      	ldr	r0, [pc, #792]	; (8000ff4 <display7SEG+0x360>)
 8000cda:	f001 f9d0 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	48c4      	ldr	r0, [pc, #784]	; (8000ff4 <display7SEG+0x360>)
 8000ce4:	f001 f9cb 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2104      	movs	r1, #4
 8000cec:	48c1      	ldr	r0, [pc, #772]	; (8000ff4 <display7SEG+0x360>)
 8000cee:	f001 f9c6 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	48bf      	ldr	r0, [pc, #764]	; (8000ff4 <display7SEG+0x360>)
 8000cf8:	f001 f9c1 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2110      	movs	r1, #16
 8000d00:	48bc      	ldr	r0, [pc, #752]	; (8000ff4 <display7SEG+0x360>)
 8000d02:	f001 f9bc 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2120      	movs	r1, #32
 8000d0a:	48ba      	ldr	r0, [pc, #744]	; (8000ff4 <display7SEG+0x360>)
 8000d0c:	f001 f9b7 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	48b7      	ldr	r0, [pc, #732]	; (8000ff4 <display7SEG+0x360>)
 8000d16:	f001 f9b2 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000d1a:	e167      	b.n	8000fec <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	48b4      	ldr	r0, [pc, #720]	; (8000ff4 <display7SEG+0x360>)
 8000d22:	f001 f9ac 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	48b2      	ldr	r0, [pc, #712]	; (8000ff4 <display7SEG+0x360>)
 8000d2c:	f001 f9a7 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2104      	movs	r1, #4
 8000d34:	48af      	ldr	r0, [pc, #700]	; (8000ff4 <display7SEG+0x360>)
 8000d36:	f001 f9a2 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	48ad      	ldr	r0, [pc, #692]	; (8000ff4 <display7SEG+0x360>)
 8000d40:	f001 f99d 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	48aa      	ldr	r0, [pc, #680]	; (8000ff4 <display7SEG+0x360>)
 8000d4a:	f001 f998 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	48a8      	ldr	r0, [pc, #672]	; (8000ff4 <display7SEG+0x360>)
 8000d54:	f001 f993 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	48a5      	ldr	r0, [pc, #660]	; (8000ff4 <display7SEG+0x360>)
 8000d5e:	f001 f98e 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000d62:	e143      	b.n	8000fec <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	48a2      	ldr	r0, [pc, #648]	; (8000ff4 <display7SEG+0x360>)
 8000d6a:	f001 f988 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	48a0      	ldr	r0, [pc, #640]	; (8000ff4 <display7SEG+0x360>)
 8000d74:	f001 f983 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	489d      	ldr	r0, [pc, #628]	; (8000ff4 <display7SEG+0x360>)
 8000d7e:	f001 f97e 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	489b      	ldr	r0, [pc, #620]	; (8000ff4 <display7SEG+0x360>)
 8000d88:	f001 f979 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <display7SEG+0x360>)
 8000d92:	f001 f974 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4896      	ldr	r0, [pc, #600]	; (8000ff4 <display7SEG+0x360>)
 8000d9c:	f001 f96f 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	4893      	ldr	r0, [pc, #588]	; (8000ff4 <display7SEG+0x360>)
 8000da6:	f001 f96a 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000daa:	e11f      	b.n	8000fec <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2101      	movs	r1, #1
 8000db0:	4890      	ldr	r0, [pc, #576]	; (8000ff4 <display7SEG+0x360>)
 8000db2:	f001 f964 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	488e      	ldr	r0, [pc, #568]	; (8000ff4 <display7SEG+0x360>)
 8000dbc:	f001 f95f 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	488b      	ldr	r0, [pc, #556]	; (8000ff4 <display7SEG+0x360>)
 8000dc6:	f001 f95a 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4889      	ldr	r0, [pc, #548]	; (8000ff4 <display7SEG+0x360>)
 8000dd0:	f001 f955 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4886      	ldr	r0, [pc, #536]	; (8000ff4 <display7SEG+0x360>)
 8000dda:	f001 f950 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	4884      	ldr	r0, [pc, #528]	; (8000ff4 <display7SEG+0x360>)
 8000de4:	f001 f94b 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4881      	ldr	r0, [pc, #516]	; (8000ff4 <display7SEG+0x360>)
 8000dee:	f001 f946 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000df2:	e0fb      	b.n	8000fec <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2101      	movs	r1, #1
 8000df8:	487e      	ldr	r0, [pc, #504]	; (8000ff4 <display7SEG+0x360>)
 8000dfa:	f001 f940 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	487c      	ldr	r0, [pc, #496]	; (8000ff4 <display7SEG+0x360>)
 8000e04:	f001 f93b 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	4879      	ldr	r0, [pc, #484]	; (8000ff4 <display7SEG+0x360>)
 8000e0e:	f001 f936 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2108      	movs	r1, #8
 8000e16:	4877      	ldr	r0, [pc, #476]	; (8000ff4 <display7SEG+0x360>)
 8000e18:	f001 f931 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4874      	ldr	r0, [pc, #464]	; (8000ff4 <display7SEG+0x360>)
 8000e22:	f001 f92c 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4872      	ldr	r0, [pc, #456]	; (8000ff4 <display7SEG+0x360>)
 8000e2c:	f001 f927 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	486f      	ldr	r0, [pc, #444]	; (8000ff4 <display7SEG+0x360>)
 8000e36:	f001 f922 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000e3a:	e0d7      	b.n	8000fec <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2101      	movs	r1, #1
 8000e40:	486c      	ldr	r0, [pc, #432]	; (8000ff4 <display7SEG+0x360>)
 8000e42:	f001 f91c 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2102      	movs	r1, #2
 8000e4a:	486a      	ldr	r0, [pc, #424]	; (8000ff4 <display7SEG+0x360>)
 8000e4c:	f001 f917 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	4867      	ldr	r0, [pc, #412]	; (8000ff4 <display7SEG+0x360>)
 8000e56:	f001 f912 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4865      	ldr	r0, [pc, #404]	; (8000ff4 <display7SEG+0x360>)
 8000e60:	f001 f90d 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2110      	movs	r1, #16
 8000e68:	4862      	ldr	r0, [pc, #392]	; (8000ff4 <display7SEG+0x360>)
 8000e6a:	f001 f908 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	4860      	ldr	r0, [pc, #384]	; (8000ff4 <display7SEG+0x360>)
 8000e74:	f001 f903 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	485d      	ldr	r0, [pc, #372]	; (8000ff4 <display7SEG+0x360>)
 8000e7e:	f001 f8fe 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000e82:	e0b3      	b.n	8000fec <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <display7SEG+0x360>)
 8000e8a:	f001 f8f8 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2102      	movs	r1, #2
 8000e92:	4858      	ldr	r0, [pc, #352]	; (8000ff4 <display7SEG+0x360>)
 8000e94:	f001 f8f3 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4855      	ldr	r0, [pc, #340]	; (8000ff4 <display7SEG+0x360>)
 8000e9e:	f001 f8ee 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4853      	ldr	r0, [pc, #332]	; (8000ff4 <display7SEG+0x360>)
 8000ea8:	f001 f8e9 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4850      	ldr	r0, [pc, #320]	; (8000ff4 <display7SEG+0x360>)
 8000eb2:	f001 f8e4 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2120      	movs	r1, #32
 8000eba:	484e      	ldr	r0, [pc, #312]	; (8000ff4 <display7SEG+0x360>)
 8000ebc:	f001 f8df 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <display7SEG+0x360>)
 8000ec6:	f001 f8da 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000eca:	e08f      	b.n	8000fec <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4848      	ldr	r0, [pc, #288]	; (8000ff4 <display7SEG+0x360>)
 8000ed2:	f001 f8d4 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4846      	ldr	r0, [pc, #280]	; (8000ff4 <display7SEG+0x360>)
 8000edc:	f001 f8cf 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4843      	ldr	r0, [pc, #268]	; (8000ff4 <display7SEG+0x360>)
 8000ee6:	f001 f8ca 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2108      	movs	r1, #8
 8000eee:	4841      	ldr	r0, [pc, #260]	; (8000ff4 <display7SEG+0x360>)
 8000ef0:	f001 f8c5 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	483e      	ldr	r0, [pc, #248]	; (8000ff4 <display7SEG+0x360>)
 8000efa:	f001 f8c0 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2120      	movs	r1, #32
 8000f02:	483c      	ldr	r0, [pc, #240]	; (8000ff4 <display7SEG+0x360>)
 8000f04:	f001 f8bb 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <display7SEG+0x360>)
 8000f0e:	f001 f8b6 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000f12:	e06b      	b.n	8000fec <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	4836      	ldr	r0, [pc, #216]	; (8000ff4 <display7SEG+0x360>)
 8000f1a:	f001 f8b0 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	4834      	ldr	r0, [pc, #208]	; (8000ff4 <display7SEG+0x360>)
 8000f24:	f001 f8ab 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <display7SEG+0x360>)
 8000f2e:	f001 f8a6 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2108      	movs	r1, #8
 8000f36:	482f      	ldr	r0, [pc, #188]	; (8000ff4 <display7SEG+0x360>)
 8000f38:	f001 f8a1 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	482c      	ldr	r0, [pc, #176]	; (8000ff4 <display7SEG+0x360>)
 8000f42:	f001 f89c 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	482a      	ldr	r0, [pc, #168]	; (8000ff4 <display7SEG+0x360>)
 8000f4c:	f001 f897 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <display7SEG+0x360>)
 8000f56:	f001 f892 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000f5a:	e047      	b.n	8000fec <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <display7SEG+0x360>)
 8000f62:	f001 f88c 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <display7SEG+0x360>)
 8000f6c:	f001 f887 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <display7SEG+0x360>)
 8000f76:	f001 f882 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <display7SEG+0x360>)
 8000f80:	f001 f87d 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <display7SEG+0x360>)
 8000f8a:	f001 f878 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <display7SEG+0x360>)
 8000f94:	f001 f873 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <display7SEG+0x360>)
 8000f9e:	f001 f86e 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000fa2:	e023      	b.n	8000fec <display7SEG+0x358>
	default :
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <display7SEG+0x360>)
 8000faa:	f001 f868 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <display7SEG+0x360>)
 8000fb4:	f001 f863 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2104      	movs	r1, #4
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <display7SEG+0x360>)
 8000fbe:	f001 f85e 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <display7SEG+0x360>)
 8000fc8:	f001 f859 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <display7SEG+0x360>)
 8000fd2:	f001 f854 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <display7SEG+0x360>)
 8000fdc:	f001 f84f 	bl	800207e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <display7SEG+0x360>)
 8000fe6:	f001 f84a 	bl	800207e <HAL_GPIO_WritePin>
		break;
 8000fea:	bf00      	nop
	}
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010c00 	.word	0x40010c00

08000ff8 <update7SEG>:

const int MAX_LED = 4;
int led_buffer[4] = {0, 0, 0, 0};

void update7SEG(int index){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d82a      	bhi.n	800105c <update7SEG+0x64>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <update7SEG+0x14>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	0800101d 	.word	0x0800101d
 8001010:	0800102d 	.word	0x0800102d
 8001014:	0800103d 	.word	0x0800103d
 8001018:	0800104d 	.word	0x0800104d
    switch (index){
		case 0: {
			display7SEG(led_buffer[index]);
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <update7SEG+0x70>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe35 	bl	8000c94 <display7SEG>
			break ;
 800102a:	e018      	b.n	800105e <update7SEG+0x66>
		}
		case 1:{
			display7SEG(led_buffer[index]);
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <update7SEG+0x70>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe2d 	bl	8000c94 <display7SEG>
			break ;
 800103a:	e010      	b.n	800105e <update7SEG+0x66>
		}
		case 2:{
			display7SEG(led_buffer[index]);
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <update7SEG+0x70>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe25 	bl	8000c94 <display7SEG>
			break ;
 800104a:	e008      	b.n	800105e <update7SEG+0x66>
		}
		case 3:{
			display7SEG(led_buffer[index]);
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <update7SEG+0x70>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe1d 	bl	8000c94 <display7SEG>
			break ;
 800105a:	e000      	b.n	800105e <update7SEG+0x66>
		}
		default :
			break;
 800105c:	bf00      	nop
    }
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000008c 	.word	0x2000008c

0800106c <updateLedBuffer>:

void updateLedBuffer(int led1_2,int led3_4){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led1_2 / 10;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <updateLedBuffer+0x70>)
 800107a:	fb82 1203 	smull	r1, r2, r2, r3
 800107e:	1092      	asrs	r2, r2, #2
 8001080:	17db      	asrs	r3, r3, #31
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <updateLedBuffer+0x74>)
 8001086:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led1_2 % 10;
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <updateLedBuffer+0x70>)
 800108c:	fb83 2301 	smull	r2, r3, r3, r1
 8001090:	109a      	asrs	r2, r3, #2
 8001092:	17cb      	asrs	r3, r1, #31
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1aca      	subs	r2, r1, r3
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <updateLedBuffer+0x74>)
 80010a2:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led3_4 / 10;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <updateLedBuffer+0x70>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	1092      	asrs	r2, r2, #2
 80010ae:	17db      	asrs	r3, r3, #31
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <updateLedBuffer+0x74>)
 80010b4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led3_4 % 10;
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <updateLedBuffer+0x70>)
 80010ba:	fb83 2301 	smull	r2, r3, r3, r1
 80010be:	109a      	asrs	r2, r3, #2
 80010c0:	17cb      	asrs	r3, r1, #31
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	1aca      	subs	r2, r1, r3
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <updateLedBuffer+0x74>)
 80010d0:	60da      	str	r2, [r3, #12]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	66666667 	.word	0x66666667
 80010e0:	2000008c 	.word	0x2000008c

080010e4 <BlinkyRedVer>:

void BlinkyRedVer(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
 80010e8:	2104      	movs	r1, #4
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <BlinkyRedVer+0x24>)
 80010ec:	f000 ffdf 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <BlinkyRedVer+0x24>)
 80010f6:	f000 ffc2 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2108      	movs	r1, #8
 80010fe:	4802      	ldr	r0, [pc, #8]	; (8001108 <BlinkyRedVer+0x24>)
 8001100:	f000 ffbd 	bl	800207e <HAL_GPIO_WritePin>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40010800 	.word	0x40010800

0800110c <BlinkyGreenVer>:
void BlinkyGreenVer(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
 8001110:	2110      	movs	r1, #16
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <BlinkyGreenVer+0x24>)
 8001114:	f000 ffcb 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2104      	movs	r1, #4
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <BlinkyGreenVer+0x24>)
 800111e:	f000 ffae 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2108      	movs	r1, #8
 8001126:	4802      	ldr	r0, [pc, #8]	; (8001130 <BlinkyGreenVer+0x24>)
 8001128:	f000 ffa9 	bl	800207e <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010800 	.word	0x40010800

08001134 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
 8001138:	2108      	movs	r1, #8
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <BlinkyYellowVer+0x24>)
 800113c:	f000 ffb7 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2104      	movs	r1, #4
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <BlinkyYellowVer+0x24>)
 8001146:	f000 ff9a 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <BlinkyYellowVer+0x24>)
 8001150:	f000 ff95 	bl	800207e <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010800 	.word	0x40010800

0800115c <BlinkyRedHor>:

void BlinkyRedHor(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
 8001160:	2120      	movs	r1, #32
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <BlinkyRedHor+0x24>)
 8001164:	f000 ffa3 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <BlinkyRedHor+0x24>)
 800116e:	f000 ff86 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	4802      	ldr	r0, [pc, #8]	; (8001180 <BlinkyRedHor+0x24>)
 8001178:	f000 ff81 	bl	800207e <HAL_GPIO_WritePin>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010800 	.word	0x40010800

08001184 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <BlinkyGreenHor+0x24>)
 800118c:	f000 ff8f 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <BlinkyGreenHor+0x24>)
 8001196:	f000 ff72 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4802      	ldr	r0, [pc, #8]	; (80011a8 <BlinkyGreenHor+0x24>)
 80011a0:	f000 ff6d 	bl	800207e <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40010800 	.word	0x40010800

080011ac <BlinkyYellowHor>:
void BlinkyYellowHor(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <BlinkyYellowHor+0x24>)
 80011b4:	f000 ff7b 	bl	80020ae <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2120      	movs	r1, #32
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <BlinkyYellowHor+0x24>)
 80011be:	f000 ff5e 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <BlinkyYellowHor+0x24>)
 80011c8:	f000 ff59 	bl	800207e <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010800 	.word	0x40010800

080011d4 <SetLed7Seg1On>:

void SetLed7Seg1On(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <SetLed7Seg1On+0x38>)
 80011e0:	f000 ff4d 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <SetLed7Seg1On+0x38>)
 80011ec:	f000 ff47 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <SetLed7Seg1On+0x38>)
 80011f8:	f000 ff41 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <SetLed7Seg1On+0x38>)
 8001204:	f000 ff3b 	bl	800207e <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010800 	.word	0x40010800

08001210 <SetLed7Seg2On>:
void SetLed7Seg2On(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <SetLed7Seg2On+0x38>)
 800121c:	f000 ff2f 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <SetLed7Seg2On+0x38>)
 8001228:	f000 ff29 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <SetLed7Seg2On+0x38>)
 8001234:	f000 ff23 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <SetLed7Seg2On+0x38>)
 8001240:	f000 ff1d 	bl	800207e <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010800 	.word	0x40010800

0800124c <SetLed7Seg3On>:
void SetLed7Seg3On(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <SetLed7Seg3On+0x38>)
 8001258:	f000 ff11 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <SetLed7Seg3On+0x38>)
 8001264:	f000 ff0b 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <SetLed7Seg3On+0x38>)
 8001270:	f000 ff05 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <SetLed7Seg3On+0x38>)
 800127c:	f000 feff 	bl	800207e <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010800 	.word	0x40010800

08001288 <SetLed7Seg4On>:
void SetLed7Seg4On(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <SetLed7Seg4On+0x38>)
 8001294:	f000 fef3 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <SetLed7Seg4On+0x38>)
 80012a0:	f000 feed 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <SetLed7Seg4On+0x38>)
 80012ac:	f000 fee7 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <SetLed7Seg4On+0x38>)
 80012b8:	f000 fee1 	bl	800207e <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010800 	.word	0x40010800

080012c4 <SetRedVerHor>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
}

void SetRedVerHor(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2104      	movs	r1, #4
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <SetRedVerHor+0x1c>)
 80012ce:	f000 fed6 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <SetRedVerHor+0x1c>)
 80012d8:	f000 fed1 	bl	800207e <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010800 	.word	0x40010800

080012e4 <SetOffVer>:


void SetOffVer(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2104      	movs	r1, #4
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <SetOffVer+0x28>)
 80012ee:	f000 fec6 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2110      	movs	r1, #16
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <SetOffVer+0x28>)
 80012f8:	f000 fec1 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2108      	movs	r1, #8
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <SetOffVer+0x28>)
 8001302:	f000 febc 	bl	800207e <HAL_GPIO_WritePin>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010800 	.word	0x40010800

08001310 <SetRedVer>:

void SetRedVer(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2104      	movs	r1, #4
 8001318:	4807      	ldr	r0, [pc, #28]	; (8001338 <SetRedVer+0x28>)
 800131a:	f000 feb0 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2110      	movs	r1, #16
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <SetRedVer+0x28>)
 8001324:	f000 feab 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2108      	movs	r1, #8
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <SetRedVer+0x28>)
 800132e:	f000 fea6 	bl	800207e <HAL_GPIO_WritePin>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010800 	.word	0x40010800

0800133c <SetGreenVer>:

void SetGreenVer(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <SetGreenVer+0x28>)
 8001346:	f000 fe9a 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <SetGreenVer+0x28>)
 8001350:	f000 fe95 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2108      	movs	r1, #8
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <SetGreenVer+0x28>)
 800135a:	f000 fe90 	bl	800207e <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40010800 	.word	0x40010800

08001368 <SetYellowVer>:

void SetYellowVer(){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2104      	movs	r1, #4
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <SetYellowVer+0x28>)
 8001372:	f000 fe84 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <SetYellowVer+0x28>)
 800137c:	f000 fe7f 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2108      	movs	r1, #8
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <SetYellowVer+0x28>)
 8001386:	f000 fe7a 	bl	800207e <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40010800 	.word	0x40010800

08001394 <SetOffHor>:


void SetOffHor(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2120      	movs	r1, #32
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <SetOffHor+0x28>)
 800139e:	f000 fe6e 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <SetOffHor+0x28>)
 80013a8:	f000 fe69 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <SetOffHor+0x28>)
 80013b2:	f000 fe64 	bl	800207e <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010800 	.word	0x40010800

080013c0 <SetRedHor>:

void SetRedHor(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2120      	movs	r1, #32
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <SetRedHor+0x28>)
 80013ca:	f000 fe58 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <SetRedHor+0x28>)
 80013d4:	f000 fe53 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <SetRedHor+0x28>)
 80013de:	f000 fe4e 	bl	800207e <HAL_GPIO_WritePin>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010800 	.word	0x40010800

080013ec <SetGreenHor>:

void SetGreenHor(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <SetGreenHor+0x28>)
 80013f6:	f000 fe42 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <SetGreenHor+0x28>)
 8001400:	f000 fe3d 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <SetGreenHor+0x28>)
 800140a:	f000 fe38 	bl	800207e <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010800 	.word	0x40010800

08001418 <SetYellowHor>:

void SetYellowHor(){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <SetYellowHor+0x28>)
 8001422:	f000 fe2c 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <SetYellowHor+0x28>)
 800142c:	f000 fe27 	bl	800207e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <SetYellowHor+0x28>)
 8001436:	f000 fe22 	bl	800207e <HAL_GPIO_WritePin>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010800 	.word	0x40010800

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fb18 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f828 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f8ae 	bl	80015b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001454:	f000 f860 	bl	8001518 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <main+0x54>)
 800145a:	f001 fa79 	bl	8002950 <HAL_TIM_Base_Start_IT>
  status_mode = INIT;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <main+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
//  status_ver = INIT;
//  status_hor = INIT;
  //int status_led7seg = 0;
  //int index_led = 0;
  setTimer1(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f000 f948 	bl	80016fc <setTimer1>
  setTimer2(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001470:	f000 f95e 	bl	8001730 <setTimer2>
  setTimer3(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001478:	f000 f974 	bl	8001764 <setTimer3>
  setTimer4(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001480:	f000 f98a 	bl	8001798 <setTimer4>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //fsm_for_input_processing();
	  fsm_mode_run();
 8001484:	f7fe ffda 	bl	800043c <fsm_mode_run>
	  fsm_automatic_1_run();
 8001488:	f7fe fe60 	bl	800014c <fsm_automatic_1_run>
	  fsm_automatic_2_run();
 800148c:	f7fe ff1a 	bl	80002c4 <fsm_automatic_2_run>
	  fsm_mode_led7seg();
 8001490:	f7ff f8f8 	bl	8000684 <fsm_mode_led7seg>
	  fsm_mode_run();
 8001494:	e7f6      	b.n	8001484 <main+0x40>
 8001496:	bf00      	nop
 8001498:	200000d4 	.word	0x200000d4
 800149c:	20000048 	.word	0x20000048

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fe06 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	2301      	movs	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	2310      	movs	r3, #16
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fe02 	bl	80020e0 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014e2:	f000 f8d5 	bl	8001690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f86e 	bl	80025e0 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800150a:	f000 f8c1 	bl	8001690 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3740      	adds	r7, #64	; 0x40
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM2_Init+0x94>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM2_Init+0x94>)
 800153e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_TIM2_Init+0x94>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM2_Init+0x94>)
 800154c:	2209      	movs	r2, #9
 800154e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM2_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_TIM2_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155c:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_TIM2_Init+0x94>)
 800155e:	f001 f9a7 	bl	80028b0 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 f892 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_TIM2_Init+0x94>)
 800157a:	f001 fb3d 	bl	8002bf8 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 f884 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM2_Init+0x94>)
 8001596:	f001 fd05 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f876 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000d4 	.word	0x200000d4

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <MX_GPIO_Init+0xd0>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_GPIO_Init+0xd0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 800160c:	2200      	movs	r2, #0
 800160e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <MX_GPIO_Init+0xd4>)
 8001614:	f000 fd33 	bl	800207e <HAL_GPIO_WritePin>
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001618:	2200      	movs	r2, #0
 800161a:	217f      	movs	r1, #127	; 0x7f
 800161c:	481a      	ldr	r0, [pc, #104]	; (8001688 <MX_GPIO_Init+0xd8>)
 800161e:	f000 fd2e 	bl	800207e <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001622:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_GPIO_Init+0xdc>)
 8001638:	f000 fb90 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_RED_VER_Pin LED_YELLOW_VER_Pin LED_GREEN_VER_Pin
                           LED_RED_HOR_Pin LED_YELLOW_HOR_Pin LED_GREEN_HOR_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 800163c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001640:	613b      	str	r3, [r7, #16]
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <MX_GPIO_Init+0xd4>)
 8001656:	f000 fb81 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin
                           LED_E_Pin LED_F_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800165a:	237f      	movs	r3, #127	; 0x7f
 800165c:	613b      	str	r3, [r7, #16]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2302      	movs	r3, #2
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_GPIO_Init+0xd8>)
 8001672:	f000 fb73 	bl	8001d5c <HAL_GPIO_Init>

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <clearTimer1+0x18>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <clearTimer1+0x1c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	200000bc 	.word	0x200000bc
 80016b8:	200000a0 	.word	0x200000a0

080016bc <clearTimer2>:
void clearTimer2(){
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <clearTimer2+0x18>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <clearTimer2+0x1c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	200000c0 	.word	0x200000c0
 80016d8:	200000a4 	.word	0x200000a4

080016dc <clearTimer3>:
void clearTimer3(){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <clearTimer3+0x18>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <clearTimer3+0x1c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	200000a8 	.word	0x200000a8

080016fc <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <setTimer1+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	fb92 f3f3 	sdiv	r3, r2, r3
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <setTimer1+0x2c>)
 8001710:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <setTimer1+0x30>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000001c 	.word	0x2000001c
 8001728:	200000bc 	.word	0x200000bc
 800172c:	200000a0 	.word	0x200000a0

08001730 <setTimer2>:

void setTimer2( int duration){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <setTimer2+0x28>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001742:	4a06      	ldr	r2, [pc, #24]	; (800175c <setTimer2+0x2c>)
 8001744:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <setTimer2+0x30>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000001c 	.word	0x2000001c
 800175c:	200000c0 	.word	0x200000c0
 8001760:	200000a4 	.word	0x200000a4

08001764 <setTimer3>:

void setTimer3( int duration){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <setTimer3+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	fb92 f3f3 	sdiv	r3, r2, r3
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <setTimer3+0x2c>)
 8001778:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <setTimer3+0x30>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000001c 	.word	0x2000001c
 8001790:	200000c4 	.word	0x200000c4
 8001794:	200000a8 	.word	0x200000a8

08001798 <setTimer4>:

void setTimer4( int duration){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <setTimer4+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <setTimer4+0x2c>)
 80017ac:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <setTimer4+0x30>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000001c 	.word	0x2000001c
 80017c4:	200000c8 	.word	0x200000c8
 80017c8:	200000ac 	.word	0x200000ac

080017cc <timerRun>:

void timerRun (){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <timerRun+0xec>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0b      	ble.n	80017f0 <timerRun+0x24>
		timer0_counter --;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <timerRun+0xec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <timerRun+0xec>)
 80017e0:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <timerRun+0xec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <timerRun+0x24>
			timer0_flag = 1;
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <timerRun+0xf0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <timerRun+0xf4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0b      	ble.n	8001810 <timerRun+0x44>
		timer1_counter--;
 80017f8:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <timerRun+0xf4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <timerRun+0xf4>)
 8001800:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <timerRun+0xf4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc02      	bgt.n	8001810 <timerRun+0x44>
			timer1_flag = 1;
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <timerRun+0xf8>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <timerRun+0xfc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timerRun+0x64>
		timer2_counter--;
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <timerRun+0xfc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a2a      	ldr	r2, [pc, #168]	; (80018c8 <timerRun+0xfc>)
 8001820:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <timerRun+0xfc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dc02      	bgt.n	8001830 <timerRun+0x64>
			timer2_flag = 1;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <timerRun+0x100>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <timerRun+0x104>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd0b      	ble.n	8001850 <timerRun+0x84>
		timer3_counter--;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <timerRun+0x104>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <timerRun+0x104>)
 8001840:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <timerRun+0x104>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	dc02      	bgt.n	8001850 <timerRun+0x84>
			timer3_flag = 1;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <timerRun+0x108>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <timerRun+0x10c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd0b      	ble.n	8001870 <timerRun+0xa4>
		timer4_counter--;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <timerRun+0x10c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <timerRun+0x10c>)
 8001860:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <timerRun+0x10c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dc02      	bgt.n	8001870 <timerRun+0xa4>
			timer4_flag = 1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <timerRun+0x110>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <timerRun+0x114>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dd0b      	ble.n	8001890 <timerRun+0xc4>
			timer5_counter--;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <timerRun+0x114>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <timerRun+0x114>)
 8001880:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <timerRun+0x114>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	dc02      	bgt.n	8001890 <timerRun+0xc4>
				timer5_flag = 1;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <timerRun+0x118>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <timerRun+0x11c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	dd0b      	ble.n	80018b0 <timerRun+0xe4>
			timer6_counter--;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <timerRun+0x11c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3b01      	subs	r3, #1
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <timerRun+0x11c>)
 80018a0:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <timerRun+0x11c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dc02      	bgt.n	80018b0 <timerRun+0xe4>
				timer6_flag = 1;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <timerRun+0x120>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
			}
		}
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	200000b8 	.word	0x200000b8
 80018bc:	2000009c 	.word	0x2000009c
 80018c0:	200000bc 	.word	0x200000bc
 80018c4:	200000a0 	.word	0x200000a0
 80018c8:	200000c0 	.word	0x200000c0
 80018cc:	200000a4 	.word	0x200000a4
 80018d0:	200000c4 	.word	0x200000c4
 80018d4:	200000a8 	.word	0x200000a8
 80018d8:	200000c8 	.word	0x200000c8
 80018dc:	200000ac 	.word	0x200000ac
 80018e0:	200000cc 	.word	0x200000cc
 80018e4:	200000b0 	.word	0x200000b0
 80018e8:	200000d0 	.word	0x200000d0
 80018ec:	200000b4 	.word	0x200000b4

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_MspInit+0x5c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x5c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_MspInit+0x60>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_MspInit+0x60>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000

08001954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d113      	bne.n	800198e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0x44>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_TIM_Base_MspInit+0x44>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_Base_MspInit+0x44>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	201c      	movs	r0, #28
 8001984:	f000 f9b3 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001988:	201c      	movs	r0, #28
 800198a:	f000 f9cc 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e2:	f000 f891 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM2_IRQHandler+0x10>)
 80019f2:	f000 fff9 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000d4 	.word	0x200000d4

08001a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d103      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8001a1e:	f7ff f8cb 	bl	8000bb8 <button_reading>
		timerRun();
 8001a22:	f7ff fed3 	bl	80017cc <timerRun>
		//getKeyInput();
	}
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	; (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a56:	f7ff ffd3 	bl	8001a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f001 fb0d 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7ff fcf1 	bl	8001444 <main>
  bx lr
 8001a62:	4770      	bx	lr
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001a6c:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 8001a70:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001a74:	20000120 	.word	0x20000120

08001a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_2_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x28>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f923 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff ff2a 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f93b 	bl	8001d42 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f903 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000020 	.word	0x20000020
 8001b00:	20000028 	.word	0x20000028
 8001b04:	20000024 	.word	0x20000024

08001b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_IncTick+0x1c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x20>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_IncTick+0x20>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000028 	.word	0x20000028
 8001b28:	2000011c 	.word	0x2000011c

08001b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_GetTick+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000011c 	.word	0x2000011c

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4906      	ldr	r1, [pc, #24]	; (8001bd8 <__NVIC_EnableIRQ+0x34>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff90 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff2d 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff42 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff90 	bl	8001c30 <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5f 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff35 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6e:	e148      	b.n	8002002 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d70:	2201      	movs	r2, #1
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8137 	bne.w	8001ffc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4aa3      	ldr	r2, [pc, #652]	; (8002020 <HAL_GPIO_Init+0x2c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d05e      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001d98:	4aa1      	ldr	r2, [pc, #644]	; (8002020 <HAL_GPIO_Init+0x2c4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d875      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001d9e:	4aa1      	ldr	r2, [pc, #644]	; (8002024 <HAL_GPIO_Init+0x2c8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d058      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001da4:	4a9f      	ldr	r2, [pc, #636]	; (8002024 <HAL_GPIO_Init+0x2c8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d86f      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001daa:	4a9f      	ldr	r2, [pc, #636]	; (8002028 <HAL_GPIO_Init+0x2cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d052      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001db0:	4a9d      	ldr	r2, [pc, #628]	; (8002028 <HAL_GPIO_Init+0x2cc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d869      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001db6:	4a9d      	ldr	r2, [pc, #628]	; (800202c <HAL_GPIO_Init+0x2d0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d04c      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a9b      	ldr	r2, [pc, #620]	; (800202c <HAL_GPIO_Init+0x2d0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d863      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dc2:	4a9b      	ldr	r2, [pc, #620]	; (8002030 <HAL_GPIO_Init+0x2d4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d046      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a99      	ldr	r2, [pc, #612]	; (8002030 <HAL_GPIO_Init+0x2d4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d85d      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d82a      	bhi.n	8001e28 <HAL_GPIO_Init+0xcc>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d859      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dd6:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <HAL_GPIO_Init+0x80>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e31 	.word	0x08001e31
 8001de4:	08001e43 	.word	0x08001e43
 8001de8:	08001e85 	.word	0x08001e85
 8001dec:	08001e8b 	.word	0x08001e8b
 8001df0:	08001e8b 	.word	0x08001e8b
 8001df4:	08001e8b 	.word	0x08001e8b
 8001df8:	08001e8b 	.word	0x08001e8b
 8001dfc:	08001e8b 	.word	0x08001e8b
 8001e00:	08001e8b 	.word	0x08001e8b
 8001e04:	08001e8b 	.word	0x08001e8b
 8001e08:	08001e8b 	.word	0x08001e8b
 8001e0c:	08001e8b 	.word	0x08001e8b
 8001e10:	08001e8b 	.word	0x08001e8b
 8001e14:	08001e8b 	.word	0x08001e8b
 8001e18:	08001e8b 	.word	0x08001e8b
 8001e1c:	08001e8b 	.word	0x08001e8b
 8001e20:	08001e39 	.word	0x08001e39
 8001e24:	08001e4d 	.word	0x08001e4d
 8001e28:	4a82      	ldr	r2, [pc, #520]	; (8002034 <HAL_GPIO_Init+0x2d8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e2e:	e02c      	b.n	8001e8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e029      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e024      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	3308      	adds	r3, #8
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e01f      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	330c      	adds	r3, #12
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e01a      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e013      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	611a      	str	r2, [r3, #16]
          break;
 8001e76:	e009      	b.n	8001e8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	615a      	str	r2, [r3, #20]
          break;
 8001e82:	e003      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          break;
 8001e8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2bff      	cmp	r3, #255	; 0xff
 8001e90:	d801      	bhi.n	8001e96 <HAL_GPIO_Init+0x13a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_Init+0x13e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d802      	bhi.n	8001ea8 <HAL_GPIO_Init+0x14c>
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x152>
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	3b08      	subs	r3, #8
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	6a39      	ldr	r1, [r7, #32]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8090 	beq.w	8001ffc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x2dc>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a55      	ldr	r2, [pc, #340]	; (8002038 <HAL_GPIO_Init+0x2dc>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_GPIO_Init+0x2dc>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef4:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a49      	ldr	r2, [pc, #292]	; (8002040 <HAL_GPIO_Init+0x2e4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1e0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a48      	ldr	r2, [pc, #288]	; (8002044 <HAL_GPIO_Init+0x2e8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1dc>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a47      	ldr	r2, [pc, #284]	; (8002048 <HAL_GPIO_Init+0x2ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1d8>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f34:	2303      	movs	r3, #3
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f4e:	493b      	ldr	r1, [pc, #236]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4933      	ldr	r1, [pc, #204]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	492d      	ldr	r1, [pc, #180]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4929      	ldr	r1, [pc, #164]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4923      	ldr	r1, [pc, #140]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	491f      	ldr	r1, [pc, #124]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	4919      	ldr	r1, [pc, #100]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4915      	ldr	r1, [pc, #84]	; (800204c <HAL_GPIO_Init+0x2f0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	3301      	adds	r3, #1
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f aeaf 	bne.w	8001d70 <HAL_GPIO_Init+0x14>
  }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	372c      	adds	r7, #44	; 0x2c
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	10320000 	.word	0x10320000
 8002024:	10310000 	.word	0x10310000
 8002028:	10220000 	.word	0x10220000
 800202c:	10210000 	.word	0x10210000
 8002030:	10120000 	.word	0x10120000
 8002034:	10110000 	.word	0x10110000
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000
 8002040:	40010800 	.word	0x40010800
 8002044:	40010c00 	.word	0x40010c00
 8002048:	40011000 	.word	0x40011000
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]
 800208a:	4613      	mov	r3, r2
 800208c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208e:	787b      	ldrb	r3, [r7, #1]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800209a:	e003      	b.n	80020a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	041a      	lsls	r2, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	041a      	lsls	r2, r3, #16
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	400b      	ands	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e26c      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	4b92      	ldr	r3, [pc, #584]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00c      	beq.n	8002126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210c:	4b8f      	ldr	r3, [pc, #572]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d112      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
 8002118:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d06c      	beq.n	800220c <HAL_RCC_OscConfig+0x12c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d168      	bne.n	800220c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e246      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x76>
 8002148:	4b80      	ldr	r3, [pc, #512]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7f      	ldr	r2, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b7b      	ldr	r3, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7a      	ldr	r2, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b78      	ldr	r3, [pc, #480]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a77      	ldr	r2, [pc, #476]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0xbc>
 8002182:	4b72      	ldr	r3, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a71      	ldr	r2, [pc, #452]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 800219c:	4b6b      	ldr	r3, [pc, #428]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fcb6 	bl	8001b2c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fcb2 	bl	8001b2c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1fa      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe4>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fca2 	bl	8001b2c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fc9e 	bl	8001b2c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1e6      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x10c>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1ba      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4939      	ldr	r1, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x270>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fc57 	bl	8001b2c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff fc53 	bl	8001b2c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e19b      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4927      	ldr	r1, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x270>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fc36 	bl	8001b2c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7ff fc32 	bl	8001b2c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e17a      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03a      	beq.n	8002364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fc16 	bl	8001b2c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff fc12 	bl	8001b2c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e15a      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f000 faa6 	bl	8002874 <RCC_Delay>
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_RCC_OscConfig+0x274>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff fbfc 	bl	8001b2c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002336:	e00f      	b.n	8002358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff fbf8 	bl	8001b2c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d908      	bls.n	8002358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e140      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	42420000 	.word	0x42420000
 8002354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b9e      	ldr	r3, [pc, #632]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e9      	bne.n	8002338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a6 	beq.w	80024be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b97      	ldr	r3, [pc, #604]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b94      	ldr	r3, [pc, #592]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a93      	ldr	r2, [pc, #588]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]
 800238e:	4b91      	ldr	r3, [pc, #580]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8a      	ldr	r2, [pc, #552]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fbb9 	bl	8001b2c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff fbb5 	bl	8001b2c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0fd      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x312>
 80023e4:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x334>
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a72      	ldr	r2, [pc, #456]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x356>
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a6c      	ldr	r2, [pc, #432]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a69      	ldr	r2, [pc, #420]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002436:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a66      	ldr	r2, [pc, #408]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a63      	ldr	r2, [pc, #396]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff fb69 	bl	8001b2c <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff fb65 	bl	8001b2c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0ab      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b57      	ldr	r3, [pc, #348]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x37e>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff fb53 	bl	8001b2c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff fb4f 	bl	8001b2c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e095      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b48      	ldr	r3, [pc, #288]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8081 	beq.w	80025ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d061      	beq.n	8002598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d146      	bne.n	800256a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff fb23 	bl	8001b2c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7ff fb1f 	bl	8001b2c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e067      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	492d      	ldr	r1, [pc, #180]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a19      	ldr	r1, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	430b      	orrs	r3, r1
 8002536:	4927      	ldr	r1, [pc, #156]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff faf3 	bl	8001b2c <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff faef 	bl	8001b2c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e037      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x46a>
 8002568:	e02f      	b.n	80025ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fadc 	bl	8001b2c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff fad8 	bl	8001b2c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e020      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x498>
 8002596:	e018      	b.n	80025ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e013      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40007000 	.word	0x40007000
 80025dc:	42420060 	.word	0x42420060

080025e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4965      	ldr	r1, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800265e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7ff fa2c 	bl	8001b2c <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7ff fa28 	bl	8001b2c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1cc>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f98a 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	080030f8 	.word	0x080030f8
 80027ac:	20000020 	.word	0x20000020
 80027b0:	20000024 	.word	0x20000024

080027b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b490      	push	{r4, r7}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027bc:	1d3c      	adds	r4, r7, #4
 80027be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027c4:	f240 2301 	movw	r3, #513	; 0x201
 80027c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x46>
 80027f2:	e02d      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f6:	623b      	str	r3, [r7, #32]
      break;
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800280c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c5b      	lsrs	r3, r3, #17
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002826:	4413      	add	r3, r2
 8002828:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800282c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	fb02 f203 	mul.w	r2, r2, r3
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e004      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	623b      	str	r3, [r7, #32]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	6a3b      	ldr	r3, [r7, #32]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc90      	pop	{r4, r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	080030e8 	.word	0x080030e8
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	003d0900 	.word	0x003d0900

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000020 	.word	0x20000020
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e041      	b.n	8002946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f83c 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 fa6a 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e035      	b.n	80029d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x4e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d004      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x4e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_TIM_Base_Start_IT+0x94>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d010      	beq.n	80029d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	e007      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9b1 	bl	8002d92 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9a4 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9b3 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0204 	mvn.w	r2, #4
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f987 	bl	8002d92 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f97a 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f989 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0208 	mvn.w	r2, #8
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f95d 	bl	8002d92 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f950 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f95f 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f933 	bl	8002d92 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f926 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f935 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0201 	mvn.w	r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe ff50 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa67 	bl	8003066 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8f9 	bl	8002db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0220 	mvn.w	r2, #32
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa32 	bl	8003054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_ConfigClockSource+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0b3      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x180>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d03e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xd0>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	f200 8087 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	f000 8085 	beq.w	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d87f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d01a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0xa2>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d87b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c68:	2b60      	cmp	r3, #96	; 0x60
 8002c6a:	d050      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x116>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d877      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c70:	2b50      	cmp	r3, #80	; 0x50
 8002c72:	d03c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xf6>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d873      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d058      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x136>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d86f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c80:	2b30      	cmp	r3, #48	; 0x30
 8002c82:	d064      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d86b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d060      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d867      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d05a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c98:	e062      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f000 f95c 	bl	8002f66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04e      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 f945 	bl	8002f66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e03b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8bc 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	; 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f913 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e02b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f8da 	bl	8002ed4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	; 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f903 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e01b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 f89c 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f8f3 	bl	8002f32 <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 f8ea 	bl	8002f32 <TIM_ITRx_SetConfig>
        break;
 8002d5e:	e002      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <TIM_Base_SetConfig+0xa8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x28>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x28>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <TIM_Base_SetConfig+0xac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <TIM_Base_SetConfig+0xa8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0x52>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0x52>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <TIM_Base_SetConfig+0xac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d108      	bne.n	8002e2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <TIM_Base_SetConfig+0xa8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d103      	bne.n	8002e60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	615a      	str	r2, [r3, #20]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400

08002e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0201 	bic.w	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f023 030a 	bic.w	r3, r3, #10
 8002eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f023 0210 	bic.w	r2, r3, #16
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	031b      	lsls	r3, r3, #12
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f043 0307 	orr.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	021a      	lsls	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	609a      	str	r2, [r3, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e041      	b.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d009      	beq.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d004      	beq.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10c      	bne.n	800302e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40000400 	.word	0x40000400

08003054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2600      	movs	r6, #0
 800307c:	4d0c      	ldr	r5, [pc, #48]	; (80030b0 <__libc_init_array+0x38>)
 800307e:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 8003080:	1b64      	subs	r4, r4, r5
 8003082:	10a4      	asrs	r4, r4, #2
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	f000 f822 	bl	80030d0 <_init>
 800308c:	2600      	movs	r6, #0
 800308e:	4d0a      	ldr	r5, [pc, #40]	; (80030b8 <__libc_init_array+0x40>)
 8003090:	4c0a      	ldr	r4, [pc, #40]	; (80030bc <__libc_init_array+0x44>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003108 	.word	0x08003108
 80030b4:	08003108 	.word	0x08003108
 80030b8:	08003108 	.word	0x08003108
 80030bc:	0800310c 	.word	0x0800310c

080030c0 <memset>:
 80030c0:	4603      	mov	r3, r0
 80030c2:	4402      	add	r2, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
