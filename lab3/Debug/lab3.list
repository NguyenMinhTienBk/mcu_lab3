
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800296c  0800296c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800296c  0800296c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800296c  0800296c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  080029a0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080029a0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c51  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  00029ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c51  00000000  00000000  0002cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c065  00000000  00000000  0002ea21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008252e  00000000  00000000  0003aa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bcfb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  000bd008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002934 	.word	0x08002934

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002934 	.word	0x08002934

0800014c <fsm_automatic_1_run>:

//int timeTimer(int time){
//	return time * 1000;
//}

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_1){
 8000150:	4b39      	ldr	r3, [pc, #228]	; (8000238 <fsm_automatic_1_run+0xec>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b03      	cmp	r3, #3
 8000156:	d86b      	bhi.n	8000230 <fsm_automatic_1_run+0xe4>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000171 	.word	0x08000171
 8000164:	0800019b 	.word	0x0800019b
 8000168:	080001cd 	.word	0x080001cd
 800016c:	080001ff 	.word	0x080001ff
	case INIT:

		SetOffVer();
 8000170:	f000 fd80 	bl	8000c74 <SetOffVer>
		status_1 = AUTO_RED;
 8000174:	4b30      	ldr	r3, [pc, #192]	; (8000238 <fsm_automatic_1_run+0xec>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
		led12 = timered;
 800017a:	4b30      	ldr	r3, [pc, #192]	; (800023c <fsm_automatic_1_run+0xf0>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a30      	ldr	r2, [pc, #192]	; (8000240 <fsm_automatic_1_run+0xf4>)
 8000180:	6013      	str	r3, [r2, #0]
		//display7SEGLED12(led12);
		//setTimer3(1000);
		display7Seg_countdown_Led12();
 8000182:	f000 fc65 	bl	8000a50 <display7Seg_countdown_Led12>
		//temp = timeredver * 1000;
		setTimer1(timeTimer(timered));
 8000186:	4b2d      	ldr	r3, [pc, #180]	; (800023c <fsm_automatic_1_run+0xf0>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4618      	mov	r0, r3
 800018c:	f000 f860 	bl	8000250 <timeTimer>
 8000190:	4603      	mov	r3, r0
 8000192:	4618      	mov	r0, r3
 8000194:	f000 ff3e 	bl	8001014 <setTimer1>
		break;
 8000198:	e04b      	b.n	8000232 <fsm_automatic_1_run+0xe6>
	case AUTO_RED:
		SetRedVer();
 800019a:	f000 fd81 	bl	8000ca0 <SetRedVer>
		if (timer1_flag == 1){
 800019e:	4b29      	ldr	r3, [pc, #164]	; (8000244 <fsm_automatic_1_run+0xf8>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d10f      	bne.n	80001c6 <fsm_automatic_1_run+0x7a>
			status_1 = AUTO_GREEN;
 80001a6:	4b24      	ldr	r3, [pc, #144]	; (8000238 <fsm_automatic_1_run+0xec>)
 80001a8:	2202      	movs	r2, #2
 80001aa:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001ac:	4b26      	ldr	r3, [pc, #152]	; (8000248 <fsm_automatic_1_run+0xfc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a23      	ldr	r2, [pc, #140]	; (8000240 <fsm_automatic_1_run+0xf4>)
 80001b2:	6013      	str	r3, [r2, #0]
			//display7SEGLED12(led12);
			setTimer1(timeTimer(timegreen));
 80001b4:	4b24      	ldr	r3, [pc, #144]	; (8000248 <fsm_automatic_1_run+0xfc>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 f849 	bl	8000250 <timeTimer>
 80001be:	4603      	mov	r3, r0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 ff27 	bl	8001014 <setTimer1>
		}

		display7Seg_countdown_Led12();
 80001c6:	f000 fc43 	bl	8000a50 <display7Seg_countdown_Led12>
//		if (isButton1flag() == 1){
//			status = MAN_RED;
//			setTimer1(1000);
//		}

		break;
 80001ca:	e032      	b.n	8000232 <fsm_automatic_1_run+0xe6>
	case AUTO_GREEN:

		SetGreenVer();
 80001cc:	f000 fd7e 	bl	8000ccc <SetGreenVer>
		if (timer1_flag == 1){
 80001d0:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <fsm_automatic_1_run+0xf8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d10f      	bne.n	80001f8 <fsm_automatic_1_run+0xac>
			status_1 = AUTO_YELLOW;
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <fsm_automatic_1_run+0xec>)
 80001da:	2203      	movs	r2, #3
 80001dc:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <fsm_automatic_1_run+0x100>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a17      	ldr	r2, [pc, #92]	; (8000240 <fsm_automatic_1_run+0xf4>)
 80001e4:	6013      	str	r3, [r2, #0]
			//display7SEGLED12(led12);
			setTimer1(timeTimer(timeyellow));
 80001e6:	4b19      	ldr	r3, [pc, #100]	; (800024c <fsm_automatic_1_run+0x100>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f830 	bl	8000250 <timeTimer>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 ff0e 	bl	8001014 <setTimer1>
		}
		display7Seg_countdown_Led12();
 80001f8:	f000 fc2a 	bl	8000a50 <display7Seg_countdown_Led12>
//		if (isButton1flag() == 1){
//			status = MAN_GREEN;
//			setTimer1(1000);
//		}

		break;
 80001fc:	e019      	b.n	8000232 <fsm_automatic_1_run+0xe6>
	case AUTO_YELLOW:

		SetYellowVer();
 80001fe:	f000 fd7b 	bl	8000cf8 <SetYellowVer>
		if (timer1_flag == 1){
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <fsm_automatic_1_run+0xf8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d10f      	bne.n	800022a <fsm_automatic_1_run+0xde>
			status_1 = AUTO_RED;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <fsm_automatic_1_run+0xec>)
 800020c:	2201      	movs	r2, #1
 800020e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <fsm_automatic_1_run+0xf0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <fsm_automatic_1_run+0xf4>)
 8000216:	6013      	str	r3, [r2, #0]
			//display7SEGLED12(led12);
			setTimer1(timeTimer(timered));
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <fsm_automatic_1_run+0xf0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f817 	bl	8000250 <timeTimer>
 8000222:	4603      	mov	r3, r0
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fef5 	bl	8001014 <setTimer1>
		}
		display7Seg_countdown_Led12();
 800022a:	f000 fc11 	bl	8000a50 <display7Seg_countdown_Led12>
//		if (isButton1flag() == 1){
//			//button1_flag = 0;
//			status = MAN_YELLOW;
//			setTimer1(1000);
//		}
		break;
 800022e:	e000      	b.n	8000232 <fsm_automatic_1_run+0xe6>
	default:
		break;
 8000230:	bf00      	nop
	}

}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000048 	.word	0x20000048
 800023c:	20000000 	.word	0x20000000
 8000240:	20000050 	.word	0x20000050
 8000244:	20000088 	.word	0x20000088
 8000248:	20000004 	.word	0x20000004
 800024c:	20000008 	.word	0x20000008

08000250 <timeTimer>:
 */

#include "fsm_automatic_2.h"
//int temp = 0;

int timeTimer(int time){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	return time * 1000;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800025e:	fb02 f303 	mul.w	r3, r2, r3
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <fsm_automatic_2_run>:

void fsm_automatic_2_run(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	switch (status_2){
 8000270:	4b39      	ldr	r3, [pc, #228]	; (8000358 <fsm_automatic_2_run+0xec>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d86b      	bhi.n	8000350 <fsm_automatic_2_run+0xe4>
 8000278:	a201      	add	r2, pc, #4	; (adr r2, 8000280 <fsm_automatic_2_run+0x14>)
 800027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027e:	bf00      	nop
 8000280:	08000291 	.word	0x08000291
 8000284:	080002bb 	.word	0x080002bb
 8000288:	080002ed 	.word	0x080002ed
 800028c:	0800031f 	.word	0x0800031f
	case INIT:
		SetOffHor();
 8000290:	f000 fd48 	bl	8000d24 <SetOffHor>
		status_2 = AUTO_GREEN;
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <fsm_automatic_2_run+0xec>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
		//temp = timeredver * 1000;
		led34 = timegreen;
 800029a:	4b30      	ldr	r3, [pc, #192]	; (800035c <fsm_automatic_2_run+0xf0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a30      	ldr	r2, [pc, #192]	; (8000360 <fsm_automatic_2_run+0xf4>)
 80002a0:	6013      	str	r3, [r2, #0]
		display7Seg_countdown_Led34();
 80002a2:	f000 fbef 	bl	8000a84 <display7Seg_countdown_Led34>
		setTimer2(timeTimer(timegreen));
 80002a6:	4b2d      	ldr	r3, [pc, #180]	; (800035c <fsm_automatic_2_run+0xf0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffd0 	bl	8000250 <timeTimer>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fec8 	bl	8001048 <setTimer2>
		break;
 80002b8:	e04b      	b.n	8000352 <fsm_automatic_2_run+0xe6>
	case AUTO_RED :
		SetRedHor();
 80002ba:	f000 fd49 	bl	8000d50 <SetRedHor>
		if (timer2_flag == 1){
 80002be:	4b29      	ldr	r3, [pc, #164]	; (8000364 <fsm_automatic_2_run+0xf8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d10f      	bne.n	80002e6 <fsm_automatic_2_run+0x7a>
			status_2 = AUTO_GREEN;
 80002c6:	4b24      	ldr	r3, [pc, #144]	; (8000358 <fsm_automatic_2_run+0xec>)
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <fsm_automatic_2_run+0xf0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <fsm_automatic_2_run+0xf4>)
 80002d2:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <fsm_automatic_2_run+0xf0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffb9 	bl	8000250 <timeTimer>
 80002de:	4603      	mov	r3, r0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 feb1 	bl	8001048 <setTimer2>
		}
		display7Seg_countdown_Led34();
 80002e6:	f000 fbcd 	bl	8000a84 <display7Seg_countdown_Led34>
//		if (isButton1flag() == 1){
//			status = MAN_RED;
//			setTimer1(1000);
//		}

		break;
 80002ea:	e032      	b.n	8000352 <fsm_automatic_2_run+0xe6>
	case AUTO_GREEN:

		SetGreenHor();
 80002ec:	f000 fd46 	bl	8000d7c <SetGreenHor>
		if (timer2_flag == 1){
 80002f0:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <fsm_automatic_2_run+0xf8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d10f      	bne.n	8000318 <fsm_automatic_2_run+0xac>
			status_2 = AUTO_YELLOW;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <fsm_automatic_2_run+0xec>)
 80002fa:	2203      	movs	r2, #3
 80002fc:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <fsm_automatic_2_run+0xfc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <fsm_automatic_2_run+0xf4>)
 8000304:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <fsm_automatic_2_run+0xfc>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ffa0 	bl	8000250 <timeTimer>
 8000310:	4603      	mov	r3, r0
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fe98 	bl	8001048 <setTimer2>
		}
		display7Seg_countdown_Led34();
 8000318:	f000 fbb4 	bl	8000a84 <display7Seg_countdown_Led34>
//		if (isButton1flag() == 1){
//			status = MAN_GREEN;
//			setTimer1(1000);
//		}

		break;
 800031c:	e019      	b.n	8000352 <fsm_automatic_2_run+0xe6>
	case AUTO_YELLOW:
		SetYellowHor();
 800031e:	f000 fd43 	bl	8000da8 <SetYellowHor>
		if (timer2_flag == 1){
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <fsm_automatic_2_run+0xf8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10f      	bne.n	800034a <fsm_automatic_2_run+0xde>
			status_2 = AUTO_RED;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <fsm_automatic_2_run+0xec>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
			led34 = timered;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <fsm_automatic_2_run+0x100>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <fsm_automatic_2_run+0xf4>)
 8000336:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <fsm_automatic_2_run+0x100>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff87 	bl	8000250 <timeTimer>
 8000342:	4603      	mov	r3, r0
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fe7f 	bl	8001048 <setTimer2>
		}
		display7Seg_countdown_Led34();
 800034a:	f000 fb9b 	bl	8000a84 <display7Seg_countdown_Led34>
//		if (isButton1flag() == 1){
//			//button1_flag = 0;
//			status = MAN_YELLOW;
//			setTimer1(1000);
//		}
		break;
 800034e:	e000      	b.n	8000352 <fsm_automatic_2_run+0xe6>
	default:
		break;
 8000350:	bf00      	nop
	}

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000004c 	.word	0x2000004c
 800035c:	20000004 	.word	0x20000004
 8000360:	20000054 	.word	0x20000054
 8000364:	2000008c 	.word	0x2000008c
 8000368:	20000008 	.word	0x20000008
 800036c:	20000000 	.word	0x20000000

08000370 <is_button_pressed>:
		return 1;
	}
	return 0;
}

unsigned char is_button_pressed(uint8_t index){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d901      	bls.n	8000384 <is_button_pressed+0x14>
 8000380:	2300      	movs	r3, #0
 8000382:	e007      	b.n	8000394 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <is_button_pressed+0x30>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b00      	cmp	r3, #0
 800038c:	bf0c      	ite	eq
 800038e:	2301      	moveq	r3, #1
 8000390:	2300      	movne	r3, #0
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	20000058 	.word	0x20000058

080003a4 <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d901      	bls.n	80003b8 <is_button_pressed_3s+0x14>
 80003b4:	23ff      	movs	r3, #255	; 0xff
 80003b6:	e007      	b.n	80003c8 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <is_button_pressed_3s+0x30>)
 80003bc:	5cd3      	ldrb	r3, [r2, r3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	b2db      	uxtb	r3, r3
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	20000068 	.word	0x20000068

080003d8 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_3_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
void fsm_for_input_processing(uint8_t index ){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a51      	ldr	r2, [pc, #324]	; (800052c <fsm_for_input_processing+0x154>)
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d069      	beq.n	80004c0 <fsm_for_input_processing+0xe8>
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	f300 8099 	bgt.w	8000524 <fsm_for_input_processing+0x14c>
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <fsm_for_input_processing+0x24>
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d01a      	beq.n	8000430 <fsm_for_input_processing+0x58>
					}
				}

			break ;
	}
}
 80003fa:	e093      	b.n	8000524 <fsm_for_input_processing+0x14c>
			if( is_button_pressed(index)){
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ffb6 	bl	8000370 <is_button_pressed>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	f000 8089 	beq.w	800051e <fsm_for_input_processing+0x146>
				buttonState[index] = BUTTON_PRESSED ;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4a47      	ldr	r2, [pc, #284]	; (800052c <fsm_for_input_processing+0x154>)
 8000410:	2101      	movs	r1, #1
 8000412:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a46      	ldr	r2, [pc, #280]	; (8000530 <fsm_for_input_processing+0x158>)
 8000418:	2100      	movs	r1, #0
 800041a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a44      	ldr	r2, [pc, #272]	; (8000534 <fsm_for_input_processing+0x15c>)
 8000422:	2100      	movs	r1, #0
 8000424:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a43      	ldr	r2, [pc, #268]	; (8000538 <fsm_for_input_processing+0x160>)
 800042a:	2101      	movs	r1, #1
 800042c:	54d1      	strb	r1, [r2, r3]
			break ;
 800042e:	e076      	b.n	800051e <fsm_for_input_processing+0x146>
			if (!is_button_pressed(index)){
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff9c 	bl	8000370 <is_button_pressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10d      	bne.n	800045a <fsm_for_input_processing+0x82>
				buttonState[index] =	 BUTTON_RELEASED ;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4a3a      	ldr	r2, [pc, #232]	; (800052c <fsm_for_input_processing+0x154>)
 8000442:	2100      	movs	r1, #0
 8000444:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4a3b      	ldr	r2, [pc, #236]	; (8000538 <fsm_for_input_processing+0x160>)
 800044a:	2100      	movs	r1, #0
 800044c:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4a37      	ldr	r2, [pc, #220]	; (8000530 <fsm_for_input_processing+0x158>)
 8000452:	2100      	movs	r1, #0
 8000454:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000458:	e063      	b.n	8000522 <fsm_for_input_processing+0x14a>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	4a34      	ldr	r2, [pc, #208]	; (8000530 <fsm_for_input_processing+0x158>)
 800045e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000462:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000466:	d209      	bcs.n	800047c <fsm_for_input_processing+0xa4>
						counterForButtonPress1s[index]++;
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4a31      	ldr	r2, [pc, #196]	; (8000530 <fsm_for_input_processing+0x158>)
 800046c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000470:	3201      	adds	r2, #1
 8000472:	b291      	uxth	r1, r2
 8000474:	4a2e      	ldr	r2, [pc, #184]	; (8000530 <fsm_for_input_processing+0x158>)
 8000476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800047a:	e011      	b.n	80004a0 <fsm_for_input_processing+0xc8>
					flagForButtonPress1s[index] = 1;
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4a2d      	ldr	r2, [pc, #180]	; (8000534 <fsm_for_input_processing+0x15c>)
 8000480:	2101      	movs	r1, #1
 8000482:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <fsm_for_input_processing+0x160>)
 8000488:	2101      	movs	r1, #1
 800048a:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4a2b      	ldr	r2, [pc, #172]	; (800053c <fsm_for_input_processing+0x164>)
 8000490:	2100      	movs	r1, #0
 8000492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4a25      	ldr	r2, [pc, #148]	; (8000530 <fsm_for_input_processing+0x158>)
 800049a:	2100      	movs	r1, #0
 800049c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff7e 	bl	80003a4 <is_button_pressed_3s>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d039      	beq.n	8000522 <fsm_for_input_processing+0x14a>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_3_SECOND ;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	4a1e      	ldr	r2, [pc, #120]	; (800052c <fsm_for_input_processing+0x154>)
 80004b2:	2102      	movs	r1, #2
 80004b4:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <fsm_for_input_processing+0x15c>)
 80004ba:	2100      	movs	r1, #0
 80004bc:	54d1      	strb	r1, [r2, r3]
			break ;
 80004be:	e030      	b.n	8000522 <fsm_for_input_processing+0x14a>
			if (! is_button_pressed(index)){
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff54 	bl	8000370 <is_button_pressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10d      	bne.n	80004ea <fsm_for_input_processing+0x112>
				buttonState[index] = BUTTON_RELEASED;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4a16      	ldr	r2, [pc, #88]	; (800052c <fsm_for_input_processing+0x154>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <fsm_for_input_processing+0x160>)
 80004da:	2100      	movs	r1, #0
 80004dc:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <fsm_for_input_processing+0x164>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 80004e8:	e01c      	b.n	8000524 <fsm_for_input_processing+0x14c>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <fsm_for_input_processing+0x164>)
 80004ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f2:	2b63      	cmp	r3, #99	; 0x63
 80004f4:	d809      	bhi.n	800050a <fsm_for_input_processing+0x132>
							counterForButtonAfterPress1s[index]++;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <fsm_for_input_processing+0x164>)
 80004fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004fe:	3201      	adds	r2, #1
 8000500:	b291      	uxth	r1, r2
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <fsm_for_input_processing+0x164>)
 8000504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000508:	e00c      	b.n	8000524 <fsm_for_input_processing+0x14c>
						flagForButton[index] = 1;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <fsm_for_input_processing+0x160>)
 800050e:	2101      	movs	r1, #1
 8000510:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <fsm_for_input_processing+0x164>)
 8000516:	2100      	movs	r1, #0
 8000518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 800051c:	e002      	b.n	8000524 <fsm_for_input_processing+0x14c>
			break ;
 800051e:	bf00      	nop
 8000520:	e000      	b.n	8000524 <fsm_for_input_processing+0x14c>
			break ;
 8000522:	bf00      	nop
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000080 	.word	0x20000080
 8000530:	20000070 	.word	0x20000070
 8000534:	20000068 	.word	0x20000068
 8000538:	2000006c 	.word	0x2000006c
 800053c:	20000078 	.word	0x20000078

08000540 <button_reading>:




void button_reading(void){
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000546:	2300      	movs	r3, #0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	e054      	b.n	80005f6 <button_reading+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800054c:	79fa      	ldrb	r2, [r7, #7]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	492d      	ldr	r1, [pc, #180]	; (8000608 <button_reading+0xc8>)
 8000552:	5c89      	ldrb	r1, [r1, r2]
 8000554:	4a2d      	ldr	r2, [pc, #180]	; (800060c <button_reading+0xcc>)
 8000556:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	492c      	ldr	r1, [pc, #176]	; (8000610 <button_reading+0xd0>)
 800055e:	5c89      	ldrb	r1, [r1, r2]
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <button_reading+0xc8>)
 8000562:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d01c      	beq.n	80005a4 <button_reading+0x64>
 800056a:	2b02      	cmp	r3, #2
 800056c:	dc25      	bgt.n	80005ba <button_reading+0x7a>
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <button_reading+0x38>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00b      	beq.n	800058e <button_reading+0x4e>
			  break;
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			  break;
		  default:
			  break;
 8000576:	e020      	b.n	80005ba <button_reading+0x7a>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000578:	79fc      	ldrb	r4, [r7, #7]
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	4825      	ldr	r0, [pc, #148]	; (8000614 <button_reading+0xd4>)
 8000580:	f001 f9b0 	bl	80018e4 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <button_reading+0xd0>)
 800058a:	551a      	strb	r2, [r3, r4]
			  break;
 800058c:	e016      	b.n	80005bc <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800058e:	79fc      	ldrb	r4, [r7, #7]
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	481f      	ldr	r0, [pc, #124]	; (8000614 <button_reading+0xd4>)
 8000596:	f001 f9a5 	bl	80018e4 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <button_reading+0xd0>)
 80005a0:	551a      	strb	r2, [r3, r4]
			  break;
 80005a2:	e00b      	b.n	80005bc <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80005a4:	79fc      	ldrb	r4, [r7, #7]
 80005a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005aa:	481a      	ldr	r0, [pc, #104]	; (8000614 <button_reading+0xd4>)
 80005ac:	f001 f99a 	bl	80018e4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <button_reading+0xd0>)
 80005b6:	551a      	strb	r2, [r3, r4]
			  break;
 80005b8:	e000      	b.n	80005bc <button_reading+0x7c>
			  break;
 80005ba:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <button_reading+0xd0>)
 80005c0:	5cd2      	ldrb	r2, [r2, r3]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4910      	ldr	r1, [pc, #64]	; (8000608 <button_reading+0xc8>)
 80005c6:	5ccb      	ldrb	r3, [r1, r3]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d111      	bne.n	80005f0 <button_reading+0xb0>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <button_reading+0xc8>)
 80005d0:	5cd2      	ldrb	r2, [r2, r3]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <button_reading+0xcc>)
 80005d6:	5ccb      	ldrb	r3, [r1, r3]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d109      	bne.n	80005f0 <button_reading+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <button_reading+0xcc>)
 80005e2:	5c89      	ldrb	r1, [r1, r2]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <button_reading+0xd8>)
 80005e6:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fef4 	bl	80003d8 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	3301      	adds	r3, #1
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d9a7      	bls.n	800054c <button_reading+0xc>
		  }

	}
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bd90      	pop	{r4, r7, pc}
 8000606:	bf00      	nop
 8000608:	20000060 	.word	0x20000060
 800060c:	20000064 	.word	0x20000064
 8000610:	2000005c 	.word	0x2000005c
 8000614:	40011000 	.word	0x40011000
 8000618:	20000058 	.word	0x20000058

0800061c <display7SEG>:
#include "led_display.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7SEG(int num){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b09      	cmp	r3, #9
 8000628:	f200 8180 	bhi.w	800092c <display7SEG+0x310>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <display7SEG+0x18>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	0800065d 	.word	0x0800065d
 8000638:	080006a5 	.word	0x080006a5
 800063c:	080006ed 	.word	0x080006ed
 8000640:	08000735 	.word	0x08000735
 8000644:	0800077d 	.word	0x0800077d
 8000648:	080007c5 	.word	0x080007c5
 800064c:	0800080d 	.word	0x0800080d
 8000650:	08000855 	.word	0x08000855
 8000654:	0800089d 	.word	0x0800089d
 8000658:	080008e5 	.word	0x080008e5
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	48c6      	ldr	r0, [pc, #792]	; (800097c <display7SEG+0x360>)
 8000662:	f001 f956 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2102      	movs	r1, #2
 800066a:	48c4      	ldr	r0, [pc, #784]	; (800097c <display7SEG+0x360>)
 800066c:	f001 f951 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	48c1      	ldr	r0, [pc, #772]	; (800097c <display7SEG+0x360>)
 8000676:	f001 f94c 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	48bf      	ldr	r0, [pc, #764]	; (800097c <display7SEG+0x360>)
 8000680:	f001 f947 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	48bc      	ldr	r0, [pc, #752]	; (800097c <display7SEG+0x360>)
 800068a:	f001 f942 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	48ba      	ldr	r0, [pc, #744]	; (800097c <display7SEG+0x360>)
 8000694:	f001 f93d 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	48b7      	ldr	r0, [pc, #732]	; (800097c <display7SEG+0x360>)
 800069e:	f001 f938 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 80006a2:	e167      	b.n	8000974 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2101      	movs	r1, #1
 80006a8:	48b4      	ldr	r0, [pc, #720]	; (800097c <display7SEG+0x360>)
 80006aa:	f001 f932 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	48b2      	ldr	r0, [pc, #712]	; (800097c <display7SEG+0x360>)
 80006b4:	f001 f92d 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2104      	movs	r1, #4
 80006bc:	48af      	ldr	r0, [pc, #700]	; (800097c <display7SEG+0x360>)
 80006be:	f001 f928 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	48ad      	ldr	r0, [pc, #692]	; (800097c <display7SEG+0x360>)
 80006c8:	f001 f923 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	48aa      	ldr	r0, [pc, #680]	; (800097c <display7SEG+0x360>)
 80006d2:	f001 f91e 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	48a8      	ldr	r0, [pc, #672]	; (800097c <display7SEG+0x360>)
 80006dc:	f001 f919 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	48a5      	ldr	r0, [pc, #660]	; (800097c <display7SEG+0x360>)
 80006e6:	f001 f914 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 80006ea:	e143      	b.n	8000974 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	48a2      	ldr	r0, [pc, #648]	; (800097c <display7SEG+0x360>)
 80006f2:	f001 f90e 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2102      	movs	r1, #2
 80006fa:	48a0      	ldr	r0, [pc, #640]	; (800097c <display7SEG+0x360>)
 80006fc:	f001 f909 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	489d      	ldr	r0, [pc, #628]	; (800097c <display7SEG+0x360>)
 8000706:	f001 f904 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2108      	movs	r1, #8
 800070e:	489b      	ldr	r0, [pc, #620]	; (800097c <display7SEG+0x360>)
 8000710:	f001 f8ff 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	4898      	ldr	r0, [pc, #608]	; (800097c <display7SEG+0x360>)
 800071a:	f001 f8fa 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2120      	movs	r1, #32
 8000722:	4896      	ldr	r0, [pc, #600]	; (800097c <display7SEG+0x360>)
 8000724:	f001 f8f5 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	4893      	ldr	r0, [pc, #588]	; (800097c <display7SEG+0x360>)
 800072e:	f001 f8f0 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 8000732:	e11f      	b.n	8000974 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4890      	ldr	r0, [pc, #576]	; (800097c <display7SEG+0x360>)
 800073a:	f001 f8ea 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2102      	movs	r1, #2
 8000742:	488e      	ldr	r0, [pc, #568]	; (800097c <display7SEG+0x360>)
 8000744:	f001 f8e5 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	488b      	ldr	r0, [pc, #556]	; (800097c <display7SEG+0x360>)
 800074e:	f001 f8e0 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	4889      	ldr	r0, [pc, #548]	; (800097c <display7SEG+0x360>)
 8000758:	f001 f8db 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4886      	ldr	r0, [pc, #536]	; (800097c <display7SEG+0x360>)
 8000762:	f001 f8d6 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4884      	ldr	r0, [pc, #528]	; (800097c <display7SEG+0x360>)
 800076c:	f001 f8d1 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4881      	ldr	r0, [pc, #516]	; (800097c <display7SEG+0x360>)
 8000776:	f001 f8cc 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 800077a:	e0fb      	b.n	8000974 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	487e      	ldr	r0, [pc, #504]	; (800097c <display7SEG+0x360>)
 8000782:	f001 f8c6 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	487c      	ldr	r0, [pc, #496]	; (800097c <display7SEG+0x360>)
 800078c:	f001 f8c1 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2104      	movs	r1, #4
 8000794:	4879      	ldr	r0, [pc, #484]	; (800097c <display7SEG+0x360>)
 8000796:	f001 f8bc 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2108      	movs	r1, #8
 800079e:	4877      	ldr	r0, [pc, #476]	; (800097c <display7SEG+0x360>)
 80007a0:	f001 f8b7 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	4874      	ldr	r0, [pc, #464]	; (800097c <display7SEG+0x360>)
 80007aa:	f001 f8b2 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4872      	ldr	r0, [pc, #456]	; (800097c <display7SEG+0x360>)
 80007b4:	f001 f8ad 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	486f      	ldr	r0, [pc, #444]	; (800097c <display7SEG+0x360>)
 80007be:	f001 f8a8 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 80007c2:	e0d7      	b.n	8000974 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	486c      	ldr	r0, [pc, #432]	; (800097c <display7SEG+0x360>)
 80007ca:	f001 f8a2 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	486a      	ldr	r0, [pc, #424]	; (800097c <display7SEG+0x360>)
 80007d4:	f001 f89d 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2104      	movs	r1, #4
 80007dc:	4867      	ldr	r0, [pc, #412]	; (800097c <display7SEG+0x360>)
 80007de:	f001 f898 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4865      	ldr	r0, [pc, #404]	; (800097c <display7SEG+0x360>)
 80007e8:	f001 f893 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4862      	ldr	r0, [pc, #392]	; (800097c <display7SEG+0x360>)
 80007f2:	f001 f88e 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4860      	ldr	r0, [pc, #384]	; (800097c <display7SEG+0x360>)
 80007fc:	f001 f889 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	485d      	ldr	r0, [pc, #372]	; (800097c <display7SEG+0x360>)
 8000806:	f001 f884 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 800080a:	e0b3      	b.n	8000974 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	485a      	ldr	r0, [pc, #360]	; (800097c <display7SEG+0x360>)
 8000812:	f001 f87e 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4858      	ldr	r0, [pc, #352]	; (800097c <display7SEG+0x360>)
 800081c:	f001 f879 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2104      	movs	r1, #4
 8000824:	4855      	ldr	r0, [pc, #340]	; (800097c <display7SEG+0x360>)
 8000826:	f001 f874 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4853      	ldr	r0, [pc, #332]	; (800097c <display7SEG+0x360>)
 8000830:	f001 f86f 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4850      	ldr	r0, [pc, #320]	; (800097c <display7SEG+0x360>)
 800083a:	f001 f86a 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	484e      	ldr	r0, [pc, #312]	; (800097c <display7SEG+0x360>)
 8000844:	f001 f865 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	484b      	ldr	r0, [pc, #300]	; (800097c <display7SEG+0x360>)
 800084e:	f001 f860 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 8000852:	e08f      	b.n	8000974 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4848      	ldr	r0, [pc, #288]	; (800097c <display7SEG+0x360>)
 800085a:	f001 f85a 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	4846      	ldr	r0, [pc, #280]	; (800097c <display7SEG+0x360>)
 8000864:	f001 f855 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	4843      	ldr	r0, [pc, #268]	; (800097c <display7SEG+0x360>)
 800086e:	f001 f850 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	4841      	ldr	r0, [pc, #260]	; (800097c <display7SEG+0x360>)
 8000878:	f001 f84b 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2110      	movs	r1, #16
 8000880:	483e      	ldr	r0, [pc, #248]	; (800097c <display7SEG+0x360>)
 8000882:	f001 f846 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	483c      	ldr	r0, [pc, #240]	; (800097c <display7SEG+0x360>)
 800088c:	f001 f841 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	4839      	ldr	r0, [pc, #228]	; (800097c <display7SEG+0x360>)
 8000896:	f001 f83c 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 800089a:	e06b      	b.n	8000974 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4836      	ldr	r0, [pc, #216]	; (800097c <display7SEG+0x360>)
 80008a2:	f001 f836 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4834      	ldr	r0, [pc, #208]	; (800097c <display7SEG+0x360>)
 80008ac:	f001 f831 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2104      	movs	r1, #4
 80008b4:	4831      	ldr	r0, [pc, #196]	; (800097c <display7SEG+0x360>)
 80008b6:	f001 f82c 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	482f      	ldr	r0, [pc, #188]	; (800097c <display7SEG+0x360>)
 80008c0:	f001 f827 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	482c      	ldr	r0, [pc, #176]	; (800097c <display7SEG+0x360>)
 80008ca:	f001 f822 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	482a      	ldr	r0, [pc, #168]	; (800097c <display7SEG+0x360>)
 80008d4:	f001 f81d 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <display7SEG+0x360>)
 80008de:	f001 f818 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 80008e2:	e047      	b.n	8000974 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <display7SEG+0x360>)
 80008ea:	f001 f812 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	4822      	ldr	r0, [pc, #136]	; (800097c <display7SEG+0x360>)
 80008f4:	f001 f80d 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2104      	movs	r1, #4
 80008fc:	481f      	ldr	r0, [pc, #124]	; (800097c <display7SEG+0x360>)
 80008fe:	f001 f808 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <display7SEG+0x360>)
 8000908:	f001 f803 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2110      	movs	r1, #16
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <display7SEG+0x360>)
 8000912:	f000 fffe 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <display7SEG+0x360>)
 800091c:	f000 fff9 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4815      	ldr	r0, [pc, #84]	; (800097c <display7SEG+0x360>)
 8000926:	f000 fff4 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 800092a:	e023      	b.n	8000974 <display7SEG+0x358>
	default :
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <display7SEG+0x360>)
 8000932:	f000 ffee 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <display7SEG+0x360>)
 800093c:	f000 ffe9 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2104      	movs	r1, #4
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <display7SEG+0x360>)
 8000946:	f000 ffe4 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2108      	movs	r1, #8
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <display7SEG+0x360>)
 8000950:	f000 ffdf 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <display7SEG+0x360>)
 800095a:	f000 ffda 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <display7SEG+0x360>)
 8000964:	f000 ffd5 	bl	8001912 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <display7SEG+0x360>)
 800096e:	f000 ffd0 	bl	8001912 <HAL_GPIO_WritePin>
		break;
 8000972:	bf00      	nop
	}
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010c00 	.word	0x40010c00

08000980 <update7SEG>:

const int MAX_LED = 4;
// int index_led = 0;
int led_buffer[4] = {1, 5, 0, 8};
void update7SEG(int index){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d82a      	bhi.n	80009e4 <update7SEG+0x64>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <update7SEG+0x14>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009b5 	.word	0x080009b5
 800099c:	080009c5 	.word	0x080009c5
 80009a0:	080009d5 	.word	0x080009d5
    switch (index){
		case 0: {
			display7SEG(led_buffer[index]);
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <update7SEG+0x70>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe35 	bl	800061c <display7SEG>
			break ;
 80009b2:	e018      	b.n	80009e6 <update7SEG+0x66>
		}
		case 1:{
			display7SEG(led_buffer[index]);
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <update7SEG+0x70>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe2d 	bl	800061c <display7SEG>
			break ;
 80009c2:	e010      	b.n	80009e6 <update7SEG+0x66>
		}
		case 2:{
			display7SEG(led_buffer[index]);
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <update7SEG+0x70>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe25 	bl	800061c <display7SEG>
			break ;
 80009d2:	e008      	b.n	80009e6 <update7SEG+0x66>
		}
		case 3:{
			display7SEG(led_buffer[index]);
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <update7SEG+0x70>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe1d 	bl	800061c <display7SEG>
			break ;
 80009e2:	e000      	b.n	80009e6 <update7SEG+0x66>
		}
		default :
			break;
 80009e4:	bf00      	nop
    }
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <display7SEGLED12>:

void display7SEGLED12(int led1_2){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	updateLed12Buffer(led1_2);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f85b 	bl	8000ab8 <updateLed12Buffer>
	SetLed7Seg1On();
 8000a02:	f000 f8a1 	bl	8000b48 <SetLed7Seg1On>
	update7SEG(0);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ffba 	bl	8000980 <update7SEG>
	SetLed7Seg2On();
 8000a0c:	f000 f8ba 	bl	8000b84 <SetLed7Seg2On>
	update7SEG(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff ffb5 	bl	8000980 <update7SEG>
	SetLed7SegallOn();
 8000a16:	f000 f90f 	bl	8000c38 <SetLed7SegallOn>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <display7SEGLED34>:

void display7SEGLED34(int led3_4){
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	updateLed34Buffer(led3_4);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f868 	bl	8000b00 <updateLed34Buffer>
	SetLed7Seg3On();
 8000a30:	f000 f8c6 	bl	8000bc0 <SetLed7Seg3On>
	update7SEG(2);
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff ffa3 	bl	8000980 <update7SEG>
	SetLed7Seg4On();
 8000a3a:	f000 f8df 	bl	8000bfc <SetLed7Seg4On>
	update7SEG(3);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff ff9e 	bl	8000980 <update7SEG>
	SetLed7SegallOn();
 8000a44:	f000 f8f8 	bl	8000c38 <SetLed7SegallOn>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <display7Seg_countdown_Led12>:

void display7Seg_countdown_Led12(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <display7Seg_countdown_Led12+0x2c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d10d      	bne.n	8000a78 <display7Seg_countdown_Led12+0x28>
		display7SEGLED12(led12);
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <display7Seg_countdown_Led12+0x30>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffc7 	bl	80009f4 <display7SEGLED12>
		led12--;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <display7Seg_countdown_Led12+0x30>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <display7Seg_countdown_Led12+0x30>)
 8000a6e:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 8000a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a74:	f000 fb02 	bl	800107c <setTimer3>
	}
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000090 	.word	0x20000090
 8000a80:	20000050 	.word	0x20000050

08000a84 <display7Seg_countdown_Led34>:

void display7Seg_countdown_Led34(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <display7Seg_countdown_Led34+0x2c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10d      	bne.n	8000aac <display7Seg_countdown_Led34+0x28>
		display7SEGLED34(led34);
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <display7Seg_countdown_Led34+0x30>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffc4 	bl	8000a22 <display7SEGLED34>
		led34--;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <display7Seg_countdown_Led34+0x30>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <display7Seg_countdown_Led34+0x30>)
 8000aa2:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 fae8 	bl	800107c <setTimer3>
	}
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	20000054 	.word	0x20000054

08000ab8 <updateLed12Buffer>:

void updateLed12Buffer(int led1_2){
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
//	if (led12 < 10){
//		led_buffer[0] = 0;
//		led_buffer[1] = led12;
//	} else {
		led_buffer[0] = led1_2 / 10;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <updateLed12Buffer+0x40>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1092      	asrs	r2, r2, #2
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <updateLed12Buffer+0x44>)
 8000ad0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = led1_2 % 10;
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <updateLed12Buffer+0x40>)
 8000ad6:	fb83 2301 	smull	r2, r3, r3, r1
 8000ada:	109a      	asrs	r2, r3, #2
 8000adc:	17cb      	asrs	r3, r1, #31
 8000ade:	1ad2      	subs	r2, r2, r3
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	1aca      	subs	r2, r1, r3
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <updateLed12Buffer+0x44>)
 8000aec:	605a      	str	r2, [r3, #4]
//	}
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	66666667 	.word	0x66666667
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <updateLed34Buffer>:
void updateLed34Buffer(int led3_4){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
//	if (led34 < 10){
//		led_buffer[2] = 0;
//		led_buffer[3] = led34;
//	} else {
		led_buffer[2] = led3_4 / 10;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <updateLed34Buffer+0x40>)
 8000b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b10:	1092      	asrs	r2, r2, #2
 8000b12:	17db      	asrs	r3, r3, #31
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <updateLed34Buffer+0x44>)
 8000b18:	6093      	str	r3, [r2, #8]
		led_buffer[3] = led3_4 % 10;
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <updateLed34Buffer+0x40>)
 8000b1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b22:	109a      	asrs	r2, r3, #2
 8000b24:	17cb      	asrs	r3, r1, #31
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1aca      	subs	r2, r1, r3
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <updateLed34Buffer+0x44>)
 8000b34:	60da      	str	r2, [r3, #12]
//	}
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	66666667 	.word	0x66666667
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <SetLed7Seg1On>:

void SetLed7Seg1On(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <SetLed7Seg1On+0x38>)
 8000b54:	f000 fedd 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <SetLed7Seg1On+0x38>)
 8000b60:	f000 fed7 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <SetLed7Seg1On+0x38>)
 8000b6c:	f000 fed1 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b76:	4802      	ldr	r0, [pc, #8]	; (8000b80 <SetLed7Seg1On+0x38>)
 8000b78:	f000 fecb 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40010800 	.word	0x40010800

08000b84 <SetLed7Seg2On>:
void SetLed7Seg2On(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <SetLed7Seg2On+0x38>)
 8000b90:	f000 febf 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <SetLed7Seg2On+0x38>)
 8000b9c:	f000 feb9 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <SetLed7Seg2On+0x38>)
 8000ba8:	f000 feb3 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	4802      	ldr	r0, [pc, #8]	; (8000bbc <SetLed7Seg2On+0x38>)
 8000bb4:	f000 fead 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <SetLed7Seg3On>:
void SetLed7Seg3On(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <SetLed7Seg3On+0x38>)
 8000bcc:	f000 fea1 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <SetLed7Seg3On+0x38>)
 8000bd8:	f000 fe9b 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <SetLed7Seg3On+0x38>)
 8000be4:	f000 fe95 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <SetLed7Seg3On+0x38>)
 8000bf0:	f000 fe8f 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010800 	.word	0x40010800

08000bfc <SetLed7Seg4On>:
void SetLed7Seg4On(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <SetLed7Seg4On+0x38>)
 8000c08:	f000 fe83 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <SetLed7Seg4On+0x38>)
 8000c14:	f000 fe7d 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <SetLed7Seg4On+0x38>)
 8000c20:	f000 fe77 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	4802      	ldr	r0, [pc, #8]	; (8000c34 <SetLed7Seg4On+0x38>)
 8000c2c:	f000 fe71 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010800 	.word	0x40010800

08000c38 <SetLed7SegallOn>:
void SetLed7SegallOn(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <SetLed7SegallOn+0x38>)
 8000c44:	f000 fe65 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <SetLed7SegallOn+0x38>)
 8000c50:	f000 fe5f 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <SetLed7SegallOn+0x38>)
 8000c5c:	f000 fe59 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <SetLed7SegallOn+0x38>)
 8000c68:	f000 fe53 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40010800 	.word	0x40010800

08000c74 <SetOffVer>:
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
}


void SetOffVer(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <SetOffVer+0x28>)
 8000c7e:	f000 fe48 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2110      	movs	r1, #16
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <SetOffVer+0x28>)
 8000c88:	f000 fe43 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <SetOffVer+0x28>)
 8000c92:	f000 fe3e 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <SetRedVer>:

void SetRedVer(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <SetRedVer+0x28>)
 8000caa:	f000 fe32 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <SetRedVer+0x28>)
 8000cb4:	f000 fe2d 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <SetRedVer+0x28>)
 8000cbe:	f000 fe28 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800

08000ccc <SetGreenVer>:

void SetGreenVer(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <SetGreenVer+0x28>)
 8000cd6:	f000 fe1c 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <SetGreenVer+0x28>)
 8000ce0:	f000 fe17 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <SetGreenVer+0x28>)
 8000cea:	f000 fe12 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <SetYellowVer>:

void SetYellowVer(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <SetYellowVer+0x28>)
 8000d02:	f000 fe06 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <SetYellowVer+0x28>)
 8000d0c:	f000 fe01 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <SetYellowVer+0x28>)
 8000d16:	f000 fdfc 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40010800 	.word	0x40010800

08000d24 <SetOffHor>:


void SetOffHor(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <SetOffHor+0x28>)
 8000d2e:	f000 fdf0 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <SetOffHor+0x28>)
 8000d38:	f000 fdeb 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <SetOffHor+0x28>)
 8000d42:	f000 fde6 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40010800 	.word	0x40010800

08000d50 <SetRedHor>:

void SetRedHor(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2120      	movs	r1, #32
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <SetRedHor+0x28>)
 8000d5a:	f000 fdda 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <SetRedHor+0x28>)
 8000d64:	f000 fdd5 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <SetRedHor+0x28>)
 8000d6e:	f000 fdd0 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40010800 	.word	0x40010800

08000d7c <SetGreenHor>:

void SetGreenHor(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2120      	movs	r1, #32
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <SetGreenHor+0x28>)
 8000d86:	f000 fdc4 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <SetGreenHor+0x28>)
 8000d90:	f000 fdbf 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <SetGreenHor+0x28>)
 8000d9a:	f000 fdba 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010800 	.word	0x40010800

08000da8 <SetYellowHor>:

void SetYellowHor(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2120      	movs	r1, #32
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <SetYellowHor+0x28>)
 8000db2:	f000 fdae 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <SetYellowHor+0x28>)
 8000dbc:	f000 fda9 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <SetYellowHor+0x28>)
 8000dc6:	f000 fda4 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f000 fa9a 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f81c 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f000 f8a2 	bl	8000f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de4:	f000 f854 	bl	8000e90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <main+0x38>)
 8000dea:	f001 f9e3 	bl	80021b4 <HAL_TIM_Base_Start_IT>

  status_1 = INIT;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x3c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
  status_2 = INIT;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <main+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
  setTimer3(1000);
 8000dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfe:	f000 f93d 	bl	800107c <setTimer3>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //fsm_for_input_processing();
	  fsm_automatic_1_run();
 8000e02:	f7ff f9a3 	bl	800014c <fsm_automatic_1_run>
	  fsm_automatic_2_run();
 8000e06:	f7ff fa31 	bl	800026c <fsm_automatic_2_run>
	  fsm_automatic_1_run();
 8000e0a:	e7fa      	b.n	8000e02 <main+0x2e>
 8000e0c:	200000ac 	.word	0x200000ac
 8000e10:	20000048 	.word	0x20000048
 8000e14:	2000004c 	.word	0x2000004c

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fd7c 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fd78 	bl	8001944 <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f8d5 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 ffe4 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8c1 	bl	8001008 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	; 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec4:	2209      	movs	r2, #9
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f001 f91d 	bl	8002114 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f000 f892 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 fab3 	bl	800245c <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 f884 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f001 fc7b 	bl	8002808 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f876 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000ac 	.word	0x200000ac

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 8000f84:	2200      	movs	r2, #0
 8000f86:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000f8a:	481c      	ldr	r0, [pc, #112]	; (8000ffc <MX_GPIO_Init+0xd4>)
 8000f8c:	f000 fcc1 	bl	8001912 <HAL_GPIO_WritePin>
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000f90:	2200      	movs	r2, #0
 8000f92:	217f      	movs	r1, #127	; 0x7f
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <MX_GPIO_Init+0xd8>)
 8000f96:	f000 fcbc 	bl	8001912 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000f9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0xdc>)
 8000fb0:	f000 fb1e 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_RED_VER_Pin LED_YELLOW_VER_Pin LED_GREEN_VER_Pin
                           LED_RED_HOR_Pin LED_YELLOW_HOR_Pin LED_GREEN_HOR_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 8000fb4:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000fb8:	613b      	str	r3, [r7, #16]
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <MX_GPIO_Init+0xd4>)
 8000fce:	f000 fb0f 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin
                           LED_E_Pin LED_F_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000fd2:	237f      	movs	r3, #127	; 0x7f
 8000fd4:	613b      	str	r3, [r7, #16]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_GPIO_Init+0xd8>)
 8000fea:	f000 fb01 	bl	80015f0 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <setTimer1+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb92 f3f3 	sdiv	r3, r2, r3
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <setTimer1+0x2c>)
 8001028:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <setTimer1+0x30>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000001c 	.word	0x2000001c
 8001040:	2000009c 	.word	0x2000009c
 8001044:	20000088 	.word	0x20000088

08001048 <setTimer2>:

void setTimer2( int duration){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <setTimer2+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	fb92 f3f3 	sdiv	r3, r2, r3
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <setTimer2+0x2c>)
 800105c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <setTimer2+0x30>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000001c 	.word	0x2000001c
 8001074:	200000a0 	.word	0x200000a0
 8001078:	2000008c 	.word	0x2000008c

0800107c <setTimer3>:

void setTimer3( int duration){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <setTimer3+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	fb92 f3f3 	sdiv	r3, r2, r3
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <setTimer3+0x2c>)
 8001090:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <setTimer3+0x30>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000001c 	.word	0x2000001c
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	20000090 	.word	0x20000090

080010b0 <timerRun>:
void setTimer4( int duration){
	timer4_counter = duration / TIMER_CYCLE;
	timer4_flag = 0;
}

void timerRun (){
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <timerRun+0xac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd0b      	ble.n	80010d4 <timerRun+0x24>
		timer0_counter --;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <timerRun+0xac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <timerRun+0xac>)
 80010c4:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <timerRun+0xac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dc02      	bgt.n	80010d4 <timerRun+0x24>
			timer0_flag = 1;
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <timerRun+0xb0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <timerRun+0xb4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd0b      	ble.n	80010f4 <timerRun+0x44>
		timer1_counter--;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <timerRun+0xb4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a20      	ldr	r2, [pc, #128]	; (8001164 <timerRun+0xb4>)
 80010e4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <timerRun+0xb4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc02      	bgt.n	80010f4 <timerRun+0x44>
			timer1_flag = 1;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <timerRun+0xb8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <timerRun+0xbc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd0b      	ble.n	8001114 <timerRun+0x64>
		timer2_counter--;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <timerRun+0xbc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <timerRun+0xbc>)
 8001104:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <timerRun+0xbc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	dc02      	bgt.n	8001114 <timerRun+0x64>
			timer2_flag = 1;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <timerRun+0xc0>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <timerRun+0xc4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd0b      	ble.n	8001134 <timerRun+0x84>
		timer3_counter--;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <timerRun+0xc4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <timerRun+0xc4>)
 8001124:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <timerRun+0xc4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	dc02      	bgt.n	8001134 <timerRun+0x84>
			timer3_flag = 1;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <timerRun+0xc8>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <timerRun+0xcc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd0b      	ble.n	8001154 <timerRun+0xa4>
		timer4_counter--;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <timerRun+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <timerRun+0xcc>)
 8001144:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <timerRun+0xcc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dc02      	bgt.n	8001154 <timerRun+0xa4>
			timer4_flag = 1;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <timerRun+0xd0>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000098 	.word	0x20000098
 8001160:	20000084 	.word	0x20000084
 8001164:	2000009c 	.word	0x2000009c
 8001168:	20000088 	.word	0x20000088
 800116c:	200000a0 	.word	0x200000a0
 8001170:	2000008c 	.word	0x2000008c
 8001174:	200000a4 	.word	0x200000a4
 8001178:	20000090 	.word	0x20000090
 800117c:	200000a8 	.word	0x200000a8
 8001180:	20000094 	.word	0x20000094

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_MspInit+0x5c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x60>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_MspInit+0x60>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d113      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0x44>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_TIM_Base_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_TIM_Base_MspInit+0x44>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201c      	movs	r0, #28
 8001218:	f000 f9b3 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121c:	201c      	movs	r0, #28
 800121e:	f000 f9cc 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f891 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM2_IRQHandler+0x10>)
 8001286:	f000 ffe1 	bl	800224c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000ac 	.word	0x200000ac

08001294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d103      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80012b2:	f7ff f945 	bl	8000540 <button_reading>
		timerRun();
 80012b6:	f7ff fefb 	bl	80010b0 <timerRun>
		//getKeyInput();
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff ffd3 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f001 faf5 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff fd6f 	bl	8000dd4 <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001300:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 8001304:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001308:	200000f8 	.word	0x200000f8

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f923 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff ff2a 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f93b 	bl	80015d6 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f903 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000020 	.word	0x20000020
 8001394:	20000028 	.word	0x20000028
 8001398:	20000024 	.word	0x20000024

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000028 	.word	0x20000028
 80013bc:	200000f4 	.word	0x200000f4

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	200000f4 	.word	0x200000f4

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e148      	b.n	8001896 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8137 	bne.w	8001890 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4aa3      	ldr	r2, [pc, #652]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d05e      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800162c:	4aa1      	ldr	r2, [pc, #644]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d875      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001632:	4aa1      	ldr	r2, [pc, #644]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d058      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001638:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d86f      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800163e:	4a9f      	ldr	r2, [pc, #636]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d052      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001644:	4a9d      	ldr	r2, [pc, #628]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d869      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800164a:	4a9d      	ldr	r2, [pc, #628]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04c      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001650:	4a9b      	ldr	r2, [pc, #620]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d863      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001656:	4a9b      	ldr	r2, [pc, #620]	; (80018c4 <HAL_GPIO_Init+0x2d4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d046      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800165c:	4a99      	ldr	r2, [pc, #612]	; (80018c4 <HAL_GPIO_Init+0x2d4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d85d      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d82a      	bhi.n	80016bc <HAL_GPIO_Init+0xcc>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d859      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HAL_GPIO_Init+0x80>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016c5 	.word	0x080016c5
 8001678:	080016d7 	.word	0x080016d7
 800167c:	08001719 	.word	0x08001719
 8001680:	0800171f 	.word	0x0800171f
 8001684:	0800171f 	.word	0x0800171f
 8001688:	0800171f 	.word	0x0800171f
 800168c:	0800171f 	.word	0x0800171f
 8001690:	0800171f 	.word	0x0800171f
 8001694:	0800171f 	.word	0x0800171f
 8001698:	0800171f 	.word	0x0800171f
 800169c:	0800171f 	.word	0x0800171f
 80016a0:	0800171f 	.word	0x0800171f
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	0800171f 	.word	0x0800171f
 80016ac:	0800171f 	.word	0x0800171f
 80016b0:	0800171f 	.word	0x0800171f
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016e1 	.word	0x080016e1
 80016bc:	4a82      	ldr	r2, [pc, #520]	; (80018c8 <HAL_GPIO_Init+0x2d8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c2:	e02c      	b.n	800171e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e029      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e024      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	3308      	adds	r3, #8
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e01f      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	330c      	adds	r3, #12
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e01a      	b.n	8001720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f2:	2304      	movs	r3, #4
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e013      	b.n	8001720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	611a      	str	r2, [r3, #16]
          break;
 800170a:	e009      	b.n	8001720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	615a      	str	r2, [r3, #20]
          break;
 8001716:	e003      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x130>
          break;
 800171e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d801      	bhi.n	800172a <HAL_GPIO_Init+0x13a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	e001      	b.n	800172e <HAL_GPIO_Init+0x13e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d802      	bhi.n	800173c <HAL_GPIO_Init+0x14c>
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x152>
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3b08      	subs	r3, #8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	210f      	movs	r1, #15
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8090 	beq.w	8001890 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a55      	ldr	r2, [pc, #340]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1dc>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_GPIO_Init+0x2ec>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1d8>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017d0:	2300      	movs	r3, #0
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	493b      	ldr	r1, [pc, #236]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4933      	ldr	r1, [pc, #204]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001814:	4013      	ands	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	492d      	ldr	r1, [pc, #180]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4929      	ldr	r1, [pc, #164]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4923      	ldr	r1, [pc, #140]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	491f      	ldr	r1, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001864:	4013      	ands	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4919      	ldr	r1, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800188c:	4013      	ands	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	3301      	adds	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aeaf 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	372c      	adds	r7, #44	; 0x2c
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10320000 	.word	0x10320000
 80018b8:	10310000 	.word	0x10310000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	10210000 	.word	0x10210000
 80018c4:	10120000 	.word	0x10120000
 80018c8:	10110000 	.word	0x10110000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001922:	787b      	ldrb	r3, [r7, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192e:	e003      	b.n	8001938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	611a      	str	r2, [r3, #16]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e26c      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8087 	beq.w	8001a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001970:	4b8f      	ldr	r3, [pc, #572]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
 800197c:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d10b      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x12c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d168      	bne.n	8001a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e246      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x76>
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e02e      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7a      	ldr	r2, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a77      	ldr	r2, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xbc>
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a71      	ldr	r2, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fcce 	bl	80013c0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fcca 	bl	80013c0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1fa      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xe4>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fcba 	bl	80013c0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fcb6 	bl	80013c0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1e6      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x10c>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1ba      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4939      	ldr	r1, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc6f 	bl	80013c0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fc6b 	bl	80013c0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e19b      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4927      	ldr	r1, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc4e 	bl	80013c0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc4a 	bl	80013c0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e17a      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03a      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff fc2e 	bl	80013c0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fc2a 	bl	80013c0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e15a      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f000 faa6 	bl	80020d8 <RCC_Delay>
 8001b8c:	e01c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fc14 	bl	80013c0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fc10 	bl	80013c0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d908      	bls.n	8001bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e140      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	42420000 	.word	0x42420000
 8001bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b9e      	ldr	r3, [pc, #632]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e9      	bne.n	8001b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a6 	beq.w	8001d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b97      	ldr	r3, [pc, #604]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a93      	ldr	r2, [pc, #588]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fbd1 	bl	80013c0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff fbcd 	bl	80013c0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0fd      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e02d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x334>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a75      	ldr	r2, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a72      	ldr	r2, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x356>
 8001c80:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a6c      	ldr	r2, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a69      	ldr	r2, [pc, #420]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a66      	ldr	r2, [pc, #408]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb81 	bl	80013c0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fb7d 	bl	80013c0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0ab      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ee      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x37e>
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fb6b 	bl	80013c0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff fb67 	bl	80013c0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e095      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b48      	ldr	r3, [pc, #288]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8081 	beq.w	8001e2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d061      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d146      	bne.n	8001dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb3b 	bl	80013c0 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff fb37 	bl	80013c0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e067      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d108      	bne.n	8001d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	492d      	ldr	r1, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a19      	ldr	r1, [r3, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff fb0b 	bl	80013c0 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff fb07 	bl	80013c0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e037      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x46a>
 8001dcc:	e02f      	b.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff faf4 	bl	80013c0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff faf0 	bl	80013c0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e020      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x498>
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42420060 	.word	0x42420060

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0d0      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d115      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e073      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff fa44 	bl	80013c0 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff fa40 	bl	80013c0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e053      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1cc>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f9a2 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	0800295c 	.word	0x0800295c
 8002010:	20000020 	.word	0x20000020
 8002014:	20000024 	.word	0x20000024

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b490      	push	{r4, r7}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002020:	1d3c      	adds	r4, r7, #4
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002028:	f240 2301 	movw	r3, #513	; 0x201
 800202c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x40>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x46>
 8002056:	e02d      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	623b      	str	r3, [r7, #32]
      break;
 800205c:	e02d      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800206a:	4413      	add	r3, r2
 800206c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002070:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c5b      	lsrs	r3, r3, #17
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208a:	4413      	add	r3, r2
 800208c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002090:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002096:	fb02 f203 	mul.w	r2, r2, r3
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e004      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	623b      	str	r3, [r7, #32]
      break;
 80020b2:	e002      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b6:	623b      	str	r3, [r7, #32]
      break;
 80020b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ba:	6a3b      	ldr	r3, [r7, #32]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc90      	pop	{r4, r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	0800294c 	.word	0x0800294c
 80020cc:	40021000 	.word	0x40021000
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	003d0900 	.word	0x003d0900

080020d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <RCC_Delay+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <RCC_Delay+0x38>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a5b      	lsrs	r3, r3, #9
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f4:	bf00      	nop
  }
  while (Delay --);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <RCC_Delay+0x1c>
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000020 	.word	0x20000020
 8002110:	10624dd3 	.word	0x10624dd3

08002114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e041      	b.n	80021aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff f854 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f000 fa6a 	bl	800262c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d001      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e035      	b.n	8002238 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_TIM_Base_Start_IT+0x90>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x4e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f6:	d004      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x4e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_TIM_Base_Start_IT+0x94>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d111      	bne.n	8002226 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b06      	cmp	r3, #6
 8002212:	d010      	beq.n	8002236 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002224:	e007      	b.n	8002236 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400

0800224c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b02      	cmp	r3, #2
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0202 	mvn.w	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9b1 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9a4 	bl	80025e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f9b3 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0204 	mvn.w	r2, #4
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f987 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f97a 	bl	80025e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f989 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b08      	cmp	r3, #8
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b08      	cmp	r3, #8
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0208 	mvn.w	r2, #8
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2204      	movs	r2, #4
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f95d 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f950 	bl	80025e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f95f 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b10      	cmp	r3, #16
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b10      	cmp	r3, #16
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0210 	mvn.w	r2, #16
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2208      	movs	r2, #8
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f933 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f926 	bl	80025e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f935 	bl	8002608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0201 	mvn.w	r2, #1
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe ff68 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b80      	cmp	r3, #128	; 0x80
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa67 	bl	80028ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8f9 	bl	800261a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b20      	cmp	r3, #32
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b20      	cmp	r3, #32
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0220 	mvn.w	r2, #32
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa32 	bl	80028b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIM_ConfigClockSource+0x18>
 8002470:	2302      	movs	r3, #2
 8002472:	e0b3      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x180>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800249a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ac:	d03e      	beq.n	800252c <HAL_TIM_ConfigClockSource+0xd0>
 80024ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b2:	f200 8087 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	f000 8085 	beq.w	80025c8 <HAL_TIM_ConfigClockSource+0x16c>
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	d87f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d01a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0xa2>
 80024c8:	2b70      	cmp	r3, #112	; 0x70
 80024ca:	d87b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d050      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x116>
 80024d0:	2b60      	cmp	r3, #96	; 0x60
 80024d2:	d877      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d03c      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xf6>
 80024d8:	2b50      	cmp	r3, #80	; 0x50
 80024da:	d873      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d058      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x136>
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d86f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d064      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x156>
 80024e8:	2b30      	cmp	r3, #48	; 0x30
 80024ea:	d86b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d060      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x156>
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d867      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x156>
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d05a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024fc:	e062      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f000 f95c 	bl	80027ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
      break;
 800252a:	e04e      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f000 f945 	bl	80027ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e03b      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	461a      	mov	r2, r3
 8002560:	f000 f8bc 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2150      	movs	r1, #80	; 0x50
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f913 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 8002570:	e02b      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8da 	bl	8002738 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2160      	movs	r1, #96	; 0x60
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f903 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 8002590:	e01b      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f89c 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f8f3 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025b0:	e00b      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f000 f8ea 	bl	8002796 <TIM_ITRx_SetConfig>
        break;
 80025c2:	e002      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025c4:	bf00      	nop
 80025c6:	e000      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x28>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x28>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <TIM_Base_SetConfig+0xac>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x52>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x52>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <TIM_Base_SetConfig+0xac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 030a 	bic.w	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f023 0210 	bic.w	r2, r3, #16
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002762:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f043 0307 	orr.w	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	609a      	str	r2, [r3, #8]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	609a      	str	r2, [r3, #8]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e041      	b.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d004      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	2600      	movs	r6, #0
 80028e0:	4d0c      	ldr	r5, [pc, #48]	; (8002914 <__libc_init_array+0x38>)
 80028e2:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e4:	1b64      	subs	r4, r4, r5
 80028e6:	10a4      	asrs	r4, r4, #2
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	f000 f822 	bl	8002934 <_init>
 80028f0:	2600      	movs	r6, #0
 80028f2:	4d0a      	ldr	r5, [pc, #40]	; (800291c <__libc_init_array+0x40>)
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <__libc_init_array+0x44>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	0800296c 	.word	0x0800296c
 8002918:	0800296c 	.word	0x0800296c
 800291c:	0800296c 	.word	0x0800296c
 8002920:	08002970 	.word	0x08002970

08002924 <memset>:
 8002924:	4603      	mov	r3, r0
 8002926:	4402      	add	r2, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
