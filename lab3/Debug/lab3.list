
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000002c  080030fc  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080030fc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a41a  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddc  00000000  00000000  0002a46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000202c  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d127  00000000  00000000  0002f864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082708  00000000  00000000  0003c98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  000bf0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003090 	.word	0x08003090

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08003090 	.word	0x08003090

0800014c <fsm_automatic_1_run>:
 */


#include <fsm_automatic_1.h>

void fsm_automatic_1_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_ver){
 8000150:	4b56      	ldr	r3, [pc, #344]	; (80002ac <fsm_automatic_1_run+0x160>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b0e      	cmp	r3, #14
 8000156:	f200 809a 	bhi.w	800028e <fsm_automatic_1_run+0x142>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_1_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800019d 	.word	0x0800019d
 8000164:	0800028f 	.word	0x0800028f
 8000168:	0800028f 	.word	0x0800028f
 800016c:	0800028f 	.word	0x0800028f
 8000170:	0800028f 	.word	0x0800028f
 8000174:	0800028f 	.word	0x0800028f
 8000178:	0800028f 	.word	0x0800028f
 800017c:	0800028f 	.word	0x0800028f
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800021f 	.word	0x0800021f
 800018c:	0800028f 	.word	0x0800028f
 8000190:	0800024d 	.word	0x0800024d
 8000194:	08000263 	.word	0x08000263
 8000198:	08000279 	.word	0x08000279
	case INIT:

		SetOffVer();
 800019c:	f001 f882 	bl	80012a4 <SetOffVer>
		led12 = timered;
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001a6:	6013      	str	r3, [r2, #0]
		status_ver = AUTO_RED;
 80001a8:	4b40      	ldr	r3, [pc, #256]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001aa:	2208      	movs	r2, #8
 80001ac:	601a      	str	r2, [r3, #0]

		setTimer1(timeTimer(timered));
 80001ae:	4b40      	ldr	r3, [pc, #256]	; (80002b0 <fsm_automatic_1_run+0x164>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fbd0 	bl	8000958 <timeTimer>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fa7e 	bl	80016bc <setTimer1>
		break;
 80001c0:	e072      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
	case AUTO_RED:
		SetRedVer();
 80001c2:	f001 f885 	bl	80012d0 <SetRedVer>
		if (timer1_flag == 1){
 80001c6:	4b3c      	ldr	r3, [pc, #240]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d161      	bne.n	8000292 <fsm_automatic_1_run+0x146>
			status_ver = AUTO_GREEN;
 80001ce:	4b37      	ldr	r3, [pc, #220]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001d0:	2209      	movs	r2, #9
 80001d2:	601a      	str	r2, [r3, #0]
			led12 = timegreen;
 80001d4:	4b39      	ldr	r3, [pc, #228]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a36      	ldr	r2, [pc, #216]	; (80002b4 <fsm_automatic_1_run+0x168>)
 80001da:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timegreen));
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <fsm_automatic_1_run+0x170>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fbb9 	bl	8000958 <timeTimer>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa67 	bl	80016bc <setTimer1>
		}

		break;
 80001ee:	e050      	b.n	8000292 <fsm_automatic_1_run+0x146>
	case AUTO_GREEN:

		SetGreenVer();
 80001f0:	f001 f884 	bl	80012fc <SetGreenVer>
		if (timer1_flag == 1){
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d14c      	bne.n	8000296 <fsm_automatic_1_run+0x14a>
			status_ver = AUTO_YELLOW;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <fsm_automatic_1_run+0x160>)
 80001fe:	220a      	movs	r2, #10
 8000200:	601a      	str	r2, [r3, #0]
			led12 = timeyellow;
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <fsm_automatic_1_run+0x174>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000208:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timeyellow));
 800020a:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <fsm_automatic_1_run+0x174>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fba2 	bl	8000958 <timeTimer>
 8000214:	4603      	mov	r3, r0
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fa50 	bl	80016bc <setTimer1>
		}

		break;
 800021c:	e03b      	b.n	8000296 <fsm_automatic_1_run+0x14a>
	case AUTO_YELLOW:

		SetYellowVer();
 800021e:	f001 f883 	bl	8001328 <SetYellowVer>
		if (timer1_flag == 1){
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d137      	bne.n	800029a <fsm_automatic_1_run+0x14e>
			status_ver = AUTO_RED;
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <fsm_automatic_1_run+0x160>)
 800022c:	2208      	movs	r2, #8
 800022e:	601a      	str	r2, [r3, #0]
			led12 = timered;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <fsm_automatic_1_run+0x164>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <fsm_automatic_1_run+0x168>)
 8000236:	6013      	str	r3, [r2, #0]
			setTimer1(timeTimer(timered));
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <fsm_automatic_1_run+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb8b 	bl	8000958 <timeTimer>
 8000242:	4603      	mov	r3, r0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fa39 	bl	80016bc <setTimer1>
		}

		break;
 800024a:	e026      	b.n	800029a <fsm_automatic_1_run+0x14e>
	case MODIFY_RED:
		if (timer1_flag == 1){
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d124      	bne.n	800029e <fsm_automatic_1_run+0x152>
			BlinkyRedVer();
 8000254:	f000 ff26 	bl	80010a4 <BlinkyRedVer>
			setTimer1(500);
 8000258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025c:	f001 fa2e 	bl	80016bc <setTimer1>
		}
		break;
 8000260:	e01d      	b.n	800029e <fsm_automatic_1_run+0x152>
	case MODIFY_GREEN:
		if (timer1_flag == 1){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11b      	bne.n	80002a2 <fsm_automatic_1_run+0x156>
			BlinkyGreenVer();
 800026a:	f000 ff2f 	bl	80010cc <BlinkyGreenVer>
			setTimer1(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f001 fa23 	bl	80016bc <setTimer1>
		}
		break;
 8000276:	e014      	b.n	80002a2 <fsm_automatic_1_run+0x156>
	case MODIFY_YELLOW:
		if (timer1_flag == 1){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_automatic_1_run+0x16c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d112      	bne.n	80002a6 <fsm_automatic_1_run+0x15a>
			BlinkyYellowVer();
 8000280:	f000 ff38 	bl	80010f4 <BlinkyYellowVer>
			setTimer1(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f001 fa18 	bl	80016bc <setTimer1>
		}
		break;
 800028c:	e00b      	b.n	80002a6 <fsm_automatic_1_run+0x15a>
	default:
		break;
 800028e:	bf00      	nop
 8000290:	e00a      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000292:	bf00      	nop
 8000294:	e008      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 8000296:	bf00      	nop
 8000298:	e006      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029a:	bf00      	nop
 800029c:	e004      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <fsm_automatic_1_run+0x15c>
		break;
 80002a6:	bf00      	nop
	}

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000004c 	.word	0x2000004c
 80002b0:	20000008 	.word	0x20000008
 80002b4:	20000014 	.word	0x20000014
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	2000000c 	.word	0x2000000c
 80002c0:	20000010 	.word	0x20000010

080002c4 <fsm_automatic_2_run>:
 *      Author: pc
 */

#include "fsm_automatic_2.h"

void fsm_automatic_2_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_hor){
 80002c8:	4b56      	ldr	r3, [pc, #344]	; (8000424 <fsm_automatic_2_run+0x160>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b0e      	cmp	r3, #14
 80002ce:	f200 809a 	bhi.w	8000406 <fsm_automatic_2_run+0x142>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_2_run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	08000315 	.word	0x08000315
 80002dc:	08000407 	.word	0x08000407
 80002e0:	08000407 	.word	0x08000407
 80002e4:	08000407 	.word	0x08000407
 80002e8:	08000407 	.word	0x08000407
 80002ec:	08000407 	.word	0x08000407
 80002f0:	08000407 	.word	0x08000407
 80002f4:	08000407 	.word	0x08000407
 80002f8:	0800033b 	.word	0x0800033b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000397 	.word	0x08000397
 8000304:	08000407 	.word	0x08000407
 8000308:	080003c5 	.word	0x080003c5
 800030c:	080003db 	.word	0x080003db
 8000310:	080003f1 	.word	0x080003f1
	case INIT:
		SetOffHor();
 8000314:	f001 f81e 	bl	8001354 <SetOffHor>
		led34 = timegreen;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <fsm_automatic_2_run+0x164>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <fsm_automatic_2_run+0x168>)
 800031e:	6013      	str	r3, [r2, #0]
		status_hor = AUTO_GREEN;
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000322:	2209      	movs	r2, #9
 8000324:	601a      	str	r2, [r3, #0]
		setTimer2(timeTimer(timegreen));
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fb14 	bl	8000958 <timeTimer>
 8000330:	4603      	mov	r3, r0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f9dc 	bl	80016f0 <setTimer2>
		break;
 8000338:	e072      	b.n	8000420 <fsm_automatic_2_run+0x15c>
	case AUTO_RED :
		SetRedHor();
 800033a:	f001 f821 	bl	8001380 <SetRedHor>
		if (timer2_flag == 1){
 800033e:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <fsm_automatic_2_run+0x16c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d161      	bne.n	800040a <fsm_automatic_2_run+0x146>
			status_hor = AUTO_GREEN;
 8000346:	4b37      	ldr	r3, [pc, #220]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000348:	2209      	movs	r2, #9
 800034a:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_automatic_2_run+0x164>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <fsm_automatic_2_run+0x168>)
 8000352:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timegreen));
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <fsm_automatic_2_run+0x164>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fafd 	bl	8000958 <timeTimer>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 f9c5 	bl	80016f0 <setTimer2>
		}

		break;
 8000366:	e050      	b.n	800040a <fsm_automatic_2_run+0x146>
	case AUTO_GREEN:

		SetGreenHor();
 8000368:	f001 f820 	bl	80013ac <SetGreenHor>
		if (timer2_flag == 1){
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d14c      	bne.n	800040e <fsm_automatic_2_run+0x14a>
			status_hor = AUTO_YELLOW;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <fsm_automatic_2_run+0x160>)
 8000376:	220a      	movs	r2, #10
 8000378:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <fsm_automatic_2_run+0x170>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <fsm_automatic_2_run+0x168>)
 8000380:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timeyellow));
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <fsm_automatic_2_run+0x170>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fae6 	bl	8000958 <timeTimer>
 800038c:	4603      	mov	r3, r0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f9ae 	bl	80016f0 <setTimer2>
		}

		break;
 8000394:	e03b      	b.n	800040e <fsm_automatic_2_run+0x14a>
	case AUTO_YELLOW:
		SetYellowHor();
 8000396:	f001 f81f 	bl	80013d8 <SetYellowHor>
		if (timer2_flag == 1){
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_automatic_2_run+0x16c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d137      	bne.n	8000412 <fsm_automatic_2_run+0x14e>
			status_hor = AUTO_RED;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_automatic_2_run+0x160>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <fsm_automatic_2_run+0x168>)
 80003ae:	6013      	str	r3, [r2, #0]
			setTimer2(timeTimer(timered));
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_automatic_2_run+0x174>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 facf 	bl	8000958 <timeTimer>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f997 	bl	80016f0 <setTimer2>
		}
		break;
 80003c2:	e026      	b.n	8000412 <fsm_automatic_2_run+0x14e>
	case MODIFY_RED:
		if (timer2_flag == 1){
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d124      	bne.n	8000416 <fsm_automatic_2_run+0x152>
			BlinkyRedHor();
 80003cc:	f000 fea6 	bl	800111c <BlinkyRedHor>
			setTimer2(500);
 80003d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d4:	f001 f98c 	bl	80016f0 <setTimer2>
		}
		break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_2_run+0x152>
	case MODIFY_GREEN:
		if (timer2_flag == 1){
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d11b      	bne.n	800041a <fsm_automatic_2_run+0x156>
			BlinkyGreenHor();
 80003e2:	f000 feaf 	bl	8001144 <BlinkyGreenHor>
			setTimer2(500);
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f001 f981 	bl	80016f0 <setTimer2>
		}
		break;
 80003ee:	e014      	b.n	800041a <fsm_automatic_2_run+0x156>
	case MODIFY_YELLOW:
		if (timer2_flag == 1){
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <fsm_automatic_2_run+0x16c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d112      	bne.n	800041e <fsm_automatic_2_run+0x15a>
			BlinkyYellowHor();
 80003f8:	f000 feb8 	bl	800116c <BlinkyYellowHor>
			setTimer2(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f001 f976 	bl	80016f0 <setTimer2>
		}
		break;
 8000404:	e00b      	b.n	800041e <fsm_automatic_2_run+0x15a>
	default:
		break;
 8000406:	bf00      	nop
 8000408:	e00a      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040a:	bf00      	nop
 800040c:	e008      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800040e:	bf00      	nop
 8000410:	e006      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000412:	bf00      	nop
 8000414:	e004      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 8000416:	bf00      	nop
 8000418:	e002      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041a:	bf00      	nop
 800041c:	e000      	b.n	8000420 <fsm_automatic_2_run+0x15c>
		break;
 800041e:	bf00      	nop
	}

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000050 	.word	0x20000050
 8000428:	2000000c 	.word	0x2000000c
 800042c:	20000018 	.word	0x20000018
 8000430:	200000a4 	.word	0x200000a4
 8000434:	20000010 	.word	0x20000010
 8000438:	20000008 	.word	0x20000008

0800043c <fsm_mode_run>:
 *      Author: pc
 */

#include <fsm_mode.h>

void fsm_mode_run(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch (status_mode){
 8000440:	4b73      	ldr	r3, [pc, #460]	; (8000610 <fsm_mode_run+0x1d4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	f200 80d8 	bhi.w	80005fa <fsm_mode_run+0x1be>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_mode_run+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000465 	.word	0x08000465
 8000454:	08000485 	.word	0x08000485
 8000458:	080004cf 	.word	0x080004cf
 800045c:	08000553 	.word	0x08000553
 8000460:	080005d7 	.word	0x080005d7
	case INIT:
		status_mode = MODE1;
 8000464:	4b6a      	ldr	r3, [pc, #424]	; (8000610 <fsm_mode_run+0x1d4>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
		status_ver = INIT;
 800046a:	4b6a      	ldr	r3, [pc, #424]	; (8000614 <fsm_mode_run+0x1d8>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
		status_hor = INIT;
 8000470:	4b69      	ldr	r3, [pc, #420]	; (8000618 <fsm_mode_run+0x1dc>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
		status_led7seg = INIT;
 8000476:	4b69      	ldr	r3, [pc, #420]	; (800061c <fsm_mode_run+0x1e0>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
		index_led = 0;
 800047c:	4b68      	ldr	r3, [pc, #416]	; (8000620 <fsm_mode_run+0x1e4>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		//setTimer1(500);
		break;
 8000482:	e0c3      	b.n	800060c <fsm_mode_run+0x1d0>
	case MODE1 :

		if (isButtonflag(but1) == 1){
 8000484:	4b67      	ldr	r3, [pc, #412]	; (8000624 <fsm_mode_run+0x1e8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fa73 	bl	8000974 <isButtonflag>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	f040 80b4 	bne.w	80005fe <fsm_mode_run+0x1c2>
			clearTimer1();
 8000496:	f001 f8e1 	bl	800165c <clearTimer1>
			clearTimer2();
 800049a:	f001 f8ef 	bl	800167c <clearTimer2>
			clearTimer3();
 800049e:	f001 f8fd 	bl	800169c <clearTimer3>
			status_mode = MODE2;
 80004a2:	4b5b      	ldr	r3, [pc, #364]	; (8000610 <fsm_mode_run+0x1d4>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
			SetRedVerHor(); // to when blinky, led red ver and hor are the same
 80004a8:	f000 feec 	bl	8001284 <SetRedVerHor>
			status_ver = MODIFY_RED;
 80004ac:	4b59      	ldr	r3, [pc, #356]	; (8000614 <fsm_mode_run+0x1d8>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_RED;
 80004b2:	4b59      	ldr	r3, [pc, #356]	; (8000618 <fsm_mode_run+0x1dc>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
			led12 = MODE2;
 80004b8:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <fsm_mode_run+0x1ec>)
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
			led34 = timered;
 80004be:	4b5b      	ldr	r3, [pc, #364]	; (800062c <fsm_mode_run+0x1f0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a5b      	ldr	r2, [pc, #364]	; (8000630 <fsm_mode_run+0x1f4>)
 80004c4:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 80004c6:	4b55      	ldr	r3, [pc, #340]	; (800061c <fsm_mode_run+0x1e0>)
 80004c8:	221e      	movs	r2, #30
 80004ca:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}

		break;
 80004cc:	e097      	b.n	80005fe <fsm_mode_run+0x1c2>
	case MODE2:

		if (isButtonflag(but1) == 1){
 80004ce:	4b55      	ldr	r3, [pc, #340]	; (8000624 <fsm_mode_run+0x1e8>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fa4e 	bl	8000974 <isButtonflag>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d118      	bne.n	8000510 <fsm_mode_run+0xd4>
			clearTimer1();
 80004de:	f001 f8bd 	bl	800165c <clearTimer1>
			clearTimer2();
 80004e2:	f001 f8cb 	bl	800167c <clearTimer2>
			clearTimer3();
 80004e6:	f001 f8d9 	bl	800169c <clearTimer3>
			status_mode = MODE3;
 80004ea:	4b49      	ldr	r3, [pc, #292]	; (8000610 <fsm_mode_run+0x1d4>)
 80004ec:	2203      	movs	r2, #3
 80004ee:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_YELLOW;
 80004f0:	4b48      	ldr	r3, [pc, #288]	; (8000614 <fsm_mode_run+0x1d8>)
 80004f2:	220e      	movs	r2, #14
 80004f4:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_YELLOW;
 80004f6:	4b48      	ldr	r3, [pc, #288]	; (8000618 <fsm_mode_run+0x1dc>)
 80004f8:	220e      	movs	r2, #14
 80004fa:	601a      	str	r2, [r3, #0]
			led12 = MODE3;
 80004fc:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <fsm_mode_run+0x1ec>)
 80004fe:	2203      	movs	r2, #3
 8000500:	601a      	str	r2, [r3, #0]
			led34 = timeyellow;
 8000502:	4b4c      	ldr	r3, [pc, #304]	; (8000634 <fsm_mode_run+0x1f8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a4a      	ldr	r2, [pc, #296]	; (8000630 <fsm_mode_run+0x1f4>)
 8000508:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800050a:	4b44      	ldr	r3, [pc, #272]	; (800061c <fsm_mode_run+0x1e0>)
 800050c:	221e      	movs	r2, #30
 800050e:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000510:	4b49      	ldr	r3, [pc, #292]	; (8000638 <fsm_mode_run+0x1fc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fa2d 	bl	8000974 <isButtonflag>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10b      	bne.n	8000538 <fsm_mode_run+0xfc>
			led34++;
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <fsm_mode_run+0x1f4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a42      	ldr	r2, [pc, #264]	; (8000630 <fsm_mode_run+0x1f4>)
 8000528:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 800052a:	4b41      	ldr	r3, [pc, #260]	; (8000630 <fsm_mode_run+0x1f4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b63      	cmp	r3, #99	; 0x63
 8000530:	dd02      	ble.n	8000538 <fsm_mode_run+0xfc>
				led34 = 0;
 8000532:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <fsm_mode_run+0x1f4>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 8000538:	4b40      	ldr	r3, [pc, #256]	; (800063c <fsm_mode_run+0x200>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fa19 	bl	8000974 <isButtonflag>
 8000542:	4603      	mov	r3, r0
 8000544:	2b01      	cmp	r3, #1
 8000546:	d15c      	bne.n	8000602 <fsm_mode_run+0x1c6>
			timered  = led34;
 8000548:	4b39      	ldr	r3, [pc, #228]	; (8000630 <fsm_mode_run+0x1f4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a37      	ldr	r2, [pc, #220]	; (800062c <fsm_mode_run+0x1f0>)
 800054e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000550:	e057      	b.n	8000602 <fsm_mode_run+0x1c6>
	case MODE3:

		if (isButtonflag(but1) == 1){
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <fsm_mode_run+0x1e8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fa0c 	bl	8000974 <isButtonflag>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d118      	bne.n	8000594 <fsm_mode_run+0x158>
			clearTimer1();
 8000562:	f001 f87b 	bl	800165c <clearTimer1>
			clearTimer2();
 8000566:	f001 f889 	bl	800167c <clearTimer2>
			clearTimer3();
 800056a:	f001 f897 	bl	800169c <clearTimer3>
			status_mode = MODE4;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <fsm_mode_run+0x1d4>)
 8000570:	2204      	movs	r2, #4
 8000572:	601a      	str	r2, [r3, #0]
			status_ver = MODIFY_GREEN;
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <fsm_mode_run+0x1d8>)
 8000576:	220d      	movs	r2, #13
 8000578:	601a      	str	r2, [r3, #0]
			status_hor = MODIFY_GREEN;
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <fsm_mode_run+0x1dc>)
 800057c:	220d      	movs	r2, #13
 800057e:	601a      	str	r2, [r3, #0]
			led12 = MODE4;
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <fsm_mode_run+0x1ec>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
			led34 = timegreen;
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <fsm_mode_run+0x204>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a29      	ldr	r2, [pc, #164]	; (8000630 <fsm_mode_run+0x1f4>)
 800058c:	6013      	str	r3, [r2, #0]
			status_led7seg = MODE_MODIFY_led7seg_1;
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <fsm_mode_run+0x1e0>)
 8000590:	221e      	movs	r2, #30
 8000592:	601a      	str	r2, [r3, #0]
			//setTimer3(1000);
		}
		if (isButtonflag(but2) == 1){
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <fsm_mode_run+0x1fc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f9eb 	bl	8000974 <isButtonflag>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10b      	bne.n	80005bc <fsm_mode_run+0x180>
			led34++;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <fsm_mode_run+0x1f4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a21      	ldr	r2, [pc, #132]	; (8000630 <fsm_mode_run+0x1f4>)
 80005ac:	6013      	str	r3, [r2, #0]
			if (led34 > 99){
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <fsm_mode_run+0x1f4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b63      	cmp	r3, #99	; 0x63
 80005b4:	dd02      	ble.n	80005bc <fsm_mode_run+0x180>
				led34 = 0;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <fsm_mode_run+0x1f4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			}
		}
		if (isButtonflag(but3) == 1){
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <fsm_mode_run+0x200>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f9d7 	bl	8000974 <isButtonflag>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d11c      	bne.n	8000606 <fsm_mode_run+0x1ca>
			timeyellow  = led34;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <fsm_mode_run+0x1f4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a18      	ldr	r2, [pc, #96]	; (8000634 <fsm_mode_run+0x1f8>)
 80005d2:	6013      	str	r3, [r2, #0]
		}

		break;
 80005d4:	e017      	b.n	8000606 <fsm_mode_run+0x1ca>
	case MODE4:
		if (isButtonflag(but1) == 1){
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <fsm_mode_run+0x1e8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f9ca 	bl	8000974 <isButtonflag>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d111      	bne.n	800060a <fsm_mode_run+0x1ce>
			clearTimer1();
 80005e6:	f001 f839 	bl	800165c <clearTimer1>
			clearTimer2();
 80005ea:	f001 f847 	bl	800167c <clearTimer2>
			clearTimer3();
 80005ee:	f001 f855 	bl	800169c <clearTimer3>
			status_mode = INIT;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <fsm_mode_run+0x1d4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
//			status_ver = INIT;
//			status_hor = INIT;
//			status_led7seg = MODE1_led7seg_1;
			//setTimer3(1000);
		}
		break;
 80005f8:	e007      	b.n	800060a <fsm_mode_run+0x1ce>
	default:
		break;
 80005fa:	bf00      	nop
 80005fc:	e006      	b.n	800060c <fsm_mode_run+0x1d0>
		break;
 80005fe:	bf00      	nop
 8000600:	e004      	b.n	800060c <fsm_mode_run+0x1d0>
		break;
 8000602:	bf00      	nop
 8000604:	e002      	b.n	800060c <fsm_mode_run+0x1d0>
		break;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <fsm_mode_run+0x1d0>
		break;
 800060a:	bf00      	nop
	}


}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000048 	.word	0x20000048
 8000614:	2000004c 	.word	0x2000004c
 8000618:	20000050 	.word	0x20000050
 800061c:	20000054 	.word	0x20000054
 8000620:	20000058 	.word	0x20000058
 8000624:	2000005c 	.word	0x2000005c
 8000628:	20000014 	.word	0x20000014
 800062c:	20000008 	.word	0x20000008
 8000630:	20000018 	.word	0x20000018
 8000634:	20000010 	.word	0x20000010
 8000638:	20000000 	.word	0x20000000
 800063c:	20000004 	.word	0x20000004
 8000640:	2000000c 	.word	0x2000000c

08000644 <fsm_mode_led7seg>:
 */

#include <fsm_mode_Led7Seg.h>
//int Ts = 10;
//int count = 1;
void fsm_mode_led7seg(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

	switch (status_led7seg){
 8000648:	4bb4      	ldr	r3, [pc, #720]	; (800091c <fsm_mode_led7seg+0x2d8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b21      	cmp	r3, #33	; 0x21
 800064e:	f200 816f 	bhi.w	8000930 <fsm_mode_led7seg+0x2ec>
 8000652:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <fsm_mode_led7seg+0x14>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	080006e1 	.word	0x080006e1
 800065c:	08000931 	.word	0x08000931
 8000660:	08000931 	.word	0x08000931
 8000664:	08000931 	.word	0x08000931
 8000668:	08000931 	.word	0x08000931
 800066c:	08000931 	.word	0x08000931
 8000670:	08000931 	.word	0x08000931
 8000674:	08000931 	.word	0x08000931
 8000678:	08000931 	.word	0x08000931
 800067c:	08000931 	.word	0x08000931
 8000680:	08000931 	.word	0x08000931
 8000684:	08000931 	.word	0x08000931
 8000688:	08000931 	.word	0x08000931
 800068c:	08000931 	.word	0x08000931
 8000690:	08000931 	.word	0x08000931
 8000694:	08000931 	.word	0x08000931
 8000698:	08000931 	.word	0x08000931
 800069c:	08000931 	.word	0x08000931
 80006a0:	08000931 	.word	0x08000931
 80006a4:	08000931 	.word	0x08000931
 80006a8:	08000717 	.word	0x08000717
 80006ac:	08000757 	.word	0x08000757
 80006b0:	08000797 	.word	0x08000797
 80006b4:	080007e7 	.word	0x080007e7
 80006b8:	08000931 	.word	0x08000931
 80006bc:	08000931 	.word	0x08000931
 80006c0:	08000931 	.word	0x08000931
 80006c4:	08000931 	.word	0x08000931
 80006c8:	08000931 	.word	0x08000931
 80006cc:	08000931 	.word	0x08000931
 80006d0:	08000827 	.word	0x08000827
 80006d4:	08000867 	.word	0x08000867
 80006d8:	080008a5 	.word	0x080008a5
 80006dc:	080008df 	.word	0x080008df
		case INIT:
				status_led7seg = MODE1_led7seg_1;
 80006e0:	4b8e      	ldr	r3, [pc, #568]	; (800091c <fsm_mode_led7seg+0x2d8>)
 80006e2:	2214      	movs	r2, #20
 80006e4:	601a      	str	r2, [r3, #0]
				updateLedBuffer(led12,led34);
 80006e6:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a8e      	ldr	r2, [pc, #568]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc9b 	bl	800102c <updateLedBuffer>
				SetLed7Seg1On();
 80006f6:	f000 fd4d 	bl	8001194 <SetLed7Seg1On>
				update7SEG(index_led);
 80006fa:	4b8b      	ldr	r3, [pc, #556]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc5a 	bl	8000fb8 <update7SEG>
				index_led++;
 8000704:	4b88      	ldr	r3, [pc, #544]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a87      	ldr	r2, [pc, #540]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800070c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800070e:	20fa      	movs	r0, #250	; 0xfa
 8000710:	f001 f808 	bl	8001724 <setTimer3>
			break;
 8000714:	e11d      	b.n	8000952 <fsm_mode_led7seg+0x30e>
		case MODE1_led7seg_1:
			if (timer3_flag == 1){
 8000716:	4b85      	ldr	r3, [pc, #532]	; (800092c <fsm_mode_led7seg+0x2e8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	f040 810a 	bne.w	8000934 <fsm_mode_led7seg+0x2f0>
				updateLedBuffer(led12,led34);
 8000720:	4b7f      	ldr	r3, [pc, #508]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a7f      	ldr	r2, [pc, #508]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fc7e 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_2;
 8000730:	4b7a      	ldr	r3, [pc, #488]	; (800091c <fsm_mode_led7seg+0x2d8>)
 8000732:	2215      	movs	r2, #21
 8000734:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 8000736:	f000 fd4b 	bl	80011d0 <SetLed7Seg2On>
				update7SEG(index_led);
 800073a:	4b7b      	ldr	r3, [pc, #492]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fc3a 	bl	8000fb8 <update7SEG>
				index_led++;
 8000744:	4b78      	ldr	r3, [pc, #480]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a77      	ldr	r2, [pc, #476]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800074c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800074e:	20fa      	movs	r0, #250	; 0xfa
 8000750:	f000 ffe8 	bl	8001724 <setTimer3>
			}
			break;
 8000754:	e0ee      	b.n	8000934 <fsm_mode_led7seg+0x2f0>
		case MODE1_led7seg_2:
			if (timer3_flag == 1){
 8000756:	4b75      	ldr	r3, [pc, #468]	; (800092c <fsm_mode_led7seg+0x2e8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	f040 80ec 	bne.w	8000938 <fsm_mode_led7seg+0x2f4>
				updateLedBuffer(led12,led34);
 8000760:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a6f      	ldr	r2, [pc, #444]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fc5e 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_3;
 8000770:	4b6a      	ldr	r3, [pc, #424]	; (800091c <fsm_mode_led7seg+0x2d8>)
 8000772:	2216      	movs	r2, #22
 8000774:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 8000776:	f000 fd49 	bl	800120c <SetLed7Seg3On>
				update7SEG(index_led);
 800077a:	4b6b      	ldr	r3, [pc, #428]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fc1a 	bl	8000fb8 <update7SEG>
				index_led++;
 8000784:	4b68      	ldr	r3, [pc, #416]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a67      	ldr	r2, [pc, #412]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800078c:	6013      	str	r3, [r2, #0]
//				setTimer3(Ts);
				setTimer3(250);
 800078e:	20fa      	movs	r0, #250	; 0xfa
 8000790:	f000 ffc8 	bl	8001724 <setTimer3>
			}
			break;
 8000794:	e0d0      	b.n	8000938 <fsm_mode_led7seg+0x2f4>
		case MODE1_led7seg_3:

			if (timer3_flag == 1){
 8000796:	4b65      	ldr	r3, [pc, #404]	; (800092c <fsm_mode_led7seg+0x2e8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	f040 80ce 	bne.w	800093c <fsm_mode_led7seg+0x2f8>
				updateLedBuffer(led12,led34);
 80007a0:	4b5f      	ldr	r3, [pc, #380]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a5f      	ldr	r2, [pc, #380]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fc3e 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_4;
 80007b0:	4b5a      	ldr	r3, [pc, #360]	; (800091c <fsm_mode_led7seg+0x2d8>)
 80007b2:	2217      	movs	r2, #23
 80007b4:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 80007b6:	f000 fd47 	bl	8001248 <SetLed7Seg4On>
				update7SEG(index_led);
 80007ba:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fbfa 	bl	8000fb8 <update7SEG>
				index_led = 0;
 80007c4:	4b58      	ldr	r3, [pc, #352]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
//			    	led34--;
//			    	count = 1;
//			    }
//			    else count++;
//				setTimer3(Ts);
				led12--;
 80007ca:	4b55      	ldr	r3, [pc, #340]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	4a53      	ldr	r2, [pc, #332]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80007d2:	6013      	str	r3, [r2, #0]
				led34--;
 80007d4:	4b53      	ldr	r3, [pc, #332]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	4a52      	ldr	r2, [pc, #328]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80007dc:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 80007de:	20fa      	movs	r0, #250	; 0xfa
 80007e0:	f000 ffa0 	bl	8001724 <setTimer3>
			}
			break;
 80007e4:	e0aa      	b.n	800093c <fsm_mode_led7seg+0x2f8>
		case MODE1_led7seg_4:
			if (timer3_flag == 1){
 80007e6:	4b51      	ldr	r3, [pc, #324]	; (800092c <fsm_mode_led7seg+0x2e8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	f040 80a8 	bne.w	8000940 <fsm_mode_led7seg+0x2fc>
				updateLedBuffer(led12,led34);
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a4b      	ldr	r2, [pc, #300]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fc16 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE1_led7seg_1;
 8000800:	4b46      	ldr	r3, [pc, #280]	; (800091c <fsm_mode_led7seg+0x2d8>)
 8000802:	2214      	movs	r2, #20
 8000804:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 8000806:	f000 fcc5 	bl	8001194 <SetLed7Seg1On>
				update7SEG(index_led);
 800080a:	4b47      	ldr	r3, [pc, #284]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fbd2 	bl	8000fb8 <update7SEG>
				index_led++;
 8000814:	4b44      	ldr	r3, [pc, #272]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a43      	ldr	r2, [pc, #268]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800081c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800081e:	20fa      	movs	r0, #250	; 0xfa
 8000820:	f000 ff80 	bl	8001724 <setTimer3>
			}
			break;
 8000824:	e08c      	b.n	8000940 <fsm_mode_led7seg+0x2fc>
		case MODE_MODIFY_led7seg_1:
			if (timer3_flag == 1){
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <fsm_mode_led7seg+0x2e8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 808a 	bne.w	8000944 <fsm_mode_led7seg+0x300>
				updateLedBuffer(led12,led34);
 8000830:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a3b      	ldr	r2, [pc, #236]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fbf6 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_2;
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <fsm_mode_led7seg+0x2d8>)
 8000842:	221f      	movs	r2, #31
 8000844:	601a      	str	r2, [r3, #0]
				SetLed7Seg2On();
 8000846:	f000 fcc3 	bl	80011d0 <SetLed7Seg2On>
				update7SEG(index_led);
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fbb2 	bl	8000fb8 <update7SEG>
				index_led++;
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800085c:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800085e:	20fa      	movs	r0, #250	; 0xfa
 8000860:	f000 ff60 	bl	8001724 <setTimer3>
			}
			break;
 8000864:	e06e      	b.n	8000944 <fsm_mode_led7seg+0x300>
		case MODE_MODIFY_led7seg_2:
			if (timer3_flag == 1){
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <fsm_mode_led7seg+0x2e8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d16c      	bne.n	8000948 <fsm_mode_led7seg+0x304>
				updateLedBuffer(led12,led34);
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fbd7 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_3;
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <fsm_mode_led7seg+0x2d8>)
 8000880:	2220      	movs	r2, #32
 8000882:	601a      	str	r2, [r3, #0]
				SetLed7Seg3On();
 8000884:	f000 fcc2 	bl	800120c <SetLed7Seg3On>
				update7SEG(index_led);
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fb93 	bl	8000fb8 <update7SEG>
				index_led++;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	4a23      	ldr	r2, [pc, #140]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800089a:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 800089c:	20fa      	movs	r0, #250	; 0xfa
 800089e:	f000 ff41 	bl	8001724 <setTimer3>
			}
			break;
 80008a2:	e051      	b.n	8000948 <fsm_mode_led7seg+0x304>
		case MODE_MODIFY_led7seg_3:
			if (timer3_flag == 1){
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <fsm_mode_led7seg+0x2e8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d14f      	bne.n	800094c <fsm_mode_led7seg+0x308>
				updateLedBuffer(led12,led34);
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fbb8 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_4;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <fsm_mode_led7seg+0x2d8>)
 80008be:	2221      	movs	r2, #33	; 0x21
 80008c0:	601a      	str	r2, [r3, #0]
				SetLed7Seg4On();
 80008c2:	f000 fcc1 	bl	8001248 <SetLed7Seg4On>
				update7SEG(index_led);
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fb74 	bl	8000fb8 <update7SEG>
				index_led = 0;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
				setTimer3(250);
 80008d6:	20fa      	movs	r0, #250	; 0xfa
 80008d8:	f000 ff24 	bl	8001724 <setTimer3>
			}
			break;
 80008dc:	e036      	b.n	800094c <fsm_mode_led7seg+0x308>
		case MODE_MODIFY_led7seg_4:
			if (timer3_flag == 1){
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <fsm_mode_led7seg+0x2e8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d134      	bne.n	8000950 <fsm_mode_led7seg+0x30c>
				updateLedBuffer(led12,led34);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <fsm_mode_led7seg+0x2dc>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <fsm_mode_led7seg+0x2e0>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fb9b 	bl	800102c <updateLedBuffer>
				status_led7seg = MODE_MODIFY_led7seg_1;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <fsm_mode_led7seg+0x2d8>)
 80008f8:	221e      	movs	r2, #30
 80008fa:	601a      	str	r2, [r3, #0]
				SetLed7Seg1On();
 80008fc:	f000 fc4a 	bl	8001194 <SetLed7Seg1On>
				update7SEG(index_led);
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fb57 	bl	8000fb8 <update7SEG>
				index_led++;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <fsm_mode_led7seg+0x2e4>)
 8000912:	6013      	str	r3, [r2, #0]
				setTimer3(250);
 8000914:	20fa      	movs	r0, #250	; 0xfa
 8000916:	f000 ff05 	bl	8001724 <setTimer3>
			}
			break;
 800091a:	e019      	b.n	8000950 <fsm_mode_led7seg+0x30c>
 800091c:	20000054 	.word	0x20000054
 8000920:	20000014 	.word	0x20000014
 8000924:	20000018 	.word	0x20000018
 8000928:	20000058 	.word	0x20000058
 800092c:	200000a8 	.word	0x200000a8
		default:
			break;
 8000930:	bf00      	nop
 8000932:	e00e      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000934:	bf00      	nop
 8000936:	e00c      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000938:	bf00      	nop
 800093a:	e00a      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 800093c:	bf00      	nop
 800093e:	e008      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000940:	bf00      	nop
 8000942:	e006      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000944:	bf00      	nop
 8000946:	e004      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000948:	bf00      	nop
 800094a:	e002      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <fsm_mode_led7seg+0x30e>
			break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop

08000958 <timeTimer>:
int timeyellow = 2;

int led12 = 5;
int led34 = 3;

int timeTimer(int time){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	return time * 1000;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000966:	fb02 f303 	mul.w	r3, r2, r3
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <isButtonflag>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS]={0};

static uint16_t counterForButtonAfterPress1s[N0_OF_BUTTONS]={0};

int isButtonflag(int index){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	if (flagForButton[index] == 1){
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <isButtonflag+0x30>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d106      	bne.n	8000996 <isButtonflag+0x22>
		flagForButton[index] = 0;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <isButtonflag+0x30>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		return 1;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <isButtonflag+0x24>
	}
	return 0;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000074 	.word	0x20000074

080009a8 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d901      	bls.n	80009bc <is_button_pressed+0x14>
 80009b8:	2300      	movs	r3, #0
 80009ba:	e007      	b.n	80009cc <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <is_button_pressed+0x30>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000060 	.word	0x20000060

080009dc <is_button_pressed_3s>:

unsigned char is_button_pressed_3s(unsigned char index){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d901      	bls.n	80009f0 <is_button_pressed_3s+0x14>
 80009ec:	23ff      	movs	r3, #255	; 0xff
 80009ee:	e007      	b.n	8000a00 <is_button_pressed_3s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <is_button_pressed_3s+0x30>)
 80009f4:	5cd3      	ldrb	r3, [r2, r3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000070 	.word	0x20000070

08000a10 <fsm_for_input_processing>:

enum ButtonState{ BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED} ;
void fsm_for_input_processing(uint8_t index ){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	switch ( buttonState[index] ){
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <fsm_for_input_processing+0x154>)
 8000a1e:	5cd3      	ldrb	r3, [r2, r3]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d068      	beq.n	8000af6 <fsm_for_input_processing+0xe6>
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f300 8098 	bgt.w	8000b5a <fsm_for_input_processing+0x14a>
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <fsm_for_input_processing+0x24>
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d01a      	beq.n	8000a68 <fsm_for_input_processing+0x58>
					}
				}

			break ;
	}
}
 8000a32:	e092      	b.n	8000b5a <fsm_for_input_processing+0x14a>
			if( is_button_pressed(index)){
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffb6 	bl	80009a8 <is_button_pressed>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8088 	beq.w	8000b54 <fsm_for_input_processing+0x144>
				buttonState[index] = BUTTON_PRESSED ;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <fsm_for_input_processing+0x154>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[index] = 0;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <fsm_for_input_processing+0x15c>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 1;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <fsm_for_input_processing+0x160>)
 8000a62:	2101      	movs	r1, #1
 8000a64:	54d1      	strb	r1, [r2, r3]
			break ;
 8000a66:	e075      	b.n	8000b54 <fsm_for_input_processing+0x144>
			if (!is_button_pressed(index)){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff9c 	bl	80009a8 <is_button_pressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10d      	bne.n	8000a92 <fsm_for_input_processing+0x82>
				buttonState[index] =	 BUTTON_RELEASED ;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <fsm_for_input_processing+0x154>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a3b      	ldr	r2, [pc, #236]	; (8000b70 <fsm_for_input_processing+0x160>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[index] = 0;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000a90:	e062      	b.n	8000b58 <fsm_for_input_processing+0x148>
				if( counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING ){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	2b63      	cmp	r3, #99	; 0x63
 8000a9c:	d809      	bhi.n	8000ab2 <fsm_for_input_processing+0xa2>
						counterForButtonPress1s[index]++;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000aa2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aa6:	3201      	adds	r2, #1
 8000aa8:	b291      	uxth	r1, r2
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000aac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ab0:	e011      	b.n	8000ad6 <fsm_for_input_processing+0xc6>
					flagForButtonPress1s[index] = 1;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a2d      	ldr	r2, [pc, #180]	; (8000b6c <fsm_for_input_processing+0x15c>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	54d1      	strb	r1, [r2, r3]
					flagForButton[index] = 1;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <fsm_for_input_processing+0x160>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	54d1      	strb	r1, [r2, r3]
					counterForButtonAfterPress1s[index] = 0;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					counterForButtonPress1s[index] = 0;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <fsm_for_input_processing+0x158>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if( is_button_pressed_3s(index) ){
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff7f 	bl	80009dc <is_button_pressed_3s>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d039      	beq.n	8000b58 <fsm_for_input_processing+0x148>
					buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <fsm_for_input_processing+0x154>)
 8000ae8:	2102      	movs	r1, #2
 8000aea:	54d1      	strb	r1, [r2, r3]
					flagForButtonPress1s[index] = 0;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <fsm_for_input_processing+0x15c>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	54d1      	strb	r1, [r2, r3]
			break ;
 8000af4:	e030      	b.n	8000b58 <fsm_for_input_processing+0x148>
			if (! is_button_pressed(index)){
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff55 	bl	80009a8 <is_button_pressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10d      	bne.n	8000b20 <fsm_for_input_processing+0x110>
				buttonState[index] = BUTTON_RELEASED;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <fsm_for_input_processing+0x154>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	54d1      	strb	r1, [r2, r3]
				flagForButton[index] = 0;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <fsm_for_input_processing+0x160>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	54d1      	strb	r1, [r2, r3]
				counterForButtonAfterPress1s[index] = 0;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b1e:	e01c      	b.n	8000b5a <fsm_for_input_processing+0x14a>
					if (counterForButtonAfterPress1s[index] < DURATION_FOR_COUNTUP_AFTER_PRESS1S){
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b28:	2b13      	cmp	r3, #19
 8000b2a:	d809      	bhi.n	8000b40 <fsm_for_input_processing+0x130>
							counterForButtonAfterPress1s[index]++;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000b30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b34:	3201      	adds	r2, #1
 8000b36:	b291      	uxth	r1, r2
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b3e:	e00c      	b.n	8000b5a <fsm_for_input_processing+0x14a>
						flagForButton[index] = 1;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <fsm_for_input_processing+0x160>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	54d1      	strb	r1, [r2, r3]
						counterForButtonAfterPress1s[index] = 0;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <fsm_for_input_processing+0x164>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break ;
 8000b52:	e002      	b.n	8000b5a <fsm_for_input_processing+0x14a>
			break ;
 8000b54:	bf00      	nop
 8000b56:	e000      	b.n	8000b5a <fsm_for_input_processing+0x14a>
			break ;
 8000b58:	bf00      	nop
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000088 	.word	0x20000088
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	20000070 	.word	0x20000070
 8000b70:	20000074 	.word	0x20000074
 8000b74:	20000080 	.word	0x20000080

08000b78 <button_reading>:




void button_reading(void){
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e054      	b.n	8000c2e <button_reading+0xb6>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	492d      	ldr	r1, [pc, #180]	; (8000c40 <button_reading+0xc8>)
 8000b8a:	5c89      	ldrb	r1, [r1, r2]
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <button_reading+0xcc>)
 8000b8e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	492c      	ldr	r1, [pc, #176]	; (8000c48 <button_reading+0xd0>)
 8000b96:	5c89      	ldrb	r1, [r1, r2]
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <button_reading+0xc8>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
		  switch (i){
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d01c      	beq.n	8000bdc <button_reading+0x64>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	dc25      	bgt.n	8000bf2 <button_reading+0x7a>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <button_reading+0x38>
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d00b      	beq.n	8000bc6 <button_reading+0x4e>
			  break;
		  case 2: // read data from Button 1
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
			  break;
		  default:
			  break;
 8000bae:	e020      	b.n	8000bf2 <button_reading+0x7a>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000bb0:	79fc      	ldrb	r4, [r7, #7]
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4825      	ldr	r0, [pc, #148]	; (8000c4c <button_reading+0xd4>)
 8000bb8:	f001 fa2a 	bl	8002010 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <button_reading+0xd0>)
 8000bc2:	551a      	strb	r2, [r3, r4]
			  break;
 8000bc4:	e016      	b.n	8000bf4 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000bc6:	79fc      	ldrb	r4, [r7, #7]
 8000bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bcc:	481f      	ldr	r0, [pc, #124]	; (8000c4c <button_reading+0xd4>)
 8000bce:	f001 fa1f 	bl	8002010 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <button_reading+0xd0>)
 8000bd8:	551a      	strb	r2, [r3, r4]
			  break;
 8000bda:	e00b      	b.n	8000bf4 <button_reading+0x7c>
			  debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000bdc:	79fc      	ldrb	r4, [r7, #7]
 8000bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <button_reading+0xd4>)
 8000be4:	f001 fa14 	bl	8002010 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <button_reading+0xd0>)
 8000bee:	551a      	strb	r2, [r3, r4]
			  break;
 8000bf0:	e000      	b.n	8000bf4 <button_reading+0x7c>
			  break;
 8000bf2:	bf00      	nop
		  }

		  if( debounceButtonBuffer0[i] == debounceButtonBuffer1[i]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <button_reading+0xd0>)
 8000bf8:	5cd2      	ldrb	r2, [r2, r3]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4910      	ldr	r1, [pc, #64]	; (8000c40 <button_reading+0xc8>)
 8000bfe:	5ccb      	ldrb	r3, [r1, r3]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d111      	bne.n	8000c28 <button_reading+0xb0>
				&&  debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <button_reading+0xc8>)
 8000c08:	5cd2      	ldrb	r2, [r2, r3]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	490d      	ldr	r1, [pc, #52]	; (8000c44 <button_reading+0xcc>)
 8000c0e:	5ccb      	ldrb	r3, [r1, r3]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d109      	bne.n	8000c28 <button_reading+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	490a      	ldr	r1, [pc, #40]	; (8000c44 <button_reading+0xcc>)
 8000c1a:	5c89      	ldrb	r1, [r1, r2]
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <button_reading+0xd8>)
 8000c1e:	54d1      	strb	r1, [r2, r3]
				fsm_for_input_processing(i);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fef4 	bl	8000a10 <fsm_for_input_processing>
	for (uint8_t  i = 0; i < N0_OF_BUTTONS ; i++){
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d9a7      	bls.n	8000b84 <button_reading+0xc>
		  }

	}
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000068 	.word	0x20000068
 8000c44:	2000006c 	.word	0x2000006c
 8000c48:	20000064 	.word	0x20000064
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	20000060 	.word	0x20000060

08000c54 <display7SEG>:
#include "led_display.h"
#include "main.h"
#include "global.h"
#include "software_timer.h"

void display7SEG(int num){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	f200 8180 	bhi.w	8000f64 <display7SEG+0x310>
 8000c64:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <display7SEG+0x18>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	08000cdd 	.word	0x08000cdd
 8000c74:	08000d25 	.word	0x08000d25
 8000c78:	08000d6d 	.word	0x08000d6d
 8000c7c:	08000db5 	.word	0x08000db5
 8000c80:	08000dfd 	.word	0x08000dfd
 8000c84:	08000e45 	.word	0x08000e45
 8000c88:	08000e8d 	.word	0x08000e8d
 8000c8c:	08000ed5 	.word	0x08000ed5
 8000c90:	08000f1d 	.word	0x08000f1d
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	48c6      	ldr	r0, [pc, #792]	; (8000fb4 <display7SEG+0x360>)
 8000c9a:	f001 f9d0 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	48c4      	ldr	r0, [pc, #784]	; (8000fb4 <display7SEG+0x360>)
 8000ca4:	f001 f9cb 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2104      	movs	r1, #4
 8000cac:	48c1      	ldr	r0, [pc, #772]	; (8000fb4 <display7SEG+0x360>)
 8000cae:	f001 f9c6 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	48bf      	ldr	r0, [pc, #764]	; (8000fb4 <display7SEG+0x360>)
 8000cb8:	f001 f9c1 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	48bc      	ldr	r0, [pc, #752]	; (8000fb4 <display7SEG+0x360>)
 8000cc2:	f001 f9bc 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	48ba      	ldr	r0, [pc, #744]	; (8000fb4 <display7SEG+0x360>)
 8000ccc:	f001 f9b7 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	48b7      	ldr	r0, [pc, #732]	; (8000fb4 <display7SEG+0x360>)
 8000cd6:	f001 f9b2 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000cda:	e167      	b.n	8000fac <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	48b4      	ldr	r0, [pc, #720]	; (8000fb4 <display7SEG+0x360>)
 8000ce2:	f001 f9ac 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	48b2      	ldr	r0, [pc, #712]	; (8000fb4 <display7SEG+0x360>)
 8000cec:	f001 f9a7 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	48af      	ldr	r0, [pc, #700]	; (8000fb4 <display7SEG+0x360>)
 8000cf6:	f001 f9a2 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	48ad      	ldr	r0, [pc, #692]	; (8000fb4 <display7SEG+0x360>)
 8000d00:	f001 f99d 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2110      	movs	r1, #16
 8000d08:	48aa      	ldr	r0, [pc, #680]	; (8000fb4 <display7SEG+0x360>)
 8000d0a:	f001 f998 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	48a8      	ldr	r0, [pc, #672]	; (8000fb4 <display7SEG+0x360>)
 8000d14:	f001 f993 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	48a5      	ldr	r0, [pc, #660]	; (8000fb4 <display7SEG+0x360>)
 8000d1e:	f001 f98e 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000d22:	e143      	b.n	8000fac <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	48a2      	ldr	r0, [pc, #648]	; (8000fb4 <display7SEG+0x360>)
 8000d2a:	f001 f988 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2102      	movs	r1, #2
 8000d32:	48a0      	ldr	r0, [pc, #640]	; (8000fb4 <display7SEG+0x360>)
 8000d34:	f001 f983 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	489d      	ldr	r0, [pc, #628]	; (8000fb4 <display7SEG+0x360>)
 8000d3e:	f001 f97e 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2108      	movs	r1, #8
 8000d46:	489b      	ldr	r0, [pc, #620]	; (8000fb4 <display7SEG+0x360>)
 8000d48:	f001 f979 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4898      	ldr	r0, [pc, #608]	; (8000fb4 <display7SEG+0x360>)
 8000d52:	f001 f974 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4896      	ldr	r0, [pc, #600]	; (8000fb4 <display7SEG+0x360>)
 8000d5c:	f001 f96f 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	4893      	ldr	r0, [pc, #588]	; (8000fb4 <display7SEG+0x360>)
 8000d66:	f001 f96a 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000d6a:	e11f      	b.n	8000fac <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4890      	ldr	r0, [pc, #576]	; (8000fb4 <display7SEG+0x360>)
 8000d72:	f001 f964 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	488e      	ldr	r0, [pc, #568]	; (8000fb4 <display7SEG+0x360>)
 8000d7c:	f001 f95f 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2104      	movs	r1, #4
 8000d84:	488b      	ldr	r0, [pc, #556]	; (8000fb4 <display7SEG+0x360>)
 8000d86:	f001 f95a 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4889      	ldr	r0, [pc, #548]	; (8000fb4 <display7SEG+0x360>)
 8000d90:	f001 f955 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2110      	movs	r1, #16
 8000d98:	4886      	ldr	r0, [pc, #536]	; (8000fb4 <display7SEG+0x360>)
 8000d9a:	f001 f950 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2120      	movs	r1, #32
 8000da2:	4884      	ldr	r0, [pc, #528]	; (8000fb4 <display7SEG+0x360>)
 8000da4:	f001 f94b 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4881      	ldr	r0, [pc, #516]	; (8000fb4 <display7SEG+0x360>)
 8000dae:	f001 f946 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000db2:	e0fb      	b.n	8000fac <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	487e      	ldr	r0, [pc, #504]	; (8000fb4 <display7SEG+0x360>)
 8000dba:	f001 f940 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	487c      	ldr	r0, [pc, #496]	; (8000fb4 <display7SEG+0x360>)
 8000dc4:	f001 f93b 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4879      	ldr	r0, [pc, #484]	; (8000fb4 <display7SEG+0x360>)
 8000dce:	f001 f936 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4877      	ldr	r0, [pc, #476]	; (8000fb4 <display7SEG+0x360>)
 8000dd8:	f001 f931 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2110      	movs	r1, #16
 8000de0:	4874      	ldr	r0, [pc, #464]	; (8000fb4 <display7SEG+0x360>)
 8000de2:	f001 f92c 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4872      	ldr	r0, [pc, #456]	; (8000fb4 <display7SEG+0x360>)
 8000dec:	f001 f927 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	486f      	ldr	r0, [pc, #444]	; (8000fb4 <display7SEG+0x360>)
 8000df6:	f001 f922 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000dfa:	e0d7      	b.n	8000fac <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2101      	movs	r1, #1
 8000e00:	486c      	ldr	r0, [pc, #432]	; (8000fb4 <display7SEG+0x360>)
 8000e02:	f001 f91c 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2102      	movs	r1, #2
 8000e0a:	486a      	ldr	r0, [pc, #424]	; (8000fb4 <display7SEG+0x360>)
 8000e0c:	f001 f917 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2104      	movs	r1, #4
 8000e14:	4867      	ldr	r0, [pc, #412]	; (8000fb4 <display7SEG+0x360>)
 8000e16:	f001 f912 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4865      	ldr	r0, [pc, #404]	; (8000fb4 <display7SEG+0x360>)
 8000e20:	f001 f90d 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <display7SEG+0x360>)
 8000e2a:	f001 f908 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	4860      	ldr	r0, [pc, #384]	; (8000fb4 <display7SEG+0x360>)
 8000e34:	f001 f903 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	485d      	ldr	r0, [pc, #372]	; (8000fb4 <display7SEG+0x360>)
 8000e3e:	f001 f8fe 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000e42:	e0b3      	b.n	8000fac <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	485a      	ldr	r0, [pc, #360]	; (8000fb4 <display7SEG+0x360>)
 8000e4a:	f001 f8f8 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2102      	movs	r1, #2
 8000e52:	4858      	ldr	r0, [pc, #352]	; (8000fb4 <display7SEG+0x360>)
 8000e54:	f001 f8f3 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4855      	ldr	r0, [pc, #340]	; (8000fb4 <display7SEG+0x360>)
 8000e5e:	f001 f8ee 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2108      	movs	r1, #8
 8000e66:	4853      	ldr	r0, [pc, #332]	; (8000fb4 <display7SEG+0x360>)
 8000e68:	f001 f8e9 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <display7SEG+0x360>)
 8000e72:	f001 f8e4 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2120      	movs	r1, #32
 8000e7a:	484e      	ldr	r0, [pc, #312]	; (8000fb4 <display7SEG+0x360>)
 8000e7c:	f001 f8df 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	484b      	ldr	r0, [pc, #300]	; (8000fb4 <display7SEG+0x360>)
 8000e86:	f001 f8da 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000e8a:	e08f      	b.n	8000fac <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4848      	ldr	r0, [pc, #288]	; (8000fb4 <display7SEG+0x360>)
 8000e92:	f001 f8d4 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4846      	ldr	r0, [pc, #280]	; (8000fb4 <display7SEG+0x360>)
 8000e9c:	f001 f8cf 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <display7SEG+0x360>)
 8000ea6:	f001 f8ca 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2108      	movs	r1, #8
 8000eae:	4841      	ldr	r0, [pc, #260]	; (8000fb4 <display7SEG+0x360>)
 8000eb0:	f001 f8c5 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <display7SEG+0x360>)
 8000eba:	f001 f8c0 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	483c      	ldr	r0, [pc, #240]	; (8000fb4 <display7SEG+0x360>)
 8000ec4:	f001 f8bb 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4839      	ldr	r0, [pc, #228]	; (8000fb4 <display7SEG+0x360>)
 8000ece:	f001 f8b6 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000ed2:	e06b      	b.n	8000fac <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4836      	ldr	r0, [pc, #216]	; (8000fb4 <display7SEG+0x360>)
 8000eda:	f001 f8b0 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4834      	ldr	r0, [pc, #208]	; (8000fb4 <display7SEG+0x360>)
 8000ee4:	f001 f8ab 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <display7SEG+0x360>)
 8000eee:	f001 f8a6 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <display7SEG+0x360>)
 8000ef8:	f001 f8a1 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <display7SEG+0x360>)
 8000f02:	f001 f89c 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <display7SEG+0x360>)
 8000f0c:	f001 f897 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	4827      	ldr	r0, [pc, #156]	; (8000fb4 <display7SEG+0x360>)
 8000f16:	f001 f892 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000f1a:	e047      	b.n	8000fac <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <display7SEG+0x360>)
 8000f22:	f001 f88c 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4822      	ldr	r0, [pc, #136]	; (8000fb4 <display7SEG+0x360>)
 8000f2c:	f001 f887 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <display7SEG+0x360>)
 8000f36:	f001 f882 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <display7SEG+0x360>)
 8000f40:	f001 f87d 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <display7SEG+0x360>)
 8000f4a:	f001 f878 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <display7SEG+0x360>)
 8000f54:	f001 f873 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <display7SEG+0x360>)
 8000f5e:	f001 f86e 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000f62:	e023      	b.n	8000fac <display7SEG+0x358>
	default :
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <display7SEG+0x360>)
 8000f6a:	f001 f868 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2102      	movs	r1, #2
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <display7SEG+0x360>)
 8000f74:	f001 f863 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <display7SEG+0x360>)
 8000f7e:	f001 f85e 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <display7SEG+0x360>)
 8000f88:	f001 f859 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <display7SEG+0x360>)
 8000f92:	f001 f854 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <display7SEG+0x360>)
 8000f9c:	f001 f84f 	bl	800203e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <display7SEG+0x360>)
 8000fa6:	f001 f84a 	bl	800203e <HAL_GPIO_WritePin>
		break;
 8000faa:	bf00      	nop
	}
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <update7SEG>:

const int MAX_LED = 4;
int led_buffer[4] = {0, 0, 0, 0};

void update7SEG(int index){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d82a      	bhi.n	800101c <update7SEG+0x64>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <update7SEG+0x14>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000fed 	.word	0x08000fed
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	0800100d 	.word	0x0800100d
    switch (index){
		case 0: {
			display7SEG(led_buffer[index]);
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <update7SEG+0x70>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe35 	bl	8000c54 <display7SEG>
			break ;
 8000fea:	e018      	b.n	800101e <update7SEG+0x66>
		}
		case 1:{
			display7SEG(led_buffer[index]);
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <update7SEG+0x70>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe2d 	bl	8000c54 <display7SEG>
			break ;
 8000ffa:	e010      	b.n	800101e <update7SEG+0x66>
		}
		case 2:{
			display7SEG(led_buffer[index]);
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <update7SEG+0x70>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fe25 	bl	8000c54 <display7SEG>
			break ;
 800100a:	e008      	b.n	800101e <update7SEG+0x66>
		}
		case 3:{
			display7SEG(led_buffer[index]);
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <update7SEG+0x70>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe1d 	bl	8000c54 <display7SEG>
			break ;
 800101a:	e000      	b.n	800101e <update7SEG+0x66>
		}
		default :
			break;
 800101c:	bf00      	nop
    }
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000008c 	.word	0x2000008c

0800102c <updateLedBuffer>:

void updateLedBuffer(int led1_2,int led3_4){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led1_2 / 10;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <updateLedBuffer+0x70>)
 800103a:	fb82 1203 	smull	r1, r2, r2, r3
 800103e:	1092      	asrs	r2, r2, #2
 8001040:	17db      	asrs	r3, r3, #31
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <updateLedBuffer+0x74>)
 8001046:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led1_2 % 10;
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <updateLedBuffer+0x70>)
 800104c:	fb83 2301 	smull	r2, r3, r3, r1
 8001050:	109a      	asrs	r2, r3, #2
 8001052:	17cb      	asrs	r3, r1, #31
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	1aca      	subs	r2, r1, r3
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <updateLedBuffer+0x74>)
 8001062:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led3_4 / 10;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <updateLedBuffer+0x70>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	1092      	asrs	r2, r2, #2
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <updateLedBuffer+0x74>)
 8001074:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led3_4 % 10;
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <updateLedBuffer+0x70>)
 800107a:	fb83 2301 	smull	r2, r3, r3, r1
 800107e:	109a      	asrs	r2, r3, #2
 8001080:	17cb      	asrs	r3, r1, #31
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1aca      	subs	r2, r1, r3
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <updateLedBuffer+0x74>)
 8001090:	60da      	str	r2, [r3, #12]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	66666667 	.word	0x66666667
 80010a0:	2000008c 	.word	0x2000008c

080010a4 <BlinkyRedVer>:

void BlinkyRedVer(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin);
 80010a8:	2104      	movs	r1, #4
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <BlinkyRedVer+0x24>)
 80010ac:	f000 ffdf 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2110      	movs	r1, #16
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <BlinkyRedVer+0x24>)
 80010b6:	f000 ffc2 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2108      	movs	r1, #8
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <BlinkyRedVer+0x24>)
 80010c0:	f000 ffbd 	bl	800203e <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800

080010cc <BlinkyGreenVer>:
void BlinkyGreenVer(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin);
 80010d0:	2110      	movs	r1, #16
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <BlinkyGreenVer+0x24>)
 80010d4:	f000 ffcb 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2104      	movs	r1, #4
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <BlinkyGreenVer+0x24>)
 80010de:	f000 ffae 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2108      	movs	r1, #8
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <BlinkyGreenVer+0x24>)
 80010e8:	f000 ffa9 	bl	800203e <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010800 	.word	0x40010800

080010f4 <BlinkyYellowVer>:
void BlinkyYellowVer(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin);
 80010f8:	2108      	movs	r1, #8
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <BlinkyYellowVer+0x24>)
 80010fc:	f000 ffb7 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2104      	movs	r1, #4
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <BlinkyYellowVer+0x24>)
 8001106:	f000 ff9a 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	4802      	ldr	r0, [pc, #8]	; (8001118 <BlinkyYellowVer+0x24>)
 8001110:	f000 ff95 	bl	800203e <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010800 	.word	0x40010800

0800111c <BlinkyRedHor>:

void BlinkyRedHor(){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin);
 8001120:	2120      	movs	r1, #32
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <BlinkyRedHor+0x24>)
 8001124:	f000 ffa3 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <BlinkyRedHor+0x24>)
 800112e:	f000 ff86 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <BlinkyRedHor+0x24>)
 8001138:	f000 ff81 	bl	800203e <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40010800 	.word	0x40010800

08001144 <BlinkyGreenHor>:
void BlinkyGreenHor(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin);
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <BlinkyGreenHor+0x24>)
 800114c:	f000 ff8f 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2120      	movs	r1, #32
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <BlinkyGreenHor+0x24>)
 8001156:	f000 ff72 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4802      	ldr	r0, [pc, #8]	; (8001168 <BlinkyGreenHor+0x24>)
 8001160:	f000 ff6d 	bl	800203e <HAL_GPIO_WritePin>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010800 	.word	0x40010800

0800116c <BlinkyYellowHor>:
void BlinkyYellowHor(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin);
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <BlinkyYellowHor+0x24>)
 8001174:	f000 ff7b 	bl	800206e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2120      	movs	r1, #32
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <BlinkyYellowHor+0x24>)
 800117e:	f000 ff5e 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <BlinkyYellowHor+0x24>)
 8001188:	f000 ff59 	bl	800203e <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010800 	.word	0x40010800

08001194 <SetLed7Seg1On>:

void SetLed7Seg1On(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET );
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <SetLed7Seg1On+0x38>)
 80011a0:	f000 ff4d 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <SetLed7Seg1On+0x38>)
 80011ac:	f000 ff47 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <SetLed7Seg1On+0x38>)
 80011b8:	f000 ff41 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <SetLed7Seg1On+0x38>)
 80011c4:	f000 ff3b 	bl	800203e <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010800 	.word	0x40010800

080011d0 <SetLed7Seg2On>:
void SetLed7Seg2On(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <SetLed7Seg2On+0x38>)
 80011dc:	f000 ff2f 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET );
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <SetLed7Seg2On+0x38>)
 80011e8:	f000 ff29 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <SetLed7Seg2On+0x38>)
 80011f4:	f000 ff23 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <SetLed7Seg2On+0x38>)
 8001200:	f000 ff1d 	bl	800203e <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010800 	.word	0x40010800

0800120c <SetLed7Seg3On>:
void SetLed7Seg3On(){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <SetLed7Seg3On+0x38>)
 8001218:	f000 ff11 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <SetLed7Seg3On+0x38>)
 8001224:	f000 ff0b 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET );
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <SetLed7Seg3On+0x38>)
 8001230:	f000 ff05 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <SetLed7Seg3On+0x38>)
 800123c:	f000 feff 	bl	800203e <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010800 	.word	0x40010800

08001248 <SetLed7Seg4On>:
void SetLed7Seg4On(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET );
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	480b      	ldr	r0, [pc, #44]	; (8001280 <SetLed7Seg4On+0x38>)
 8001254:	f000 fef3 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <SetLed7Seg4On+0x38>)
 8001260:	f000 feed 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <SetLed7Seg4On+0x38>)
 800126c:	f000 fee7 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET );
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <SetLed7Seg4On+0x38>)
 8001278:	f000 fee1 	bl	800203e <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40010800 	.word	0x40010800

08001284 <SetRedVerHor>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET );
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET );
}

void SetRedVerHor(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2104      	movs	r1, #4
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <SetRedVerHor+0x1c>)
 800128e:	f000 fed6 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2120      	movs	r1, #32
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <SetRedVerHor+0x1c>)
 8001298:	f000 fed1 	bl	800203e <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010800 	.word	0x40010800

080012a4 <SetOffVer>:


void SetOffVer(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2104      	movs	r1, #4
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <SetOffVer+0x28>)
 80012ae:	f000 fec6 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <SetOffVer+0x28>)
 80012b8:	f000 fec1 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2108      	movs	r1, #8
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <SetOffVer+0x28>)
 80012c2:	f000 febc 	bl	800203e <HAL_GPIO_WritePin>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010800 	.word	0x40010800

080012d0 <SetRedVer>:

void SetRedVer(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2104      	movs	r1, #4
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <SetRedVer+0x28>)
 80012da:	f000 feb0 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2110      	movs	r1, #16
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <SetRedVer+0x28>)
 80012e4:	f000 feab 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2108      	movs	r1, #8
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <SetRedVer+0x28>)
 80012ee:	f000 fea6 	bl	800203e <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010800 	.word	0x40010800

080012fc <SetGreenVer>:

void SetGreenVer(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2104      	movs	r1, #4
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <SetGreenVer+0x28>)
 8001306:	f000 fe9a 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <SetGreenVer+0x28>)
 8001310:	f000 fe95 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2108      	movs	r1, #8
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <SetGreenVer+0x28>)
 800131a:	f000 fe90 	bl	800203e <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40010800 	.word	0x40010800

08001328 <SetYellowVer>:

void SetYellowVer(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_VER_GPIO_Port, LED_RED_VER_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2104      	movs	r1, #4
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <SetYellowVer+0x28>)
 8001332:	f000 fe84 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VER_GPIO_Port, LED_GREEN_VER_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2110      	movs	r1, #16
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <SetYellowVer+0x28>)
 800133c:	f000 fe7f 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_VER_GPIO_Port, LED_YELLOW_VER_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2108      	movs	r1, #8
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <SetYellowVer+0x28>)
 8001346:	f000 fe7a 	bl	800203e <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010800 	.word	0x40010800

08001354 <SetOffHor>:


void SetOffHor(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <SetOffHor+0x28>)
 800135e:	f000 fe6e 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <SetOffHor+0x28>)
 8001368:	f000 fe69 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <SetOffHor+0x28>)
 8001372:	f000 fe64 	bl	800203e <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40010800 	.word	0x40010800

08001380 <SetRedHor>:

void SetRedHor(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2120      	movs	r1, #32
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <SetRedHor+0x28>)
 800138a:	f000 fe58 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <SetRedHor+0x28>)
 8001394:	f000 fe53 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2140      	movs	r1, #64	; 0x40
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <SetRedHor+0x28>)
 800139e:	f000 fe4e 	bl	800203e <HAL_GPIO_WritePin>
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010800 	.word	0x40010800

080013ac <SetGreenHor>:

void SetGreenHor(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2120      	movs	r1, #32
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <SetGreenHor+0x28>)
 80013b6:	f000 fe42 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <SetGreenHor+0x28>)
 80013c0:	f000 fe3d 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <SetGreenHor+0x28>)
 80013ca:	f000 fe38 	bl	800203e <HAL_GPIO_WritePin>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40010800 	.word	0x40010800

080013d8 <SetYellowHor>:

void SetYellowHor(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_HOR_GPIO_Port, LED_RED_HOR_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2120      	movs	r1, #32
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <SetYellowHor+0x28>)
 80013e2:	f000 fe2c 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HOR_GPIO_Port, LED_GREEN_HOR_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <SetYellowHor+0x28>)
 80013ec:	f000 fe27 	bl	800203e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_HOR_GPIO_Port, LED_YELLOW_HOR_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <SetYellowHor+0x28>)
 80013f6:	f000 fe22 	bl	800203e <HAL_GPIO_WritePin>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010800 	.word	0x40010800

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fb18 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f828 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 f8ae 	bl	8001570 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001414:	f000 f860 	bl	80014d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <main+0x54>)
 800141a:	f001 fa79 	bl	8002910 <HAL_TIM_Base_Start_IT>
  status_mode = INIT;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <main+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
//  status_ver = INIT;
//  status_hor = INIT;
  //int status_led7seg = 0;
  //int index_led = 0;
  setTimer1(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001428:	f000 f948 	bl	80016bc <setTimer1>
  setTimer2(1000);
 800142c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001430:	f000 f95e 	bl	80016f0 <setTimer2>
  setTimer3(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001438:	f000 f974 	bl	8001724 <setTimer3>
  setTimer4(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f000 f98a 	bl	8001758 <setTimer4>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //fsm_for_input_processing();
	  fsm_mode_run();
 8001444:	f7fe fffa 	bl	800043c <fsm_mode_run>
	  fsm_automatic_1_run();
 8001448:	f7fe fe80 	bl	800014c <fsm_automatic_1_run>
	  fsm_automatic_2_run();
 800144c:	f7fe ff3a 	bl	80002c4 <fsm_automatic_2_run>
	  fsm_mode_led7seg();
 8001450:	f7ff f8f8 	bl	8000644 <fsm_mode_led7seg>
	  fsm_mode_run();
 8001454:	e7f6      	b.n	8001444 <main+0x40>
 8001456:	bf00      	nop
 8001458:	200000d4 	.word	0x200000d4
 800145c:	20000048 	.word	0x20000048

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2228      	movs	r2, #40	; 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fe06 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148a:	2310      	movs	r3, #16
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fe02 	bl	80020a0 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014a2:	f000 f8d5 	bl	8001650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f86e 	bl	80025a0 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f8c1 	bl	8001650 <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM2_Init+0x94>)
 80014f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_TIM2_Init+0x94>)
 80014fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM2_Init+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM2_Init+0x94>)
 800150c:	2209      	movs	r2, #9
 800150e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_TIM2_Init+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_TIM2_Init+0x94>)
 800151e:	f001 f9a7 	bl	8002870 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001528:	f000 f892 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM2_Init+0x94>)
 800153a:	f001 fb3d 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001544:	f000 f884 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM2_Init+0x94>)
 8001556:	f001 fd05 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 f876 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000d4 	.word	0x200000d4

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_GPIO_Init+0xd0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <MX_GPIO_Init+0xd0>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <MX_GPIO_Init+0xd0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_GPIO_Init+0xd0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 80015cc:	2200      	movs	r2, #0
 80015ce:	f640 71fe 	movw	r1, #4094	; 0xffe
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015d4:	f000 fd33 	bl	800203e <HAL_GPIO_WritePin>
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80015d8:	2200      	movs	r2, #0
 80015da:	217f      	movs	r1, #127	; 0x7f
 80015dc:	481a      	ldr	r0, [pc, #104]	; (8001648 <MX_GPIO_Init+0xd8>)
 80015de:	f000 fd2e 	bl	800203e <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80015e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <MX_GPIO_Init+0xdc>)
 80015f8:	f000 fb90 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_RED_VER_Pin LED_YELLOW_VER_Pin LED_GREEN_VER_Pin
                           LED_RED_HOR_Pin LED_YELLOW_HOR_Pin LED_GREEN_HOR_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_RED_VER_Pin|LED_YELLOW_VER_Pin|LED_GREEN_VER_Pin
 80015fc:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001600:	613b      	str	r3, [r7, #16]
                          |LED_RED_HOR_Pin|LED_YELLOW_HOR_Pin|LED_GREEN_HOR_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2302      	movs	r3, #2
 800160c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001616:	f000 fb81 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin LED_D_Pin
                           LED_E_Pin LED_F_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800161a:	237f      	movs	r3, #127	; 0x7f
 800161c:	613b      	str	r3, [r7, #16]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2302      	movs	r3, #2
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_GPIO_Init+0xd8>)
 8001632:	f000 fb73 	bl	8001d1c <HAL_GPIO_Init>

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <clearTimer1>:

void clearTimer0(){
	timer0_counter = 0;
	timer0_flag = 1;
}
void clearTimer1(){
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <clearTimer1+0x18>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
	timer1_flag = 1;
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <clearTimer1+0x1c>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	200000bc 	.word	0x200000bc
 8001678:	200000a0 	.word	0x200000a0

0800167c <clearTimer2>:
void clearTimer2(){
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <clearTimer2+0x18>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
	timer2_flag = 1;
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <clearTimer2+0x1c>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	200000c0 	.word	0x200000c0
 8001698:	200000a4 	.word	0x200000a4

0800169c <clearTimer3>:
void clearTimer3(){
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	timer3_counter = 0;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <clearTimer3+0x18>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
	timer3_flag = 1;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <clearTimer3+0x1c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	200000c4 	.word	0x200000c4
 80016b8:	200000a8 	.word	0x200000a8

080016bc <setTimer1>:

void setTimer0 ( int duration ){
	timer0_counter = duration / TIMER_CYCLE ;
	timer0_flag = 0;
}
void setTimer1( int duration){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <setTimer1+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <setTimer1+0x2c>)
 80016d0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <setTimer1+0x30>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000001c 	.word	0x2000001c
 80016e8:	200000bc 	.word	0x200000bc
 80016ec:	200000a0 	.word	0x200000a0

080016f0 <setTimer2>:

void setTimer2( int duration){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <setTimer2+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <setTimer2+0x2c>)
 8001704:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <setTimer2+0x30>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000001c 	.word	0x2000001c
 800171c:	200000c0 	.word	0x200000c0
 8001720:	200000a4 	.word	0x200000a4

08001724 <setTimer3>:

void setTimer3( int duration){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <setTimer3+0x28>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	fb92 f3f3 	sdiv	r3, r2, r3
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <setTimer3+0x2c>)
 8001738:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <setTimer3+0x30>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000001c 	.word	0x2000001c
 8001750:	200000c4 	.word	0x200000c4
 8001754:	200000a8 	.word	0x200000a8

08001758 <setTimer4>:

void setTimer4( int duration){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <setTimer4+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	fb92 f3f3 	sdiv	r3, r2, r3
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <setTimer4+0x2c>)
 800176c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <setTimer4+0x30>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000001c 	.word	0x2000001c
 8001784:	200000c8 	.word	0x200000c8
 8001788:	200000ac 	.word	0x200000ac

0800178c <timerRun>:

void timerRun (){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <timerRun+0xec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dd0b      	ble.n	80017b0 <timerRun+0x24>
		timer0_counter --;
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <timerRun+0xec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a36      	ldr	r2, [pc, #216]	; (8001878 <timerRun+0xec>)
 80017a0:	6013      	str	r3, [r2, #0]
		if( timer0_counter <= 0) {
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <timerRun+0xec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	dc02      	bgt.n	80017b0 <timerRun+0x24>
			timer0_flag = 1;
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <timerRun+0xf0>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <timerRun+0xf4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd0b      	ble.n	80017d0 <timerRun+0x44>
		timer1_counter--;
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <timerRun+0xf4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <timerRun+0xf4>)
 80017c0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <timerRun+0xf4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dc02      	bgt.n	80017d0 <timerRun+0x44>
			timer1_flag = 1;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <timerRun+0xf8>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <timerRun+0xfc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0b      	ble.n	80017f0 <timerRun+0x64>
		timer2_counter--;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <timerRun+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <timerRun+0xfc>)
 80017e0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <timerRun+0xfc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dc02      	bgt.n	80017f0 <timerRun+0x64>
			timer2_flag = 1;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <timerRun+0x100>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <timerRun+0x104>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0b      	ble.n	8001810 <timerRun+0x84>
		timer3_counter--;
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <timerRun+0x104>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <timerRun+0x104>)
 8001800:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <timerRun+0x104>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc02      	bgt.n	8001810 <timerRun+0x84>
			timer3_flag = 1;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <timerRun+0x108>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <timerRun+0x10c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timerRun+0xa4>
		timer4_counter--;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <timerRun+0x10c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <timerRun+0x10c>)
 8001820:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <timerRun+0x10c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dc02      	bgt.n	8001830 <timerRun+0xa4>
			timer4_flag = 1;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <timerRun+0x110>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <timerRun+0x114>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd0b      	ble.n	8001850 <timerRun+0xc4>
			timer5_counter--;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <timerRun+0x114>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <timerRun+0x114>)
 8001840:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <timerRun+0x114>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	dc02      	bgt.n	8001850 <timerRun+0xc4>
				timer5_flag = 1;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <timerRun+0x118>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer6_counter > 0){
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <timerRun+0x11c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd0b      	ble.n	8001870 <timerRun+0xe4>
			timer6_counter--;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <timerRun+0x11c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <timerRun+0x11c>)
 8001860:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <timerRun+0x11c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dc02      	bgt.n	8001870 <timerRun+0xe4>
				timer6_flag = 1;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <timerRun+0x120>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200000b8 	.word	0x200000b8
 800187c:	2000009c 	.word	0x2000009c
 8001880:	200000bc 	.word	0x200000bc
 8001884:	200000a0 	.word	0x200000a0
 8001888:	200000c0 	.word	0x200000c0
 800188c:	200000a4 	.word	0x200000a4
 8001890:	200000c4 	.word	0x200000c4
 8001894:	200000a8 	.word	0x200000a8
 8001898:	200000c8 	.word	0x200000c8
 800189c:	200000ac 	.word	0x200000ac
 80018a0:	200000cc 	.word	0x200000cc
 80018a4:	200000b0 	.word	0x200000b0
 80018a8:	200000d0 	.word	0x200000d0
 80018ac:	200000b4 	.word	0x200000b4

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_MspInit+0x5c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6193      	str	r3, [r2, #24]
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x5c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_MspInit+0x60>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_MspInit+0x60>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000

08001914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d113      	bne.n	800194e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_TIM_Base_MspInit+0x44>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_TIM_Base_MspInit+0x44>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_TIM_Base_MspInit+0x44>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	201c      	movs	r0, #28
 8001944:	f000 f9b3 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001948:	201c      	movs	r0, #28
 800194a:	f000 f9cc 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a2:	f000 f891 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM2_IRQHandler+0x10>)
 80019b2:	f000 fff9 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000d4 	.word	0x200000d4

080019c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "button.h"


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ){
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d103      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80019de:	f7ff f8cb 	bl	8000b78 <button_reading>
		timerRun();
 80019e2:	f7ff fed3 	bl	800178c <timerRun>
		//getKeyInput();
	}
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f2:	490d      	ldr	r1, [pc, #52]	; (8001a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f8:	e002      	b.n	8001a00 <LoopCopyDataInit>

080019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fe:	3304      	adds	r3, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a04:	d3f9      	bcc.n	80019fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a08:	4c0a      	ldr	r4, [pc, #40]	; (8001a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a0c:	e001      	b.n	8001a12 <LoopFillZerobss>

08001a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a10:	3204      	adds	r2, #4

08001a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a14:	d3fb      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a16:	f7ff ffd3 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f001 fb0d 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7ff fcf1 	bl	8001404 <main>
  bx lr
 8001a22:	4770      	bx	lr
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001a2c:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 8001a30:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001a34:	20000120 	.word	0x20000120

08001a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_2_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x28>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f923 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff ff2a 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f93b 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f903 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000020 	.word	0x20000020
 8001ac0:	20000028 	.word	0x20000028
 8001ac4:	20000024 	.word	0x20000024

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	2000011c 	.word	0x2000011c

08001aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_GetTick+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	2000011c 	.word	0x2000011c

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e148      	b.n	8001fc2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8137 	bne.w	8001fbc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4aa3      	ldr	r2, [pc, #652]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4aa1      	ldr	r2, [pc, #644]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4aa1      	ldr	r2, [pc, #644]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a9f      	ldr	r2, [pc, #636]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a9f      	ldr	r2, [pc, #636]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a9d      	ldr	r2, [pc, #628]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a9d      	ldr	r2, [pc, #628]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a9b      	ldr	r2, [pc, #620]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a9b      	ldr	r2, [pc, #620]	; (8001ff0 <HAL_GPIO_Init+0x2d4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a99      	ldr	r2, [pc, #612]	; (8001ff0 <HAL_GPIO_Init+0x2d4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a82      	ldr	r2, [pc, #520]	; (8001ff4 <HAL_GPIO_Init+0x2d8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8090 	beq.w	8001fbc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_GPIO_Init+0x2e0>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_GPIO_Init+0x2e4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0x1dc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_GPIO_Init+0x2ec>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_Init+0x1d8>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1e2>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1e2>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1e2>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	493b      	ldr	r1, [pc, #236]	; (8001ffc <HAL_GPIO_Init+0x2e0>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b38      	ldr	r3, [pc, #224]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4933      	ldr	r1, [pc, #204]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4929      	ldr	r1, [pc, #164]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4923      	ldr	r1, [pc, #140]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	491f      	ldr	r1, [pc, #124]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4919      	ldr	r1, [pc, #100]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4915      	ldr	r1, [pc, #84]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aeaf 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	372c      	adds	r7, #44	; 0x2c
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	10320000 	.word	0x10320000
 8001fe4:	10310000 	.word	0x10310000
 8001fe8:	10220000 	.word	0x10220000
 8001fec:	10210000 	.word	0x10210000
 8001ff0:	10120000 	.word	0x10120000
 8001ff4:	10110000 	.word	0x10110000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00
 8002008:	40011000 	.word	0x40011000
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]
 800204a:	4613      	mov	r3, r2
 800204c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204e:	787b      	ldrb	r3, [r7, #1]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800205a:	e003      	b.n	8002064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	041a      	lsls	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	611a      	str	r2, [r3, #16]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43d9      	mvns	r1, r3
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e26c      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e246      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fcb6 	bl	8001aec <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fcb2 	bl	8001aec <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1fa      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fca2 	bl	8001aec <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fc9e 	bl	8001aec <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1e6      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1ba      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fc57 	bl	8001aec <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fc53 	bl	8001aec <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e19b      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fc36 	bl	8001aec <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fc32 	bl	8001aec <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e17a      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff fc16 	bl	8001aec <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fc12 	bl	8001aec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e15a      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 faa6 	bl	8002834 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7ff fbfc 	bl	8001aec <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fbf8 	bl	8001aec <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e140      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b97      	ldr	r3, [pc, #604]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b94      	ldr	r3, [pc, #592]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a93      	ldr	r2, [pc, #588]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b8e      	ldr	r3, [pc, #568]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff fbb9 	bl	8001aec <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff fbb5 	bl	8001aec <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0fd      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x4f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a72      	ldr	r2, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a66      	ldr	r2, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a63      	ldr	r2, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb69 	bl	8001aec <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff fb65 	bl	8001aec <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0ab      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fb53 	bl	8001aec <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fb4f 	bl	8001aec <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e095      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8081 	beq.w	800258a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb23 	bl	8001aec <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff fb1f 	bl	8001aec <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e067      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	492d      	ldr	r1, [pc, #180]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	4927      	ldr	r1, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff faf3 	bl	8001aec <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff faef 	bl	8001aec <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e037      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e02f      	b.n	800258a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_RCC_OscConfig+0x4fc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fadc 	bl	8001aec <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff fad8 	bl	8001aec <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e020      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e018      	b.n	800258a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e013      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	42420060 	.word	0x42420060

080025a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0d0      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4965      	ldr	r1, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800261e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d040      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e073      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06b      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4936      	ldr	r1, [pc, #216]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7ff fa2c 	bl	8001aec <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7ff fa28 	bl	8001aec <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e053      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d210      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4922      	ldr	r1, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1cc>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1d0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f98a 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40022000 	.word	0x40022000
 8002764:	40021000 	.word	0x40021000
 8002768:	080030b8 	.word	0x080030b8
 800276c:	20000020 	.word	0x20000020
 8002770:	20000024 	.word	0x20000024

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b490      	push	{r4, r7}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCC_GetSysClockFreq+0xb0>)
 800277c:	1d3c      	adds	r4, r7, #4
 800277e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002784:	f240 2301 	movw	r3, #513	; 0x201
 8002788:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x46>
 80027b2:	e02d      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	623b      	str	r3, [r7, #32]
      break;
 80027b8:	e02d      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027c6:	4413      	add	r3, r2
 80027c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0c5b      	lsrs	r3, r3, #17
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f2:	fb02 f203 	mul.w	r2, r2, r3
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	623b      	str	r3, [r7, #32]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6a3b      	ldr	r3, [r7, #32]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc90      	pop	{r4, r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	080030a8 	.word	0x080030a8
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	003d0900 	.word	0x003d0900

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000020 	.word	0x20000020
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff f83c 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fa6a 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e035      	b.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d004      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_TIM_Base_Start_IT+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d010      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	e007      	b.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0202 	mvn.w	r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9b1 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9a4 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f9b3 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f987 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f97a 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f989 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0208 	mvn.w	r2, #8
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f95d 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f950 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f95f 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f933 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f926 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f935 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe ff50 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa67 	bl	8003026 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8f9 	bl	8002d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa32 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x18>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b3      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x180>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd0>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	f000 8085 	beq.w	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa2>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x116>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xf6>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x136>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 f95c 	bl	8002f26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04e      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f000 f945 	bl	8002f26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8bc 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f913 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f8da 	bl	8002e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	; 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f903 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f89c 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f8f3 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f8ea 	bl	8002ef2 <TIM_ITRx_SetConfig>
        break;
 8002d1e:	e002      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400

08002e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 030a 	bic.w	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 0210 	bic.w	r2, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	031b      	lsls	r3, r3, #12
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f043 0307 	orr.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	609a      	str	r2, [r3, #8]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e041      	b.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2600      	movs	r6, #0
 800303c:	4d0c      	ldr	r5, [pc, #48]	; (8003070 <__libc_init_array+0x38>)
 800303e:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	f000 f822 	bl	8003090 <_init>
 800304c:	2600      	movs	r6, #0
 800304e:	4d0a      	ldr	r5, [pc, #40]	; (8003078 <__libc_init_array+0x40>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	; (800307c <__libc_init_array+0x44>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	080030c8 	.word	0x080030c8
 8003074:	080030c8 	.word	0x080030c8
 8003078:	080030c8 	.word	0x080030c8
 800307c:	080030cc 	.word	0x080030cc

08003080 <memset>:
 8003080:	4603      	mov	r3, r0
 8003082:	4402      	add	r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
